---
title: "Hands-on Exercise 2: Local Measures of Spatial Autocorrelation"
author: "Muhamad Ameer Noor"
date: "24 November 2023"
date-modified: "last-modified"
editor: visual
format: 
  html:
    code-fold: true
    code-summary: "code chunk"
    number-sections: true
    number-depth: 3
execute:
  echo: true # all code chunk will appear
  eval: true # all code chunk will running live (be evaluated)
  warning: false # don't display warning
---

![Zoomed Clusters of Wealthy vs Poor Area - Local Spatial Autocorrelation Illustration](../images/localautocor.png)

## Overview

This exercise is a follow up of 2B exercise on exploring Global and Local Measures of Spatial Autocorrelation (GLSA) using the `spdep` package. Specifically, this 2C exercise will focus on **Local Measures of Spatial Autocorrelation**.

The new learning objectives includes: - Compute Local Indicator of Spatial Association (LISA) statistics to detect clusters and outliers. - Compute Getis-Ord's Gi-statistics to identify hotspots or cold spots. - Visualize the analysis output using the tmap package.

::: {.notebox .lightbulb data-latex="lightbulb"}
Local measures of spatial autocorrelation, in contrast, focus on the relationships between each observation and its immediate surroundings. Instead of a single summary statistic, they provide specific scores for each observation, which help to understand more about the spatial structure in the data. These measures can tell us where specific clusters or outliers are located within the map. They are based on the same general principles as global measures but are more detailed, sometimes mathematically related to the global measures. Local Indicators of Spatial Association (LISAs) are a common example of this type of measure, offering a detailed view of spatial patterns and relationships at a local level. *summarized from: [Rey et al., 2020](https://geographicdata.science/book/notebooks/07_local_autocorrelation.html)*
:::

## Getting Started

load the packages

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

import, join, and visualize the data

```{r}
#import geospatial data
hunan <- st_read(dsn = "../data/geospatial", 
                 layer = "Hunan")
# import aspatial data
hunan2012 <- read_csv("../data/aspatial/Hunan_2012.csv")

# perform relational join
hunan <- left_join(hunan, hunan2012) %>%
  select(1:4, 7, 15)

# visualize the data
equal <- tm_shape(hunan) +
  tm_fill("GDPPC", n = 5, style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification", main.title.size = 1,
            main.title.position = "center", legend.outside = TRUE,
            legend.outside.position = "bottom")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC", n = 5, style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification", main.title.size = 1,
            main.title.position = "center", legend.outside = TRUE,
            legend.outside.position = "bottom")

tmap_arrange(equal, quantile, asp=1, ncol=2)
```

carry-over important variables from previous exercise

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
```

## Cluster and Outlier Analysis

Local Indicators of Spatial Association (LISA) are statistical tools that help us identify clusters or outliers in the spatial distribution of a variable. Imagine studying cancer rates in different neighborhoods of a city; LISA would reveal whether there are areas with unusually high or low rates, indicating a spatial pattern beyond random chance. In this section, we'll focus on applying LISA, particularly local Moran's I, to detect clusters and outliers in the GDP per capita of Hunan Province, China, in 2012.

### Computing and Mapping local Moran's I

To calculate local Moran's I, we use the [*localmoran()*](https://r-spatial.github.io/spdep/reference/localmoran.html) function of **spdep** package. This function computes various statistics, such as Ii, E.Ii, Var.Ii, Z.Ii, and Pr(), indicating the local spatial autocorrelation for each region.

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

::: {.notebox .lightbulb data-latex="lightbulb"}
*localmoran()* function returns a matrix of values whose columns are: - Ii: the local Moran's I statistics - E.Ii: the expectation of local moran statistic under the randomisation hypothesis - Var.Ii: the variance of local moran statistic under the randomisation hypothesis - Z.Ii:the standard deviate of local moran statistic - Pr(): the p-value of local moran statistic
:::

The following code displays the content of the local Moran matrix by using [*printCoefmat()*](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/printCoefmat).

```{r}
printCoefmat(data.frame(
  localMI[fips,], 
  row.names=hunan$County[fips]),
  check.names=FALSE)
```

::: panel-tabset
#### local Moran's I

To visualize the local Moran's I, we append the local Moran's I dataframe to the hunan SpatialPolygonDataFrame, creating **hunan.localMI**. We can then use `tmap` to create choropleth maps.

```{r, echo=TRUE, eval=TRUE}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

#### local Moran's I values

the code below uses **tmap** to plot a choropleth map of local Moran's I values.

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(legend.outside = TRUE, legend.outside.position = "right")
```

#### local Moran's I p-values

Considering both Ii values and their p-values is essential. The code chunk below creates a choropleth map of Moran's I p-values.

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5) +
  tm_layout(legend.outside = TRUE, legend.outside.position = "right")

```

#### Mapping both local Moran's I values and p-values

For a comprehensive interpretation, it's beneficial to plot both the local Moran's I values and their corresponding p-values side by side.

```{r fig.width=12, fig.height=8}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```
:::

## Creating a LISA Cluster Map

The LISA Cluster Map helps us identify significant spatial clusters by color-coding areas based on their type of spatial autocorrelation. To generate this map, we start by plotting the Moran scatterplot.

::: {.notebox .lightbulb data-latex="lightbulb"}
A LISA (Local Indicators of Spatial Association) Cluster Map is a tool used in geography and spatial analysis to identify areas of significant spatial autocorrelation in a dataset. It visually represents regions where observed values (like population density, temperature, etc.) are either similar or dissimilar to their neighboring areas. The map highlights clusters of high values near high values (high-high), low values near low values (low-low), and areas where high values are near low values (high-low) and vice versa. This visualization helps to easily identify areas of similar or dissimilar values and understand spatial patterns and relationships within the data. In essence, it's a way to see where certain types of values are grouped together on a map.
:::

::: panel-tabset
### Moran scatterplot

The Moran scatterplot illustrates how the values of a variable at each location relate to the average values at neighboring locations. The code below uses `moran.plot()` from the **spdep** package to create this plot for the GDPPC.

```{r fig.width=6, fig.height=6}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

The plot is divided into four quadrants. The top right quadrant represents areas with high GDPPC surrounded by areas with average GDPPC -- these are the high-high locations.

### Moran scatterplot with standardised variable

To enhance the analysis, we standardize the GDPPC variable using the [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) function. Then, we plot the Moran scatterplot again.

The [*as.vector()*](https://www.rdocumentation.org/packages/pbdDMAT/versions/0.5-1/topics/as.vector) added to the end is to make sure that the data type we get is a vector that map neatly into the dataframe.

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% 
  as.vector
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

### LISA map

The following code prepares the LISA cluster map by categorizing areas into low-low, low-high, high-low, high-high, or insignificant clusters, and plot it into a map.

```{r fig.width=12, fig.height=8}
# Create an empty vector to store the quadrant information for each area
quadrant <- vector(mode="numeric",length=nrow(localMI))

# Calculate the spatially lagged variable (DV) by subtracting the mean from the lagged GDPPC
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)

# Calculate the local Moran's I values (LM_I) by subtracting the mean from the original values
LM_I <- localMI[,1] - mean(localMI[,1])

# Set the significance level for the local Moran's I
signif <- 0.05       

# Categorize areas into different quadrants based on their DV and LM_I values
quadrant[DV < 0 & LM_I > 0] <- 1  # Low values surrounded by high values (low-high)
quadrant[DV > 0 & LM_I < 0] <- 2  # High values surrounded by low values (high-low)
quadrant[DV < 0 & LM_I < 0] <- 3  # Low values surrounded by low values (low-low)
quadrant[DV > 0 & LM_I > 0] <- 4  # High values surrounded by high values (high-high)

# Identify areas with non-significant Moran's I values and label them as 0
quadrant[localMI[,5] > signif] <- 0


hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

For effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other.

The code chunk below will be used to create such visualisation.

```{r fig.width=12, fig.height=8}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, 
             asp=1, ncol=2)
```

We can also include the local Moran's I map and p-value map as shown below for easy comparison.

```{r fig.width=12, fig.height=8}
#| echo: false
#| fig-width: 12
#| fig-height: 8
tmap_arrange(localMI.map, pvalue.map, 
             asp=1, ncol=2)
```

::: {.notebox .lightbulb data-latex="lightbulb"}
The LISA maps show significant spatial clustering of economic activity. Counties with a high GDP per Capita geographically clustered together indicates positive spatial autocorrelation. Conversely, areas with low Moran's I values (orange) indicate counties with lower GDP per Capita that may be surrounded by higher-income counties. But, previous data processing section shows that some of the negative area might actually be richer, but the technical calculation averaged it down.
:::
:::

## Hot Spot and Cold Spot Area Analysis

In addition to finding clusters and outliers, localized spatial statistics can help identify hot spot and cold spot areas. The term 'hot spot' generally refers to a region or value that is higher relative to its surroundings. The Getis and Ord's G-statistics is a spatial statistical method that detects spatial anomalies by examining neighbors within a specified proximity to identify where either high or low values cluster spatially. Statistically significant hot spots are areas with high values where neighboring areas also exhibit high values. The analysis involves three steps: deriving a spatial weight matrix, computing Gi statistics, and mapping Gi statistics.

### Deriving distance-based weight matrix

Initially, we need to define new neighbors based on distance rather than shared borders, which was considered in spatial autocorrelation. Two types of distance-based proximity matrices are fixed distance weight matrix and adaptive distance weight matrix.

::: panel-tabset
#### Deriving the centroid

First, we need points associated with each polygon, and to achieve this, we use the `st_centroid()` function. Longitude and latitude values are extracted separately and combined into a coordinate matrix.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
coords <- cbind(longitude, latitude)
```

#### Determine the cut-off distance

We determine the upper limit for the distance band by finding the k nearest neighbors for each point and calculating the distance between them.

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary indicates the largest first nearest neighbor distance is 61.79 km, setting this as the upper threshold ensures all units have at least one neighbor.

#### Computing fixed distance weight matrix

Now, we calculate the distance weight matrix bt using a fixed distance of 62 km and [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) function

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Then, we convert the neighbor object into a spatial weights object named *wm62_lw* using `nb2listw()`.

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```
:::

### Computing adaptive distance weight matrix

Fixed distance weight matrices tend to assign more neighbors to densely settled areas and fewer neighbors to less densely settled areas. To control the number of neighbors directly, we use k-nearest neighbors and specify *k*.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

Then, we convert the neighbor object into a spatial weights object

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

## Computing Gi statistics

Gi statistics help us find areas with unusually high or low values compared to their neighbors

::: panel:tabset
### Gi statistics using fixed distance

The first code chunk computes Gi statistics using a fixed distance weight matrix (wm62_lw). The resulting Gi values are Z-scores, where greater values indicate stronger clustering intensity. We then join these Gi values to the original data frame for visualization.

```{r echo=TRUE, eval=TRUE}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

The Gi statistics, represented as Z-scores, are now linked to the original data frame. We visualize these values on a map using a choropleth map, where colors indicate the intensity and direction of clustering.

```{r fig.width=12, fig.height=8}
# Combine the Gi statistics with the original data frame 'hunan'
# Convert the Gi vector ('gi.fixed') to a matrix and bind it to the original data frame ('hunan')
# Rename the newly added column to 'gstat_fixed'
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)

# Create a quick thematic map (qtm) of the original data frame ('hunan') for GDP per capita ('GDPPC')
gdppc <- qtm(hunan, "GDPPC")

# Create a thematic map (Gimap) for Gi statistics using the 'tm' package
# Shape the map based on the combined data frame ('hunan.gi')
Gimap <-tm_shape(hunan.gi) +
  # Fill the map with colors based on 'gstat_fixed' column
  tm_fill(col = "gstat_fixed", 
          # Use the 'pretty' style for color breaks
          style = "pretty",
          # Choose the RdBu color palette
          palette="-RdBu",
          # Set the title for the legend
          title = "local Gi") +
  # Add semi-transparent borders to map features
  tm_borders(alpha = 0.5)

# Arrange the original GDP per capita map and the Gi map side by side
tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

::: {.notebox .lightbulb data-latex="lightbulb"}
The Gi\* map (Getis-Ord Gi\* statistic) for the GDP per Capita of counties in Hunan, China, suggests spatial hotspots and cold spots of economic wealth. The map on the right indicates areas with high Gi\* values (in red), revealing clusters of counties with significantly high GDP per Capita---these are the hotspots of economic activity. Conversely, the blue areas represent cold spots with low Gi\* values, indicating clusters of counties with low GDP per Capita. Notably, the **central to northeast region shows a strong concentration of wealth with a Gi\* value between 5 to 6**, indicating a very high degree of clustering of economic affluence. This pattern highlights the unequal distribution of economic wealth across the region, with certain areas being significantly more prosperous than others, which can inform targeted economic development and policy intervention strategies.
:::

### Gi statistics using adaptive distance

Now, we repeat the process using an adaptive distance weight matrix (*knn_lw*). This allows us to consider different distances for each location based on their neighbors, providing a more flexible approach.

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

The Gi values based on adaptive distance weights are joined to the original data frame. Again, we visualize these values on a choropleth map to observe patterns.

```{r fig.width=12, fig.height=8}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```

::: {.notebox .lightbulb data-latex="lightbulb"}
The Gi map with adaptive distance shows a clear delineation of economic clustering across the Hunan area. Compared to the previous fixed distance Gi map, the adaptive distance approach may provide a more nuanced view of spatial relationships, adjusting for varying densities of counties. **This can highlight economic disparities more precisely**, as the fixed distance may overemphasize or underrepresent clustering due to uniform application of distance across varied geographical spaces. The adaptive map might therefore offer a more accurate representation of spatial economic patterns, **potentially revealing more localized clusters that are not as apparent with a fixed distance approach.**
:::
:::
