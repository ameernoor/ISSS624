---
title: "Hands-on Exercise 2: Global Measures of Spatial Autocorrelation"
author: "Muhamad Ameer Noor"
date: "24 November 2023"
date-modified: "last-modified"
editor: visual
format: 
  html:
    code-fold: true
    code-summary: "code chunk"
    number-sections: true
    number-depth: 3
execute:
  echo: true # all code chunk will appear
  eval: true # all code chunk will running live (be evaluated)
  warning: false # don't display warning
---

![Spaces are Clustered - Global Spatial Autocorrelation Illustration](../images/globalautocor.png)

## Overview

In this part, we'll explore Global and Local Measures of Spatial Autocorrelation (GLSA) using the `spdep` package. Specifically, this 2B exercise will focus on **Global Measures of Spatial Autocorrelation** while the Local Spatial Autocorrelation will be explored in 2C exercise. The new learning objectives includes: - Compute Global Spatial Autocorrelation (**GSA**) statistics using spdep. - Plot **Moran scatterplot**. - Compute and plot spatial correlogram with `spdep`. - Visualize the analysis output using the `tmap` package.

::: {.notebox .lightbulb data-latex="lightbulb"}
Global measures of spatial autocorrelation provide a single summary statistic for an entire dataset, reflecting the overall degree of geographical clustering or dispersion. A commonly used global measure is Moran's I, which helps to determine whether attribute values in a dataset are clustered together or spread apart. However, it doesn't specify where these clusters or outliers are located on the map. Essentially, these measures give a general idea of spatial patterns across the whole study area but don't provide detailed insights into local variations or specific areas *summarized from: [Wu and Kemp, 2019](https://gistbok.ucgis.org/bok-topics/global-measures-spatial-association)*
:::

### The analytical question

In spatial policy, local governments aim for an even distribution of development within a region. This exercise focuses on applying spatial statistical methods to investigate if development is evenly distributed in a province. If not, the next questions are: Is there evidence of spatial clustering? And if yes, where are these clusters?

The case study and data being explored is the same as previous exercise (2A), which are GDP per capita (GDPPR) in [Hunan Province](https://en.wikipedia.org/wiki/Hunan) , People's Republic of China.

### Setting Up the Analytical Tools

Ensure that `spdep`, `sf`, `tmap`, and `tidyverse` packages in R are installed. These packages are used for importing and handling geospatial data, wrangling attribute data, computing spatial weights, and visualizing the results. The code below checks for and installs missing packages:

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## Import and Visualize the Data

Similar to previous exercise, firstly the data needs to be imported, joined, and visualized to get the big picture.

```{r}
#import geospatial data
hunan <- st_read(dsn = "../data/geospatial", 
                 layer = "Hunan")
# import aspatial data
hunan2012 <- read_csv("../data/aspatial/Hunan_2012.csv")

# perform relational join
hunan <- left_join(hunan, hunan2012) %>%
  select(1:4, 7, 15)

# visualize the data
equal <- tm_shape(hunan) +
  tm_fill("GDPPC", n = 5, style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification", main.title.size = 1,
            main.title.position = "center", legend.outside = TRUE,
            legend.outside.position = "bottom")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC", n = 5, style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification", main.title.size = 1,
            main.title.position = "center", legend.outside = TRUE,
            legend.outside.position = "bottom")

tmap_arrange(equal, quantile, asp=1, ncol=2)
```

## Global Spatial Autocorrelation

In this section, we'll explore how to calculate global spatial autocorrelation statistics and conduct a test for spatial randomness across the entire study area.

### Computing Contiguity Spatial Weights

Before we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area which use queen method in this example. After that weights needs to be assigned to each neighboring polygon, which use row-standardized weights matrix. Details on the concept was discussed in previous exercise.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)

rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

::: {.notebox .lightbulb data-latex="lightbulb"}
*style* can take values "W", "B", "C", "U", "minmax" and "S". B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).

If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.
:::

### Global Spatial Autocorrelation: Moran's I

::: panel-tabset
#### Moran's I test

Now, let's perform a test for Moran's I statistic, which assesses spatial autocorrelation. The test is performed using [*moran.test()*](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

```{r}
moran.test(hunan$GDPPC, listw=rswm_q, zero.policy = TRUE, na.action=na.omit)
```

::: {.notebox .lightbulb data-latex="lightbulb"}
The statistical output indicates a Moran's I statistic of 0.30, which is a measure of spatial autocorrelation. The standard deviate is 4.7351, leading to a very low p-value of 1.095e-06. The alternative hypothesis suggests a "greater" spatial autocorrelation. Based on the output, we can conclude that there is a **strong and significant positive spatial autocorrelation in the GDPPC of Hunan county.** This means that counties with similar GDPPC tend to be close to each other on the map. In other words, there is a spatial pattern of high-income and low-income counties in Hunan.
:::

#### Monte Carlo Moran's I

Next, perform a permutation test for Moran's I using the [*moran.mc()*](https://r-spatial.github.io/spdep/reference/moran.mc.html) function of **spdep**. This involves running 1000 simulations.

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

::: {.notebox .lightbulb data-latex="lightbulb"}
The associated p-value is 0.001, indicating statistical significance. The alternative hypothesis of "greater" spatial autocorrelation aligns with the initial Moran's I test. This Monte Carlo simulation provides **additional evidence supporting the presence of positive spatial autocorrelation in the GDP per capita values across the study area**.
:::

#### Visualising Monte Carlo Moran's I

To gain more insights, we plot the distribution of simulated Moran's I values using a histogram. the code use [*hist()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) and [*abline()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/abline) of `R Graphics` are used.

```{r}
mean(bperm$res[1:999])
var(bperm$res[1:999])
summary(bperm$res[1:999])
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

::: {.notebox .lightbulb data-latex="lightbulb"}
The histogram indicates that the simulated Moran's I values follow a normal distribution with it's bell-shaped characteristic
:::

the next code chunk perform similar task, but using `ggplot` package

```{r}
# Extract the res column and convert it to a data frame
res_df <- data.frame(res = bperm$res)

# Plot the histogram using ggplot2
ggplot(res_df, aes(x = res)) +
  geom_histogram(bins = 20) +
  geom_vline(xintercept = 0, color = "red") +
  xlab("Simulated Moran's I")


```
:::

### Global Spatial Autocorrelation: Geary's

In this part, we explore Geary's C statistics to understand spatial autocorrelation in our data. Geary's C test helps us determine if there's any pattern of similarity or dissimilarity between neighboring areas.

::: panel-tabset
#### Geary's C test

The provided R code conducts Geary's C test using the [*geary.test()*](https://r-spatial.github.io/spdep/reference/geary.test.html) function from the **spdep** package. This test essentially examines if the values in one region are significantly different from the values in neighboring regions.

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

::: {.notebox .lightbulb data-latex="lightbulb"}
The Geary's C test results in a significant p-value (less than the typical significance level of 0.05), indicating that the spatial autocorrelation observed in the data is unlikely due to random chance. The Geary C statistic (0.6907) being less than the expectation (1.0000) suggests a pattern of dissimilarity between neighboring regions. Additionally, the variance (0.0073) provides information about the variability of this dissimilarity. **Overall, these results suggest a non-random spatial pattern of dissimilarity in the distribution of the GDP per capita in the study area**.
:::

#### Computing Monte Carlo Geary's C

This code snippet uses Monte Carlo simulation to test Geary's C statistic for spatial autocorrelation, by using [*geary.mc()*](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**. By comparing the observed statistic to a distribution of simulated values, it helps us assess whether the observed pattern is statistically significant.

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

::: {.notebox .lightbulb data-latex="lightbulb"}
The observed Geary's C statistic is 0.69072, and it ranks first among the simulated values, with a p-value of 0.001. This suggests that there is a strong spatial autocorrelation in the distribution of GDPPC values, **indicating a pattern of either spatial similarity or dissimilarity among neighboring regions**. The alternative hypothesis of greater spatial autocorrelation is supported by the low p-value, signifying that the observed spatial pattern is unlikely to have occurred by random chance alone..
:::

#### Visualising the Monte Carlo Geary's C

The next step involves creating a histogram to understand the distribution of simulated values and to see where our observed value falls on the spectrum.

```{r}
mean(bperm$res[1:999])
var(bperm$res[1:999])
summary(bperm$res[1:999])
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

::: {.notebox .lightbulb data-latex="lightbulb"}
Similar to previous result, this histogram also indicates that the simulated Geary c values follow a normal distribution with it's bell-shaped characteristic
:::

## Spatial Correlogram

Spatial correlograms offer insights into spatial autocorrelation patterns by plotting autocorrelation indices against increasing distances. They are useful for exploratory analysis.

### Compute Moran's I correlogram

In this part, the [*sp.correlogram()*](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package computes a Moran's I correlogram for GDPPC. The resulting plot illustrates how Moran's I values change as the distance between regions increases. In the code chunk below,

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

It's important to inspect the full analysis report, which can be printed using the following code:

```{r}
print(MI_corr)
```

::: {.notebox .lightbulb data-latex="lightbulb"}
The spatial correlogram for hunan\$GDPPC using Moran's I method reveals that as the distance between regions increases, there is a statistically significant spatial autocorrelation. The estimate of Moran's I indicates positive autocorrelation at various lag distances (1 to 6). The p-values associated with each lag distance are highly significant (indicated by the \*\*\*), suggesting that the observed spatial pattern is not due to random chance. This implies that **regions with similar GDPPC values tend to cluster together, providing evidence for a non-random spatial distribution of economic development in Hunan province**.
:::

### Compute Geary's C correlogram and plot

Similarly, we calculate a Geary's C correlogram to understand how the spatial autocorrelation, measured by Geary's C, changes with increasing distances.

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

Print the analysis report for a more detailed understanding:

```{r}
print(GC_corr)
```

::: {.notebox .lightbulb data-latex="lightbulb"}
The Geary's C correlogram for the GDPPC in Hunan Province indicates varying levels of spatial autocorrelation at different distance lags. The estimates at the first and second lags (distances) are significantly lower than the expected value, suggesting a pattern of positive spatial autocorrelation, meaning similar values tend to cluster together. However, as the distance increases, the autocorrelation becomes non-significant (lag 3), indicating a decrease in similarity between neighboring regions. Subsequently, at lags 4, 5, and 6, there is a mix of significant and non-significant autocorrelation, suggesting a complex spatial pattern with pockets of both similarity and dissimilarity at these distances.
:::
:::
