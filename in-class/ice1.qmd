---
# the --- border define yml part in this script
title: "In-class Exercise 1: Preparing the Data Flow"
author: "Muhamad Ameer Noor"
date: "18 November 2023"
date-modified: "last-modified"
format: 
  html:
    code-fold: true
    code-summary: "code chunk"
    number-sections: true
    number-depth: 3
execute:
  echo: true # all code chunk will appear
  eval: true # all code chunk will running live (be evaluated)
  warning: false # don't display warning
editor: visual 
---

![Preparing Data Flow Illustration](../images/flow.png)

## Getting Started

The code chunk below load the following packages: - **tmap**: for thematic mapping - **sf** : for geospatial data handling - **tidyverse** for non-spatial data handling.

```{r}
#| code-fold: false
pacman::p_load(tmap, sf, tidyverse)
# load the libraries, the pacman itself will only be loaded temporarily
```

## Preparing the Data Flow

### Importing the Aspatial data

Import the *Passenger Volume by Origin Destination Bus Stops* data set downloaded from LTA DataMall by using `read_csv()` of **readr** package.

```{r}
#| code-fold: false
#| eval: false
odbus <- read_csv("../data/aspatial/origin_destination_bus_202308.csv.gz")
head(odbus)
```

#### Change Character Data Type to Numerical Factor

**odbus08** is a tibble dataframe. However, `ORIGIN_PT_CODE` and `DESTINATION_PT_CODE` are in character format. These are transformed into factors (categorical data type) for further analysis.

```{r}
#| code-fold: false
#| eval: false
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```

#### Extracting the data for analysis

extract commuting flows by extracting Origin bus stop codes and number of trips for **weekdays** between 7 and 9 o'clock, into a new dataframe:

```{r}
#| eval: false
origtrip_7_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
glimpse(origtrip_7_9)
# the %>% sign is for stepping the process in order 
```

### Importing the geospatial data

Two geospatial data will be used in this exercise both data contain coordinate in geometry column:

```{r}
#| code-fold: false
#| eval: false
busstop <- st_read(dsn = "../data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414) # the st_transform is for projection
glimpse(busstop)
```

```{r}
#| code-fold: false
#| eval: false
mpsz <- st_read(dsn = "../data/geospatial",
                layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
glimpse(mpsz)
```
