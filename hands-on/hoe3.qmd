---
title: "Hands-on Exercise 3: Processing and Visualising Flow Data"
author: "Muhamad Ameer Noor"
date: "1 December 2023"
date-modified: "last-modified"
editor: visual
format: 
  html:
    code-fold: true
    code-summary: "code chunk"
    fontsize: 18px
    number-sections: true
    number-depth: 2
execute:
  echo: true # all code chunk will appear
  eval: true # all code chunk will running live (be evaluated)
  warning: false # don't display warning
  message: false
---

## Overview

**Spatial interaction** encompasses the dynamics of movement including people, goods, or information between locations in geographical space. This broad concept includes diverse activities such as global trade, transportation schedules, and even pedestrian movements.

Each spatial interaction involves a discrete **origin/destination pair**, represented as a cell in a matrix. The matrix, known as an **origin/destination matrix** or **spatial interaction matrix**, has rows corresponding to origin locations and columns to destination locations.

In this analysis, we'll construct an OD matrix using the *Passenger Volume by Origin Destination Bus Stops* dataset obtained from LTA DataMall.

## Getting Started

We'll employ four R packages for this analysis:

-   **sf**: For handling and transforming geospatial data.
-   **tidyverse**: For data manipulation and visualization.
-   **tmap**: For creating thematic maps.

```{r}
pacman::p_load(tmap, sf, DT, stplanr, performance,
               ggpubr, tidyverse)
#pacman::p_load' ensures all specified packages are installed and loaded
```

## Preparing the Flow Data

### Importing the OD Data

We begin by importing the *Passenger Volume by Origin Destination Bus Stops* dataset using the `read_csv()` function from the **readr** package.

```{r}
odbus202308 <- read_csv("../data/aspatial/origin_destination_bus_202308.csv.gz")
odbus202308 <- data.frame(lapply(odbus202308, factor))
odbus202308$TOTAL_TRIPS <- as.numeric(odbus202308$TOTAL_TRIPS)
odbus202308$TIME_PER_HOUR <- as.numeric(odbus202308$TIME_PER_HOUR)
# The dataset is converted to a dataframe with appropriate data types

# display the summary of the dataset
glimpse(odbus202308)
```

### Extracting the Study Data

Our focus is on weekday commuting flows between 6 and 9 AM.

```{r}
odbus6_9 <- odbus202308 %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
# Filtering and aggregating data for specific time and day

# View the extracted data
datatable(odbus6_9)
# Displaying the data in an interactive table format
```

## Working with Geospatial Data

We'll use two geospatial datasets:

-   **BusStop**: Locations of bus stops from LTA DataMall as of July 2023.
-   **MPSZ-2019**: URA Master Plan 2019 sub-zone boundaries.

### Importing Geospatial Data

The datasets will be imported as follows:

```{r}
busstop <- st_read(dsn = "../data/geospatial", layer = "BusStop") %>%
  st_transform(crs = 3414)
# Importing and transforming the BusStop data

mpsz <- st_read(dsn = "../data/geospatial", layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
# Importing and transforming the MPSZ-2019 data
mpsz
```

::: callout-note
-   `st_read()` imports shapefiles into R as sf data frames.
-   `st_transform()` alters the projection to CRS 3414 for uniformity.
:::

## Geospatial Data Wrangling

### Combining Busstop and mpsz

We'll merge the planning subzone codes from the mpsz dataset into the busstop dataset.

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
# Merging data and retaining essential columns

# Note: Five bus stops outside Singapore's boundary are excluded.

# check the output
datatable(busstop_mpsz)
# Viewing the combined data
```

Now, let's append the planning subzone codes to the `odbus6_9` dataset:

```{r}
od_data <- left_join(odbus6_9, busstop_mpsz, by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE, ORIGIN_SZ = SUBZONE_C, DESTIN_BS = DESTINATION_PT_CODE)
# Joining and renaming columns for clarity

# check the data
glimpse(od_data)
```

Checking for duplicate records is crucial, if duplicates exist, we keep only unique records:

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
# Identifying any duplicate records

od_data <- unique(od_data)
# Retaining only unique records

glimpse(od_data)
# check the data
```

We'll now complete the dataset with destination subzone codes:

```{r}
od_data <- left_join(od_data, busstop_mpsz, by = c("DESTIN_BS" = "BUS_STOP_N")) %>%
   rename(DESTIN_SZ = SUBZONE_C)
# Further enriching the dataset with destination subzone codes

glimpse(od_data)
# check the data
```

Checking for and removing any remaining duplicates:

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
# Re-checking for duplicates

od_data <- unique(od_data)
# Ensuring all records are unique

glimpse(od_data)
# Check the data
```

Finally, we'll prepare the data for visualisation:

```{r}
od_data <- od_data %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(MORNING_PEAK = sum(TRIPS))
# Final data preparation step

glimpse(od_data)
# check the final data
```

## Visualising Spatial Interaction

We'll now create and visualize desire lines using the **stplanr** package.

### Removing Intra-zonal Flows

Intra-zonal flows are not required for our analysis:

```{r}
od_data1 <- od_data[od_data$ORIGIN_SZ != od_data$DESTIN_SZ,]
# Removing intra-zonal flows for clarity in visualization

glimpse(od_data1)
# check the output
```

### Creating Desire Lines

Here's how to create desire lines using the `od2line()` function:

```{r}
flowLine <- od2line(flow = od_data1, zones = mpsz, zone_code = "SUBZONE_C")
# Generating desire lines between different zones

glimpse(flowLine)
# check the output
```

### Visualising the Desire Lines

To visualize the lines:

```{r}
# Enable tmap to automatically check and fix invalid polygons
tmap_options(check.and.fix = TRUE)

# Now create your plot
tm_shape(mpsz) +
  tm_polygons() +
  flowLine %>%
  tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
# Thematic map showing the intensity of commuting flows
```

Focusing on selected flows can be insightful, especially when data are skewed:

```{r}
tmap_mode("plot")
tmap_options(check.and.fix = TRUE)
```

```{r}
flowLine %>%  
  filter(MORNING_PEAK >= 5000) %>%
  tm_shape() +
  tm_lines(lwd = "MORNING_PEAK", col = "orange", style = "quantile", scale = c(0.1, 1, 3, 5, 7, 10), n = 6, alpha = 0.3)
# Filtering and visualizing only significant flows
```
