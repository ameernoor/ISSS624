[
  {
    "objectID": "take-home/the2.html",
    "href": "take-home/the2.html",
    "title": "Take-home 2 - Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows",
    "section": "",
    "text": "Illustration\n\n\n\npacman::p_load(tmap, sf, tidyverse, sfdep, knitr, Hmisc, mapview, DT)\n\n\n1 Overview\n\nThe SceneThe ObjectiveThe MethodThe Data\n\n\nUnderstanding why city residents wake up early to travel from home to work and assessing the consequences of discontinuing a public bus service along a specific route are key challenges faced by transport operators and urban managers in the realm of urban mobility. Traditionally, answering such questions relied on expensive, time-consuming commuter surveys. However, these surveys not only demanded considerable resources but also yielded data that took a substantial amount of time to clean and analyze, often rendering it outdated by the time reports were ready.\nIn today’s digital era, urban infrastructures, including public buses and mass rapid transits, are becoming increasingly digital. The proliferation of technologies like GPS on vehicles and SMART cards for public transport users generates vast geospatial data sets, offering insights into movement patterns over time and space. Despite this wealth of data, planners struggle to effectively leverage and transform it into valuable information, impacting the return on investment in data collection and management.\nTo address this gap, this exercise conducts a case study showcasing the potential of Geographic Information System and Spatial Data Analysis (GDSA). By integrating data from various sources, this approach aims to build spatial interaction models that unveil the factors influencing urban mobility patterns in the context of public bus transit.\n\n\nThis task aims to achieve specific goals, focusing on General Geospatial Data Science and Spatial Interaction Modeling.\n\nGeneral Geospatial Data Science:Spatial Interaction Modeling:\n\n\nFor the General Geospatial Data Science, the aim is to do the following: - Create a detailed hexagon map (375m distance from center to edges) representing Traffic Analysis Zones (TAZ). - Various time will have different pattern of traffic flow. For this study, the focus is on the period of weekday morning peak from 6am to 9am. - Develop an Origin-Destination (O-D) matrix illustrating commuter flows during the chosen time interval. - Visualize passenger trip flows using geospatial methods, analyzing the observed spatial patterns. - Gather relevant data, both spatial and aspatial, from publicly available sources. - Generate a distance matrix based on the earlier derived hexagon data.\n\n\n\n\n\n\nis 375m a magical number?\n\n\n\n\n\nStudies have found that people are usually willing to walk approximately 750 meters to get to public transportation. A more specific comfortable walking distance that takes into account the local weather and how cities are laid out.\nWhen planning city maps and deciding where to place public transport stops, we use hexagons to represent areas on the map. Why hexagons? They fit together perfectly without wasting any space, which makes them great for dividing the map into zones. To match the 750-meter walking distance, each hexagon is sized so that the distance from the center to any edge is half that distance, which is 375 meters. This ensures that anyone within the hexagon is no more than a 750-meter walk away from the center, where a public transport stop would be ideally located. This method is a smart way to make sure that everyone has easy access to transport within a reasonable walking distance.\nsummarized from: Daniels & Mulley, Dhuri, Sekste & Kazakov, and in-class explanation from Prof Kam Tin Seong\n\n\n\n\n\n\n\n\n\nwhat is Traffic Analysis Zones (TAZ)?\n\n\n\n\n\nA Traffic Analysis Zone (TAZ) is a way of dividing a city into smaller areas for transportation planning. Each TAZ has some information about the people and places in it, such as how many people live there, how many cars they have, and where they work or go to school. These information help planners understand how people travel and what kind of transportation they need.\nSome key points about TAZs are: - The size and shape of a TAZ can vary depending on the location and the purpose of the study. For example, a TAZ in a downtown area might be smaller and more regular than a TAZ in a rural area. - The choice of a TAZ system is very important because it affects the accuracy and usefulness of the transportation models. A good TAZ system should reflect the reality of the travel patterns and demands in the city. - TAZs are not fixed and can be changed or updated over time to reflect new data or changes in the city. However, changing TAZs can also cause some problems, such as losing historical data or making comparisons difficult.\nSummarized from: Miller, 2021\n\n\n\n\n\n\n\n\n\nwhat is Origin-Destination (O-D) matrix?\n\n\n\n\n\nAn Origin-Destination (O-D) matrix is a way of showing how many trips are made from one place to another in a given area. For example, an O-D matrix can tell us how many people travel from their home to their work, or from their hotel to a tourist attraction, or from one city to another. An O-D matrix can help us understand the travel patterns and demands of people, and plan for better transportation systems.\nAn O-D matrix usually looks like a table, where the rows represent the origins (where the trips start) and the columns represent the destinations (where the trips end). Each cell in the table shows the number of trips between a specific origin and destination. Sometimes, the table can also include other information, such as the mode of transportation (car, bus, bike, etc.), the time of the day, or the purpose of the trip.\nHere is an example of a simple O-D matrix for a city with four zones (A, B, C, and D):\n\n\n\n\nA\nB\nC\nD\nTotal\n\n\n\n\nA\n0\n10\n5\n15\n30\n\n\nB\n20\n0\n10\n10\n40\n\n\nC\n10\n15\n0\n5\n30\n\n\nD\n5\n5\n5\n0\n15\n\n\nTotal\n35\n30\n20\n30\n115\n\n\n\nThis table tells us that there are 115 trips in total in the city, and that the most common origin-destination pair is A-D, with 15 trips. It also tells us that no one travels within the same zone (the diagonal cells are zero).\nAn O-D matrix can be created from different sources of data, such as surveys, GPS, mobile phones, or social media. Depending on the data source, the level of detail and accuracy of the O-D matrix can vary. For example, a survey might ask people to report their exact home and work locations, while a GPS device might only record the coordinates of the start and end points of a trip. Therefore, different methods and techniques are needed to process and analyze the data, and to convert them into a meaningful O-D matrix.\nSummarized From: Coşkun, et al., 2020\n\n\n\n\n\n\n\n\n\nwhat is trip flows?\n\n\n\n\n\nTrip flows are the movements of people or things from one place to another in a given area. For example, trip flows can show how many people travel from their home to their work, or from one city to another, or from one country to another. Trip flows can help us understand the patterns and reasons of these movements, and how they affect the environment, the economy, and the society.\nSummarized from: Tao Ran, 2021\n\n\n\n\n\n\n\n\n\nspatial vs aspatial data\n\n\n\n\n\nSpatial data is data that has a geographic or spatial component, meaning that it is related to a specific location on the Earth’s surface. For example, the coordinates of a city, the shape of a lake, or the population density of a region are all spatial data. Spatial data can be represented using maps, graphs, or statistics, and can be analyzed using Geographic Information Systems (GIS).\nAspatial data is data that does not have a direct connection to a specific location. For example, the name of a person, the color of a car, or the price of a product are all aspatial data. Aspatial data can be represented using tables, charts, or text, and can be analyzed using various methods such as arithmetic, logic, or statistics.\nThe main difference between spatial and aspatial data is that spatial data can show the spatial relationships and patterns of the data, such as distance, direction, or proximity, while aspatial data cannot. Spatial data can also be combined with aspatial data to provide more information and insights. For example, a map of a city can show both the spatial data (the location and shape of the buildings) and the aspatial data (the name and use of the buildings).\nSummarized from: Cengel\n\n\n\n\n\n\n\n\n\nwhat is distance matrix?\n\n\n\n\n\nA distance matrix is a way of showing how far away different places are from each other in a given area. For example, a distance matrix can tell us how many kilometers or minutes it takes to travel from one city to another by car, bus, or bike. Applying geospatial analytics on distance matrix can help us understand the patterns and reasons of these movements, and how they affect the environment, the economy, and the society. dive deeper at (ArcGIS)[https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-analyst/distance-analysis.htm]\n\n\n\n\n\nFor the General Spatial Interaction Model, the aim is to do the following: - Adjust spatial interaction models to identify factors influencing urban commuting during the specified time. - Present modeling results using suitable geovisualization and graphical methods. - Interpret the outcomes to gain insights into the factors impacting commuting flows in the urban landscape during the selected time frame.\n\n\n\n\n\n\nwhat is spatial interaction model?\n\n\n\n\n\nA spatial interaction model is a way of describing how people or things move from one place to another in a given area. For example, a spatial interaction model can show how many people commute from their home to their work, or how many goods are traded between different cities or countries. A spatial interaction model can help us understand the patterns and reasons of these movements, and how they affect the environment, the economy, and the society.\nOne of the most common spatial interaction models is the gravity model, which is based on an analogy to the physical law of gravity. The gravity model assumes that the movement between two places is proportional to their size (such as population or income) and inversely proportional to their distance. The gravity model can be written as:\n\\[T_{ij} = k \\frac{v_i^{\\lambda} w_j^{\\alpha}}{d_{ij}^{\\beta}}\\]\nwhere \\(T_{ij}\\) is the movement from place \\(i\\) to place \\(j\\), \\(v_i\\) is the propulsiveness factor from the origin(\\(i\\)) place,\\(w_j\\) is the attractiveness factor from the destination (\\(j\\)), and \\(d_{ij}\\) is the distance between the two places. \\(k\\) is a constant model parameter, while \\(\\lambda\\), \\(\\alpha\\), and \\(\\beta\\) are parameters that measures the effect of their respective variables.\nThere are other types of spatial interaction models, such as the potential model and retail model, which have different assumptions and formulations. These models can be used to explain different kinds of movements, such as migration, tourism, or disease spread.\nReferences: Kam Tin Seong and Spatial interaction models with R\n\n\n\n\n\n\n\n\nThe spatial interaction models being used in this task are the variants of Gravity Model including Unconstrained, Origin Constrained, Destination Constrained, and Doubly Constraint. The models’ performance will be compared to see which one is more appropriate to use in the modelling.\n\n\n\n\n\n\nWhat is Unconstrained Gravity Model?\n\n\n\n\n\nThe Unconstrained Gravity Model is a simple form of the gravity model where the principle of conservation is ignored. This means that the interaction between two locations is not limited by the total number of interactions at the origin or destination. In this model, the interaction between two locations is a constant scaling factor, independent of all origins and destinations.\n\n\n\n\n\n\n\n\n\nWhat is Origin Constrained Gravity Model?\n\n\n\n\n\nThe Origin/Production Constrained Gravity Model, also known as the production constrained model, includes origin-specific balancing factors that act as constraints. These constraints ensure that the estimated rows of the flow data matrix sum to the observed row totals. In other words, the total number of interactions originating from a location is fixed, and the model distributes these interactions across various destinations.\n\n\n\n\n\n\n\n\n\nWhat is Destination Constrained Gravity Model?\n\n\n\n\n\nThe Destination/Attraction Constrained Gravity Model, also known as the attraction constrained model, includes destination-specific balancing factors that act as constraints. These constraints ensure that the estimated columns of the flow data matrix sum to the observed column totals. This means that the total number of interactions attracted to a location is fixed, and the model distributes these interactions across various origins.\n\n\n\n\n\n\n\n\n\nWhat is Doubly Constrained Gravity Model?\n\n\n\n\n\nThe Doubly Constrained Gravity Model includes both origin and destination-specific balancing factors that act as constraints. These constraints ensure that the estimated rows and columns of the flow data matrix sum to the observed row and column totals. In other words, both the total number of interactions originating from a location and attracted to a location are fixed.\n\n\n\nTo dive deeper on these models, explanation can be found on research by Haynes & Fotheringham, 1985 and class materials by Prof Kam Tin Seong\n\n\nthe content of the following panel explained what aspatial and geospatial data are used in this project.\n\nAspatialGeospatial\n\n\nMonthly Passenger Volume by Origin Destination Bus Stops:\n\nOctober 2023 Period\ndownloaded from LTA DataMall - Dynamic Dataset via API\ncsv format.\nColumns/Fields in the dataset includes YEAR_MONTH, DAY_TYPE, TIME_PER_HOUR, PT_TYPE, ORIGIN_PT_CODE, DESTINATION_PT_CODE, and TOTAL_TRIPS.\n\n\n\n\n\n\n\nmetadata\n\n\n\n\n\n\nYEAR_MONTH: Represent year and Month in which the data is collected. Since it is a monthly data frame, only one unique value exist in each data frame.\nDAY_TYPE: Represent type of the day which classified as weekdays or weekends/holidays.\nTIME_PER_HOUR: Hour which the passenger trip is based on, in intervals from 0 to 23 hours.\nPT_TYPE: Type of public transport, Since it is bus data sets, only one unique value exist in each data frame (i.e. bus)\nORIGIN_PT_CODE: ID of origin bus stop\nDESTINATION_PT_CODE: ID of destination bus stop\nTOTAL_TRIPS: Number of trips which represent passenger volumes\n\n\n\n\n\n\n\n\n\n\nTutorial on Fetching the Data\n\n\n\n\n\n\nClick this link, and click the Request for API Access \nFill in the required form \nCheck email for confirmation. The API Account Key will be required for later step. \nThe user guide from LTA here will explains how to make API calls. The user guide also provide the link required for various kind of dataset, keep the link for future use. \nThe following step assume usage of desktop apps version of Postman to make the API call. Firstly, go to Postman and click on the logo of the OS system that you are using. \nThe following step is for Windows User, adjust accordingly if you use other OS. Click on the dowload button, install the apps, and launch it. \nIn the apps, copy-paste the url from step 4, and make sure that the option is set to GET. In this case where the data is monthly, you need to add a parameter of the month data that you want to download in the format of YYYYMM (202308 shown in the example). The parameter is under Params section. \nNext, go to Headers section and add AccountKey which value can be obtained from step 3. Click the blue Send button. \nClick the link that will come out on the bottom of the apps, it will be opened in a new tab. \nIn this last step, click Send and Download in the new tab. You can choose where to put the data and the download will start. \n\n\n\n\n\n\nTwo geospatial data in shp format are used in this project, as shown in the following panel:\n\nBus Stop LocationHexagon\n\n\n\nprovides information about all the bus stops currently being serviced by buses, including the bus stop code (identifier) and location coordinates.\ndownloaded from LTA DataMall - Static Dataset\nColumns/Fields in the dataset includes BUS_STOP_N, BUS_ROOF_N, LOC_DESC, and geometry.\n\n\n\n\n\n\n\nmetadata\n\n\n\n\n\n\nBUS_STOP_N: The unique identifier for each bus stop.\nBUS_ROOF_N: The identifier for the bus route or roof associated with the bus stop.\nLOC_DESC: Location description providing additional information about the bus stop’s surroundings.\ngeometry: The spatial information representing the location of each bus stop as a point in the SVY21 projected coordinate reference system.\n\n\n\n\n\n\nA hexagon layer of 375m (perpendicular distance between the centre of the hexagon and its edges.) Each spatial unit is regular in shape and finer than the Master Plan 2019 Planning Sub-zone GIS data set of URA.\n\n\n\n\n\n\nwhy hexagon?\n\n\n\n\n\n\nUniform Distances Everywhere: Think of hexagons as honeycomb cells. Each cell (hexagon) touches its neighbors at the same distance from its center. It’s like standing in the middle of a room and being the same distance from every wall, making it easier to measure and compare things.\nOutlier-Free Shape: Hexagons are like well-rounded polygons without any pointy tips. Sharp corners can create odd spots in data, but hexagons smoothly cover space without sticking out anywhere. This helps prevent weird data spikes that don’t fit the pattern.\nConsistent Spatial Relationships: Imagine a beehive where every hexagon is surrounded by others in the same pattern. This regular pattern is great for analyzing data because you can expect the same relationships everywhere, making the data predictable and easier to work with.\nIdeal for Non-Perpendicular Features: Real-world features like rivers and roads twist and turn. Squares can be awkward for mapping these, but hexagons, which are more circular, can follow their flow better. This way, a hexagon-based map can mimic the real world more closely than a checkerboard of squares.\n\nSummarized from: Dhuri, and Sekste & Kazakov.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2 References\nCengel. Introduction to spatial data in R\nCoşkun, et al. (2020). Performance Matters on Identification of Origin-Destination Matrix on Geospatial Big Data\nDaniels & Mulley. Explaining walking distance to public transport: The dominance of public transport supply\nHaynes & Fotheringham (1985). Gravity and Spatial Interaction Models\nKam Tin Seong. 16 Calbirating Spatial Interaction Models with R\nMiller (2021). TRAFFIC ANALYSIS ZONE DEFINITION: ISSUES & GUIDANCE\nR. Spatial interaction models with R\nSekste and Kazakov. “H3 hexagonal grid: Why we use it for data analysis and visualization”.\nSid Dhuri (2020). “Spatial Data Analysis With Hexagonal Grids”\nTao Ran (2021). Big Spatial Flow Data Analytics. In: Werner, M., Chiang, YY. (eds) Handbook of Big Geospatial Data\nLand Transport Authority. Land Transport Data Mall"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Applied Geospatial Analytics (ISSS624)",
    "section": "",
    "text": "Exploring Geospatial Analytics Illustration\n\n\nHello there! I’m Muhamad Ameer Noor, and this is my space dedicated to the exciting world of geospatial analytics. Join me on this journey as I delve into the fascinating realm of spatial data analysis and its applications.\n\n\nOn this webpage, I’ll be sharing insights, discoveries, and projects related to geospatial analytics that I learned from ISSS624 - Applied Geospatial Analytics Course under Prof Kam Tin Seong during my MITB Programme at Singapore Management University. Whether you’re a fellow enthusiast, a student, or just curious about the power of location-based data, you’re in the right place!\n\n\n\nI’ll document my experiences and challenges as I navigate through ISSS624 Geospatial Analytics. Expect a mix of tutorials and case studies that showcase the practical applications of geospatial analytics.\n\n\n\nCurious about how this webpage was built? Check out the Quarto websites documentation\nThanks for stopping by, and let’s explore the world through geospatial analytics!"
  },
  {
    "objectID": "index.html#what-to-expect",
    "href": "index.html#what-to-expect",
    "title": "Applied Geospatial Analytics (ISSS624)",
    "section": "",
    "text": "On this webpage, I’ll be sharing insights, discoveries, and projects related to geospatial analytics that I learned from ISSS624 - Applied Geospatial Analytics Course under Prof Kam Tin Seong during my MITB Programme at Singapore Management University. Whether you’re a fellow enthusiast, a student, or just curious about the power of location-based data, you’re in the right place!"
  },
  {
    "objectID": "index.html#learning-journey",
    "href": "index.html#learning-journey",
    "title": "Applied Geospatial Analytics (ISSS624)",
    "section": "",
    "text": "I’ll document my experiences and challenges as I navigate through ISSS624 Geospatial Analytics. Expect a mix of tutorials and case studies that showcase the practical applications of geospatial analytics."
  },
  {
    "objectID": "index.html#dive-deeper",
    "href": "index.html#dive-deeper",
    "title": "Applied Geospatial Analytics (ISSS624)",
    "section": "",
    "text": "Curious about how this webpage was built? Check out the Quarto websites documentation\nThanks for stopping by, and let’s explore the world through geospatial analytics!"
  },
  {
    "objectID": "in-class/ice3.html",
    "href": "in-class/ice3.html",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "",
    "text": "Illustration"
  },
  {
    "objectID": "in-class/ice3.html#distance-matrix-computation",
    "href": "in-class/ice3.html#distance-matrix-computation",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "3.1 Distance Matrix Computation",
    "text": "3.1 Distance Matrix Computation\nNotice that the previous imported data is a sf tibble dataframe object class. Computing distance can take longer with the sf based data. To make it faster, use Spatial Polygons Dataframe. Conver the data using as.Spatial().\n\n\nCode\nmpsz_sp &lt;- as(mpsz, \"Spatial\")\nmpsz_sp\n\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 332 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 6\nnames       : SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C \nmin values  : ADMIRALTY,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR \nmax values  :    YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR \n\n\nNext, spDists() of sp package will be used to compute the Euclidean distance between the centroids of the planning subzones.\n\nDo you know why the distance is calculated between two centroids of a pair of spatial polygons? The distance between two centroids of spatial polygons is commonly calculated as a measure of proximity or spatial relationship between the polygons. This approach simplifies spatial analysis by representing each polygon as a single point (centroid), providing a straightforward measure of the overall spatial separation or closeness between the features.\n\n\n\nCode\n# generate generic R Matrix object\ndist &lt;- spDists(mpsz_sp, \n                longlat = FALSE)\n# show the output\nhead(dist, n=c(10, 10))\n\n\n           [,1]       [,2]      [,3]      [,4]       [,5]      [,6]      [,7]\n [1,]     0.000  3926.0025  3939.108 20252.964  2989.9839  1431.330 19211.836\n [2,]  3926.003     0.0000   305.737 16513.865   951.8314  5254.066 16242.523\n [3,]  3939.108   305.7370     0.000 16412.062  1045.9088  5299.849 16026.146\n [4,] 20252.964 16513.8648 16412.062     0.000 17450.3044 21665.795  7229.017\n [5,]  2989.984   951.8314  1045.909 17450.304     0.0000  4303.232 17020.916\n [6,]  1431.330  5254.0664  5299.849 21665.795  4303.2323     0.000 20617.082\n [7,] 19211.836 16242.5230 16026.146  7229.017 17020.9161 20617.082     0.000\n [8,] 14960.942 12749.4101 12477.871 11284.279 13336.0421 16281.453  5606.082\n [9,]  7515.256  7934.8082  7649.776 18427.503  7801.6163  8403.896 14810.930\n[10,]  6391.342  4975.0021  4669.295 15469.566  5226.8731  7707.091 13111.391\n           [,8]      [,9]     [,10]\n [1,] 14960.942  7515.256  6391.342\n [2,] 12749.410  7934.808  4975.002\n [3,] 12477.871  7649.776  4669.295\n [4,] 11284.279 18427.503 15469.566\n [5,] 13336.042  7801.616  5226.873\n [6,] 16281.453  8403.896  7707.091\n [7,]  5606.082 14810.930 13111.391\n [8,]     0.000  9472.024  8575.490\n [9,]  9472.024     0.000  3780.800\n[10,]  8575.490  3780.800     0.000\n\n\nOutput of dist is a matrix object class of R that does not have any column headers and row headers are not labeled with the planning subzone codes. Therefore the next step is to label it."
  },
  {
    "objectID": "in-class/ice3.html#labelling-column-and-row-heanders-of-a-distance-matrix",
    "href": "in-class/ice3.html#labelling-column-and-row-heanders-of-a-distance-matrix",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "3.2 Labelling column and row heanders of a distance matrix",
    "text": "3.2 Labelling column and row heanders of a distance matrix\nCreate list of the headers\n\n\nCode\nsz_names &lt;- mpsz$SUBZONE_C\n\n# check the output\nsz_names\n\n\n  [1] \"MESZ01\" \"RVSZ05\" \"SRSZ01\" \"WISZ01\" \"MUSZ02\" \"MPSZ05\" \"WISZ03\" \"WISZ02\"\n  [9] \"SISZ02\" \"SISZ01\" \"BMSZ17\" \"DTSZ10\" \"SVSZ01\" \"BMSZ01\" \"BMSZ15\" \"DTSZ09\"\n [17] \"BMSZ16\" \"BMSZ14\" \"DTSZ07\" \"DTSZ08\" \"BMSZ11\" \"BMSZ13\" \"QTSZ14\" \"DTSZ11\"\n [25] \"BMSZ05\" \"BMSZ12\" \"BMSZ02\" \"OTSZ03\" \"DTSZ04\" \"DTSZ05\" \"OTSZ04\" \"BMSZ10\"\n [33] \"DTSZ12\" \"BMSZ04\" \"DTSZ06\" \"MSSZ01\" \"OTSZ01\" \"SRSZ03\" \"BMSZ08\" \"BMSZ03\"\n [41] \"BMSZ07\" \"BMSZ09\" \"SRSZ02\" \"QTSZ13\" \"QTSZ07\" \"QTSZ12\" \"BMSZ06\" \"QTSZ04\"\n [49] \"RCSZ06\" \"RCSZ03\" \"QTSZ08\" \"KLSZ05\" \"QTSZ03\" \"QTSZ10\" \"TNSZ03\" \"NTSZ04\"\n [57] \"CLSZ08\" \"NTSZ05\" \"BDSZ07\" \"CLSZ07\" \"PNSZ05\" \"JESZ11\" \"NTSZ01\" \"KLSZ04\"\n [65] \"MPSZ02\" \"ORSZ02\" \"NTSZ06\" \"RCSZ02\" \"PNSZ04\" \"DTSZ03\" \"MUSZ03\" \"RVSZ04\"\n [73] \"DTSZ02\" \"QTSZ06\" \"RVSZ03\" \"QTSZ15\" \"MUSZ01\" \"DTSZ01\" \"RCSZ10\" \"RVSZ02\"\n [81] \"MPSZ04\" \"QTSZ11\" \"RVSZ01\" \"ORSZ03\" \"RCSZ09\" \"TNSZ02\" \"RCSZ05\" \"RCSZ08\"\n [89] \"RCSZ07\" \"RCSZ04\" \"DTSZ13\" \"QTSZ05\" \"ORSZ01\" \"MPSZ03\" \"PNSZ01\" \"GLSZ01\"\n [97] \"JESZ07\" \"BLSZ01\" \"BTSZ06\" \"BDSZ03\" \"NVSZ04\" \"CLSZ02\" \"GLSZ02\" \"TPSZ07\"\n[105] \"BDSZ04\" \"TPSZ02\" \"JESZ06\" \"BTSZ03\" \"GLSZ03\" \"TPSZ11\" \"TPSZ09\" \"TSSZ03\"\n[113] \"TPSZ06\" \"TPSZ04\" \"JWSZ06\" \"JWSZ07\" \"RCSZ01\" \"NTSZ03\" \"JESZ10\" \"BLSZ03\"\n[121] \"BLSZ04\" \"QTSZ01\" \"KLSZ06\" \"NTSZ02\" \"CLSZ09\" \"QTSZ09\" \"CLSZ06\" \"KLSZ07\"\n[129] \"KLSZ03\" \"KLSZ08\" \"BTSZ04\" \"BTSZ08\" \"TNSZ01\" \"CLSZ05\" \"BDSZ08\" \"PNSZ03\"\n[137] \"PNSZ02\" \"TNSZ04\" \"NVSZ02\" \"BLSZ02\" \"BDSZ05\" \"CLSZ04\" \"BTSZ07\" \"GLSZ05\"\n[145] \"JESZ09\" \"JESZ08\" \"KLSZ02\" \"CLSZ03\" \"NVSZ03\" \"BDSZ06\" \"KLSZ01\" \"NVSZ01\"\n[153] \"TSSZ02\" \"SGSZ06\" \"BSSZ03\" \"TMSZ03\" \"BKSZ03\" \"HGSZ09\" \"CBSZ01\" \"PLSZ02\"\n[161] \"BKSZ02\" \"HGSZ06\" \"AMSZ03\" \"SGSZ04\" \"HGSZ01\" \"PRSZ07\" \"BPSZ06\" \"PRSZ05\"\n[169] \"TMSZ01\" \"AMSZ02\" \"AMSZ01\" \"AMSZ06\" \"SGSZ02\" \"THSZ02\" \"SGSZ03\" \"BKSZ04\"\n[177] \"JWSZ01\" \"BPSZ07\" \"TMSZ02\" \"HGSZ07\" \"PRSZ08\" \"BKSZ05\" \"CLSZ01\" \"NVSZ05\"\n[185] \"BTSZ05\" \"TPSZ12\" \"JWSZ05\" \"TPSZ05\" \"JESZ03\" \"TPSZ03\" \"TPSZ10\" \"TPSZ08\"\n[193] \"JWSZ04\" \"JESZ04\" \"TPSZ01\" \"BDSZ01\" \"JESZ02\" \"BKSZ09\" \"JWSZ09\" \"BDSZ02\"\n[201] \"BTSZ01\" \"BTSZ02\" \"TMSZ05\" \"TMSZ04\" \"JWSZ02\" \"BKSZ08\" \"BKSZ06\" \"BKSZ07\"\n[209] \"SGSZ07\" \"HGSZ08\" \"TSSZ01\" \"JESZ01\" \"JWSZ08\" \"SGSZ05\" \"JWSZ03\" \"SLSZ04\"\n[217] \"SKSZ04\" \"SLSZ01\" \"YSSZ08\" \"MDSZ01\" \"PGSZ07\" \"YSSZ04\" \"YSSZ05\" \"PGSZ01\"\n[225] \"MDSZ03\" \"YSSZ01\" \"PRSZ03\" \"BKSZ01\" \"PLSZ01\" \"HGSZ03\" \"HGSZ10\" \"HGSZ02\"\n[233] \"AMSZ07\" \"BPSZ05\" \"CKSZ02\" \"HGSZ04\" \"PLSZ03\" \"BPSZ04\" \"SESZ01\" \"CKSZ04\"\n[241] \"PRSZ02\" \"AMSZ09\" \"HGSZ05\" \"CKSZ01\" \"CKSZ03\" \"BPSZ03\" \"BPSZ01\" \"BPSZ02\"\n[249] \"SGSZ01\" \"SESZ05\" \"AMSZ12\" \"AMSZ10\" \"PRSZ06\" \"AMSZ08\" \"PRSZ04\" \"CKSZ05\"\n[257] \"SESZ02\" \"AMSZ11\" \"CHSZ01\" \"SESZ03\" \"SESZ04\" \"SESZ07\" \"SESZ06\" \"PGSZ04\"\n[265] \"CKSZ06\" \"PRSZ01\" \"PGSZ03\" \"PGSZ05\" \"SKSZ03\" \"YSSZ06\" \"PGSZ02\" \"PGSZ06\"\n[273] \"CCSZ01\" \"SBSZ06\" \"SBSZ07\" \"SBSZ08\" \"KLSZ09\" \"TSSZ04\" \"TSSZ05\" \"WCSZ03\"\n[281] \"WCSZ02\" \"JESZ05\" \"THSZ03\" \"THSZ04\" \"THSZ01\" \"THSZ06\" \"THSZ05\" \"PLSZ04\"\n[289] \"CHSZ02\" \"QTSZ02\" \"CHSZ03\" \"OTSZ02\" \"MPSZ01\" \"GLSZ04\" \"SLSZ03\" \"SKSZ02\"\n[297] \"WDSZ04\" \"WDSZ05\" \"YSSZ03\" \"WCSZ01\" \"SLSZ02\" \"YSSZ09\" \"WDSZ01\" \"NESZ01\"\n[305] \"SMSZ03\" \"YSSZ02\" \"WDSZ02\" \"WDSZ06\" \"SBSZ02\" \"SKSZ01\" \"SKSZ05\" \"WDSZ03\"\n[313] \"SBSZ03\" \"WDSZ07\" \"SBSZ01\" \"WDSZ08\" \"SMSZ04\" \"SBSZ05\" \"LKSZ01\" \"SMSZ01\"\n[321] \"SBSZ09\" \"SBSZ04\" \"SMSZ02\" \"WDSZ09\" \"PLSZ05\" \"MDSZ02\" \"YSSZ07\" \"BSSZ01\"\n[329] \"AMSZ05\" \"AMSZ04\" \"BSSZ02\" \"TSSZ06\"\n\n\nattach SUBZONE_C to row and column for distance matrix matching ahead\n\n\nCode\ncolnames(dist) &lt;- paste0(sz_names)\nrownames(dist) &lt;- paste0(sz_names)"
  },
  {
    "objectID": "in-class/ice3.html#pivoting-distance-value-by-subzone_c",
    "href": "in-class/ice3.html#pivoting-distance-value-by-subzone_c",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "3.3 Pivoting distance value by SUBZONE_C",
    "text": "3.3 Pivoting distance value by SUBZONE_C\nNext, pivot the distance matrix into a long table by using the row and column subzone codes using this code.\n\n\nCode\ndistPair &lt;- melt(dist) %&gt;%\n  rename(dist = value)\nhead(distPair, 10)\n\n\n     Var1   Var2      dist\n1  MESZ01 MESZ01     0.000\n2  RVSZ05 MESZ01  3926.003\n3  SRSZ01 MESZ01  3939.108\n4  WISZ01 MESZ01 20252.964\n5  MUSZ02 MESZ01  2989.984\n6  MPSZ05 MESZ01  1431.330\n7  WISZ03 MESZ01 19211.836\n8  WISZ02 MESZ01 14960.942\n9  SISZ02 MESZ01  7515.256\n10 SISZ01 MESZ01  6391.342\n\n\n\n\n\n\n\n\nWarning!\n\n\n\ndo not sort the data because the sequence will be broken"
  },
  {
    "objectID": "in-class/ice3.html#updating-intra-zonal-distances",
    "href": "in-class/ice3.html#updating-intra-zonal-distances",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "3.4 Updating intra-zonal distances",
    "text": "3.4 Updating intra-zonal distances\nIn this section, we are going to append a constant value to replace the intra-zonal distance of 0.\nFirst, we will select and find out the minimum value of the distance by using summary().\n\n\nCode\ndistPair %&gt;%\n  filter(dist &gt; 0) %&gt;%\n  summary()\n\n\n      Var1             Var2             dist        \n MESZ01 :   331   MESZ01 :   331   Min.   :  173.8  \n RVSZ05 :   331   RVSZ05 :   331   1st Qu.: 7149.5  \n SRSZ01 :   331   SRSZ01 :   331   Median :11890.0  \n WISZ01 :   331   WISZ01 :   331   Mean   :12229.4  \n MUSZ02 :   331   MUSZ02 :   331   3rd Qu.:16401.7  \n MPSZ05 :   331   MPSZ05 :   331   Max.   :49894.4  \n (Other):107906   (Other):107906                    \n\n\nThe constant distant selected for intra-zones must be below the minimum distance (173.8). 50m is picked as the fix distance to be put into intra-zones distance.\n\n\nCode\ndistPair$dist &lt;- ifelse(distPair$dist == 0,\n                        50, distPair$dist)\n\n# check the output\nsummary(distPair)\n\n\n      Var1             Var2             dist      \n MESZ01 :   332   MESZ01 :   332   Min.   :   50  \n RVSZ05 :   332   RVSZ05 :   332   1st Qu.: 7097  \n SRSZ01 :   332   SRSZ01 :   332   Median :11864  \n WISZ01 :   332   WISZ01 :   332   Mean   :12193  \n MUSZ02 :   332   MUSZ02 :   332   3rd Qu.:16388  \n MPSZ05 :   332   MPSZ05 :   332   Max.   :49894  \n (Other):108232   (Other):108232                  \n\n\nnotice that the minimum value has change (i.e. 0 within-distance has changed to 50)\n\n\n\n\n\n\nalternative method to calculate the within-distance!\n\n\n\n\ncalculate the parameter\ncalculate the distance\n\n\n\nThe code chunk below is used to rename the origin and destination fields.\n\n\nCode\ndistPair &lt;- distPair %&gt;%\n  rename(orig = Var1,\n         dest = Var2)\n\n\nLastly, the code chunk below is used to save the dataframe for future use.\n\n\nCode\nwrite_rds(distPair, \"../data/rds/distPair.rds\")"
  },
  {
    "objectID": "in-class/ice3.html#separating-intra-flow-from-passenger-volume-df",
    "href": "in-class/ice3.html#separating-intra-flow-from-passenger-volume-df",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "4.1 Separating intra-flow from passenger volume df",
    "text": "4.1 Separating intra-flow from passenger volume df\nCode chunk below is used to add three new fields in flow_data dataframe.\n\n\nCode\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0, flow_data$TRIPS)\nflow_data$offset &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0.000001, 1)"
  },
  {
    "objectID": "in-class/ice3.html#combining-passenger-volume-data-with-distance-value",
    "href": "in-class/ice3.html#combining-passenger-volume-data-with-distance-value",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "4.2 Combining passenger volume data with distance value",
    "text": "4.2 Combining passenger volume data with distance value\nBefore we can join flow_data and distPair, we need to convert data value type of ORIGIN_SZ and DESTIN_SZ fields of flow_data dataframe into factor data type.\n\n\nCode\nflow_data$ORIGIN_SZ &lt;- as.factor(flow_data$ORIGIN_SZ)\nflow_data$DESTIN_SZ &lt;- as.factor(flow_data$DESTIN_SZ)\n\n\nNow, left_join() of dplyr will be used to flow_data dataframe and distPair dataframe. The output is called flow_data1.\n\n\nCode\nflow_data1 &lt;- flow_data %&gt;%\n  left_join (distPair,\n             by = c(\"ORIGIN_SZ\" = \"orig\",\n                    \"DESTIN_SZ\" = \"dest\"))\n\n# check the output\nprint(flow_data1)\n\n\n# A tibble: 20,600 × 6\n# Groups:   ORIGIN_SZ [310]\n   ORIGIN_SZ DESTIN_SZ TRIPS FlowNoIntra   offset  dist\n   &lt;fct&gt;     &lt;fct&gt;     &lt;dbl&gt;       &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;\n 1 AMSZ01    AMSZ01     1866           0 0.000001   50 \n 2 AMSZ01    AMSZ02     8726        8726 1         810.\n 3 AMSZ01    AMSZ03    12598       12598 1        1361.\n 4 AMSZ01    AMSZ04     2098        2098 1         840.\n 5 AMSZ01    AMSZ05     7718        7718 1        1077.\n 6 AMSZ01    AMSZ06     1631        1631 1         805.\n 7 AMSZ01    AMSZ07     1308        1308 1        1799.\n 8 AMSZ01    AMSZ08     2261        2261 1        2576.\n 9 AMSZ01    AMSZ09     1526        1526 1        1204.\n10 AMSZ01    AMSZ10      141         141 1        1418.\n# ℹ 20,590 more rows"
  },
  {
    "objectID": "in-class/ice3.html#importing-population-data",
    "href": "in-class/ice3.html#importing-population-data",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "5.1 Importing population data",
    "text": "5.1 Importing population data\n\n\nCode\npop &lt;- read_csv(\"../data/aspatial/pop.csv\")\n\n# check the output\npop\n\n\n# A tibble: 332 × 5\n   PA         SZ                     AGE7_12 AGE13_24 AGE25_64\n   &lt;chr&gt;      &lt;chr&gt;                    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 ANG MO KIO ANG MO KIO TOWN CENTRE     310      710     2780\n 2 ANG MO KIO CHENG SAN                 1140     2770    15700\n 3 ANG MO KIO CHONG BOON                1010     2650    14240\n 4 ANG MO KIO KEBUN BAHRU               1050     2390    12460\n 5 ANG MO KIO SEMBAWANG HILLS            420     1120     3620\n 6 ANG MO KIO SHANGRI-LA                 810     1920     9650\n 7 ANG MO KIO TAGORE                     390     1150     4350\n 8 ANG MO KIO TOWNSVILLE                 980     2000    11320\n 9 ANG MO KIO YIO CHU KANG                 0        0        0\n10 ANG MO KIO YIO CHU KANG EAST          260      650     2500\n# ℹ 322 more rows"
  },
  {
    "objectID": "in-class/ice3.html#geospatial-data-wrangling",
    "href": "in-class/ice3.html#geospatial-data-wrangling",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "5.2 Geospatial data wrangling",
    "text": "5.2 Geospatial data wrangling\n\n\nCode\npop &lt;- pop %&gt;%\n  left_join(mpsz,\n            by = c(\"PA\" = \"PLN_AREA_N\",\n                   \"SZ\" = \"SUBZONE_N\")) %&gt;%\n  select(1:6) %&gt;%\n  rename(SZ_NAME = SZ,\n         SZ = SUBZONE_C)\n\n# check the output\nglimpse(pop)\n\n\nRows: 332\nColumns: 6\n$ PA       &lt;chr&gt; \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG …\n$ SZ_NAME  &lt;chr&gt; \"ANG MO KIO TOWN CENTRE\", \"CHENG SAN\", \"CHONG BOON\", \"KEBUN B…\n$ AGE7_12  &lt;dbl&gt; 310, 1140, 1010, 1050, 420, 810, 390, 980, 0, 260, 0, 1190, 6…\n$ AGE13_24 &lt;dbl&gt; 710, 2770, 2650, 2390, 1120, 1920, 1150, 2000, 0, 650, 0, 326…\n$ AGE25_64 &lt;dbl&gt; 2780, 15700, 14240, 12460, 3620, 9650, 4350, 11320, 0, 2500, …\n$ SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ02\", \"AMSZ03\", \"AMSZ06\", \"AMSZ07\", \"AMSZ05\", \"…\n\n\n\nthis is the useful trick of how to merge two table that has different reference column."
  },
  {
    "objectID": "in-class/ice3.html#preparing-origin-destination-attribute",
    "href": "in-class/ice3.html#preparing-origin-destination-attribute",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "5.3 Preparing origin & destination attribute",
    "text": "5.3 Preparing origin & destination attribute\n\n\nCode\n# Preparing origin attribute\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            by = c(ORIGIN_SZ = \"SZ\")) %&gt;%\n  rename(ORIGIN_AGE7_12 = AGE7_12,\n         ORIGIN_AGE13_24 = AGE13_24,\n         ORIGIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\n# Preparing destination attribute\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            # use a subzone code\n            by = c(DESTIN_SZ = \"SZ\")) %&gt;%\n  rename(DESTIN_AGE7_12 = AGE7_12,\n         DESTIN_AGE13_24 = AGE13_24,\n         DESTIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\n# check the output\nglimpse(flow_data1)\n\n\nRows: 20,600\nColumns: 12\nGroups: ORIGIN_SZ [310]\n$ ORIGIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMS…\n$ DESTIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMS…\n$ TRIPS           &lt;dbl&gt; 1866, 8726, 12598, 2098, 7718, 1631, 1308, 2261, 1526,…\n$ FlowNoIntra     &lt;dbl&gt; 0, 8726, 12598, 2098, 7718, 1631, 1308, 2261, 1526, 14…\n$ offset          &lt;dbl&gt; 1e-06, 1e+00, 1e+00, 1e+00, 1e+00, 1e+00, 1e+00, 1e+00…\n$ dist            &lt;dbl&gt; 50.0000, 810.4491, 1360.9294, 840.4432, 1076.7916, 805…\n$ ORIGIN_AGE7_12  &lt;dbl&gt; 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310,…\n$ ORIGIN_AGE13_24 &lt;dbl&gt; 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710,…\n$ ORIGIN_AGE25_64 &lt;dbl&gt; 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, …\n$ DESTIN_AGE7_12  &lt;dbl&gt; 310, 1140, 1010, 980, 810, 1050, 420, 390, 1190, 0, 0,…\n$ DESTIN_AGE13_24 &lt;dbl&gt; 710, 2770, 2650, 2000, 1920, 2390, 1120, 1150, 3260, 0…\n$ DESTIN_AGE25_64 &lt;dbl&gt; 2780, 15700, 14240, 11320, 9650, 12460, 3620, 4350, 13…\n\n\n\nInstead of doing simple join, this join use origin subzone code and destination subzone code. Having population for both is useful for the transport planning analysis as depending on the case, you might need to look at either the origin or destination population. It also conform with the general factors of geospatial flow analysis which consists of push and pull factors\n\nWe will called the output data file SIM_data. it is in rds data file format.\n\n\nCode\nglimpse(flow_data1)\n\n\nRows: 20,600\nColumns: 12\nGroups: ORIGIN_SZ [310]\n$ ORIGIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMS…\n$ DESTIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMS…\n$ TRIPS           &lt;dbl&gt; 1866, 8726, 12598, 2098, 7718, 1631, 1308, 2261, 1526,…\n$ FlowNoIntra     &lt;dbl&gt; 0, 8726, 12598, 2098, 7718, 1631, 1308, 2261, 1526, 14…\n$ offset          &lt;dbl&gt; 1e-06, 1e+00, 1e+00, 1e+00, 1e+00, 1e+00, 1e+00, 1e+00…\n$ dist            &lt;dbl&gt; 50.0000, 810.4491, 1360.9294, 840.4432, 1076.7916, 805…\n$ ORIGIN_AGE7_12  &lt;dbl&gt; 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310,…\n$ ORIGIN_AGE13_24 &lt;dbl&gt; 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710,…\n$ ORIGIN_AGE25_64 &lt;dbl&gt; 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, …\n$ DESTIN_AGE7_12  &lt;dbl&gt; 310, 1140, 1010, 980, 810, 1050, 420, 390, 1190, 0, 0,…\n$ DESTIN_AGE13_24 &lt;dbl&gt; 710, 2770, 2650, 2000, 1920, 2390, 1120, 1150, 3260, 0…\n$ DESTIN_AGE25_64 &lt;dbl&gt; 2780, 15700, 14240, 11320, 9650, 12460, 3620, 4350, 13…\n\n\n\n\nCode\nwrite_rds(flow_data1, \"../data/rds/SIM_data.rds\")"
  },
  {
    "objectID": "in-class/ice3.html#importing-the-modelling-data",
    "href": "in-class/ice3.html#importing-the-modelling-data",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "6.1 Importing the modelling data",
    "text": "6.1 Importing the modelling data\nFirstly, let us import the modelling data by using the code chunk below.\n\n\nCode\nSIM_data &lt;- read_rds(\"../data/rds/SIM_data.rds\")\n\n# check the output\nglimpse(SIM_data)\n\n\nRows: 20,600\nColumns: 12\nGroups: ORIGIN_SZ [310]\n$ ORIGIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMS…\n$ DESTIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMS…\n$ TRIPS           &lt;dbl&gt; 1866, 8726, 12598, 2098, 7718, 1631, 1308, 2261, 1526,…\n$ FlowNoIntra     &lt;dbl&gt; 0, 8726, 12598, 2098, 7718, 1631, 1308, 2261, 1526, 14…\n$ offset          &lt;dbl&gt; 1e-06, 1e+00, 1e+00, 1e+00, 1e+00, 1e+00, 1e+00, 1e+00…\n$ dist            &lt;dbl&gt; 50.0000, 810.4491, 1360.9294, 840.4432, 1076.7916, 805…\n$ ORIGIN_AGE7_12  &lt;dbl&gt; 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310,…\n$ ORIGIN_AGE13_24 &lt;dbl&gt; 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710,…\n$ ORIGIN_AGE25_64 &lt;dbl&gt; 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, …\n$ DESTIN_AGE7_12  &lt;dbl&gt; 310, 1140, 1010, 980, 810, 1050, 420, 390, 1190, 0, 0,…\n$ DESTIN_AGE13_24 &lt;dbl&gt; 710, 2770, 2650, 2000, 1920, 2390, 1120, 1150, 3260, 0…\n$ DESTIN_AGE25_64 &lt;dbl&gt; 2780, 15700, 14240, 11320, 9650, 12460, 3620, 4350, 13…"
  },
  {
    "objectID": "in-class/ice3.html#visualising-the-dependent-variable",
    "href": "in-class/ice3.html#visualising-the-dependent-variable",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "6.2 Visualising the dependent variable",
    "text": "6.2 Visualising the dependent variable\nFirstly, let us plot the distribution of the dependent variable (i.e. TRIPS) by using histogram method by using the code chunk below.\n\n\nCode\nggplot(data = SIM_data,\n       aes(x = TRIPS)) +\n  geom_histogram()\n\n\n\n\n\nNotice that the distribution is highly skewed and not resemble bell shape or also known as normal distribution.\nNext, let us visualise the relation between the dependent variable and one of the key independent variable in Spatial Interaction Model, namely distance.\n\n\nCode\nggplot(data = SIM_data,\n       aes(x = dist,\n           y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\n\nNotice that their relationship hardly resemble linear relationship.\nOn the other hand, if we plot the scatter plot by using the log transformed version of both variables, we can see that their relationship is more resemble linear relationship.\n\n\nCode\nggplot(data = SIM_data,\n       aes(x = log(dist),\n           y = log(TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm)"
  },
  {
    "objectID": "in-class/ice3.html#checking-for-variables-with-zero-values",
    "href": "in-class/ice3.html#checking-for-variables-with-zero-values",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "6.3 Checking for variables with zero values",
    "text": "6.3 Checking for variables with zero values\nSince Poisson Regression is based of log and log 0 is undefined, it is important for us to ensure that no 0 values in the explanatory variables.\nIn the code chunk below, summary() of Base R is used to compute the summary statistics of all variables in SIM_data data frame.\n\n\nCode\nsummary(SIM_data)\n\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS         FlowNoIntra      \n Length:20600       Length:20600       Min.   :     1   Min.   :     0.0  \n Class :character   Class :character   1st Qu.:    17   1st Qu.:    15.0  \n Mode  :character   Mode  :character   Median :    82   Median :    77.0  \n                                       Mean   :  1035   Mean   :   867.3  \n                                       3rd Qu.:   418   3rd Qu.:   382.0  \n                                       Max.   :294318   Max.   :193431.0  \n     offset              dist       ORIGIN_AGE7_12   ORIGIN_AGE13_24\n Min.   :0.000001   Min.   :   50   Min.   :   0.0   Min.   :    0  \n 1st Qu.:1.000000   1st Qu.: 3351   1st Qu.:  50.0   1st Qu.:  100  \n Median :1.000000   Median : 6112   Median : 510.0   Median : 1140  \n Mean   :0.985874   Mean   : 6953   Mean   : 890.5   Mean   : 1958  \n 3rd Qu.:1.000000   3rd Qu.: 9850   3rd Qu.:1360.0   3rd Qu.: 3010  \n Max.   :1.000000   Max.   :26136   Max.   :6340.0   Max.   :16380  \n ORIGIN_AGE25_64 DESTIN_AGE7_12   DESTIN_AGE13_24 DESTIN_AGE25_64\n Min.   :    0   Min.   :   0.0   Min.   :    0   Min.   :    0  \n 1st Qu.:  730   1st Qu.:  10.0   1st Qu.:   60   1st Qu.:  620  \n Median : 5730   Median : 510.0   Median : 1090   Median : 5640  \n Mean   : 9110   Mean   : 848.1   Mean   : 1879   Mean   : 8755  \n 3rd Qu.:14200   3rd Qu.:1200.0   3rd Qu.: 2920   3rd Qu.:13650  \n Max.   :74610   Max.   :6340.0   Max.   :16380   Max.   :74610  \n\n\nThe print report above reveals that variables ORIGIN_AGE7_12, ORIGIN_AGE13_24, ORIGIN_AGE25_64,DESTIN_AGE7_12, DESTIN_AGE13_24, DESTIN_AGE25_64 consist of 0 values.\nIn view of this, code chunk below will be used to replace zero values to 0.99.\n\n\nCode\nSIM_data$DESTIN_AGE7_12 &lt;- ifelse(\n  SIM_data$DESTIN_AGE7_12 == 0,\n  0.99, SIM_data$DESTIN_AGE7_12)\nSIM_data$DESTIN_AGE13_24 &lt;- ifelse(\n  SIM_data$DESTIN_AGE13_24 == 0,\n  0.99, SIM_data$DESTIN_AGE13_24)\nSIM_data$DESTIN_AGE25_64 &lt;- ifelse(\n  SIM_data$DESTIN_AGE25_64 == 0,\n  0.99, SIM_data$DESTIN_AGE25_64)\nSIM_data$ORIGIN_AGE7_12 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE7_12 == 0,\n  0.99, SIM_data$ORIGIN_AGE7_12)\nSIM_data$ORIGIN_AGE13_24 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE13_24 == 0,\n  0.99, SIM_data$ORIGIN_AGE13_24)\nSIM_data$ORIGIN_AGE25_64 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE25_64 == 0,\n  0.99, SIM_data$ORIGIN_AGE25_64)\n\n# check the summary again\nsummary(SIM_data)\n\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS         FlowNoIntra      \n Length:20600       Length:20600       Min.   :     1   Min.   :     0.0  \n Class :character   Class :character   1st Qu.:    17   1st Qu.:    15.0  \n Mode  :character   Mode  :character   Median :    82   Median :    77.0  \n                                       Mean   :  1035   Mean   :   867.3  \n                                       3rd Qu.:   418   3rd Qu.:   382.0  \n                                       Max.   :294318   Max.   :193431.0  \n     offset              dist       ORIGIN_AGE7_12    ORIGIN_AGE13_24   \n Min.   :0.000001   Min.   :   50   Min.   :   0.99   Min.   :    0.99  \n 1st Qu.:1.000000   1st Qu.: 3351   1st Qu.:  50.00   1st Qu.:  100.00  \n Median :1.000000   Median : 6112   Median : 510.00   Median : 1140.00  \n Mean   :0.985874   Mean   : 6953   Mean   : 890.69   Mean   : 1958.15  \n 3rd Qu.:1.000000   3rd Qu.: 9850   3rd Qu.:1360.00   3rd Qu.: 3010.00  \n Max.   :1.000000   Max.   :26136   Max.   :6340.00   Max.   :16380.00  \n ORIGIN_AGE25_64    DESTIN_AGE7_12    DESTIN_AGE13_24    DESTIN_AGE25_64   \n Min.   :    0.99   Min.   :   0.99   Min.   :    0.99   Min.   :    0.99  \n 1st Qu.:  730.00   1st Qu.:  10.00   1st Qu.:   60.00   1st Qu.:  620.00  \n Median : 5730.00   Median : 510.00   Median : 1090.00   Median : 5640.00  \n Mean   : 9110.56   Mean   : 848.29   Mean   : 1879.27   Mean   : 8755.04  \n 3rd Qu.:14200.00   3rd Qu.:1200.00   3rd Qu.: 2920.00   3rd Qu.:13650.00  \n Max.   :74610.00   Max.   :6340.00   Max.   :16380.00   Max.   :74610.00  \n\n\nNotice that all the 0 values have been replaced by 0.99."
  },
  {
    "objectID": "in-class/ice3.html#unconstrained-spatial-interaction-model",
    "href": "in-class/ice3.html#unconstrained-spatial-interaction-model",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "6.4 Unconstrained Spatial Interaction Model",
    "text": "6.4 Unconstrained Spatial Interaction Model\nIn this section, you will learn how to calibrate an unconstrained spatial interaction model by using glm() of Base Stats. The explanatory variables are origin population by different age cohort, destination population by different age cohort (i.e. ORIGIN_AGE25_64) and distance between origin and destination in km (i.e. dist).\nThe code chunk used to calibrate to model is shown below:\n\n\nCode\nuncSIM &lt;- glm(formula = TRIPS ~ \n                log(ORIGIN_AGE25_64) + \n                log(DESTIN_AGE25_64) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nuncSIM\n\n\n\nCall:  glm(formula = TRIPS ~ log(ORIGIN_AGE25_64) + log(DESTIN_AGE25_64) + \n    log(dist), family = poisson(link = \"log\"), data = SIM_data, \n    na.action = na.exclude)\n\nCoefficients:\n         (Intercept)  log(ORIGIN_AGE25_64)  log(DESTIN_AGE25_64)  \n            10.22462               0.27766               0.02414  \n           log(dist)  \n            -0.71477  \n\nDegrees of Freedom: 20599 Total (i.e. Null);  20596 Residual\nNull Deviance:      88920000 \nResidual Deviance: 53020000     AIC: 53150000"
  },
  {
    "objectID": "in-class/ice3.html#r-squared-function",
    "href": "in-class/ice3.html#r-squared-function",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "6.5 R-squared function",
    "text": "6.5 R-squared function\nThe model by default doesn’t calculate the R-Squared. In order to measure how much variation of the trips can be accounted by the model we will write a function to calculate R-Squared value as shown below.\n\n\nCode\nCalcRSquared &lt;- function(observed,estimated){\n  r &lt;- cor(observed,estimated)\n  R2 &lt;- r^2\n  R2\n}\n\n\nNext, we will compute the R-squared of the unconstrained SIM by using the code chunk below.\n\n\nCode\nCalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)\n\n\n[1] 0.1971359\n\n\n\n\nCode\nr2_mcfadden(uncSIM)\n\n\n# R2 for Generalized Linear Regression\n       R2: 0.403\n  adj. R2: 0.403"
  },
  {
    "objectID": "in-class/ice3.html#origin-production-constrained-sim",
    "href": "in-class/ice3.html#origin-production-constrained-sim",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "6.6 Origin (Production) constrained SIM",
    "text": "6.6 Origin (Production) constrained SIM\nIn this section, we will fit an origin constrained SIM by using the code chunk below.\n\n\nCode\norcSIM &lt;- glm(formula = TRIPS ~ \n                 ORIGIN_SZ +\n                 log(DESTIN_AGE25_64) +\n                 log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(orcSIM)\n\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(DESTIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)          12.2571670  0.0033922  3613.307  &lt; 2e-16 ***\nORIGIN_SZAMSZ02       1.1210561  0.0039607   283.047  &lt; 2e-16 ***\nORIGIN_SZAMSZ03       0.6787623  0.0040295   168.446  &lt; 2e-16 ***\nORIGIN_SZAMSZ04       0.0640112  0.0045245    14.148  &lt; 2e-16 ***\nORIGIN_SZAMSZ05      -0.1272160  0.0051622   -24.644  &lt; 2e-16 ***\nORIGIN_SZAMSZ06       0.4644308  0.0046413   100.064  &lt; 2e-16 ***\nORIGIN_SZAMSZ07      -1.1499482  0.0078866  -145.811  &lt; 2e-16 ***\nORIGIN_SZAMSZ08      -0.8527902  0.0074801  -114.009  &lt; 2e-16 ***\nORIGIN_SZAMSZ09       0.2402445  0.0048966    49.064  &lt; 2e-16 ***\nORIGIN_SZAMSZ10       0.2245677  0.0045594    49.254  &lt; 2e-16 ***\nORIGIN_SZAMSZ11      -1.4591935  0.0098202  -148.591  &lt; 2e-16 ***\nORIGIN_SZAMSZ12      -1.4671448  0.0095323  -153.913  &lt; 2e-16 ***\nORIGIN_SZBDSZ01       1.1104210  0.0038840   285.900  &lt; 2e-16 ***\nORIGIN_SZBDSZ02       0.5792171  0.0044816   129.243  &lt; 2e-16 ***\nORIGIN_SZBDSZ03       1.0612529  0.0040365   262.914  &lt; 2e-16 ***\nORIGIN_SZBDSZ04       1.8040460  0.0034994   515.526  &lt; 2e-16 ***\nORIGIN_SZBDSZ05       0.8009106  0.0039583   202.337  &lt; 2e-16 ***\nORIGIN_SZBDSZ06       0.9817600  0.0040389   243.079  &lt; 2e-16 ***\nORIGIN_SZBDSZ07      -0.7463038  0.0068015  -109.726  &lt; 2e-16 ***\nORIGIN_SZBDSZ08      -0.6167593  0.0064771   -95.221  &lt; 2e-16 ***\nORIGIN_SZBKSZ01      -0.1951521  0.0055333   -35.269  &lt; 2e-16 ***\nORIGIN_SZBKSZ02       0.5446942  0.0044863   121.413  &lt; 2e-16 ***\nORIGIN_SZBKSZ03       0.8671406  0.0042070   206.117  &lt; 2e-16 ***\nORIGIN_SZBKSZ04       0.0295337  0.0051862     5.695 1.24e-08 ***\nORIGIN_SZBKSZ05       0.0431060  0.0049217     8.758  &lt; 2e-16 ***\nORIGIN_SZBKSZ06       0.1659062  0.0051313    32.332  &lt; 2e-16 ***\nORIGIN_SZBKSZ07       0.8339944  0.0039470   211.299  &lt; 2e-16 ***\nORIGIN_SZBKSZ08       0.1715636  0.0045798    37.461  &lt; 2e-16 ***\nORIGIN_SZBKSZ09       0.1323428  0.0048566    27.250  &lt; 2e-16 ***\nORIGIN_SZBLSZ01      -1.1811625  0.0105831  -111.608  &lt; 2e-16 ***\nORIGIN_SZBLSZ02      -1.9022840  0.0157452  -120.817  &lt; 2e-16 ***\nORIGIN_SZBLSZ03      -3.1788948  0.0356395   -89.196  &lt; 2e-16 ***\nORIGIN_SZBLSZ04      -1.9384600  0.0190190  -101.922  &lt; 2e-16 ***\nORIGIN_SZBMSZ01       0.0422896  0.0044140     9.581  &lt; 2e-16 ***\nORIGIN_SZBMSZ02      -1.1557595  0.0061560  -187.744  &lt; 2e-16 ***\nORIGIN_SZBMSZ03      -0.4645742  0.0050812   -91.430  &lt; 2e-16 ***\nORIGIN_SZBMSZ04      -0.0188804  0.0044368    -4.255 2.09e-05 ***\nORIGIN_SZBMSZ05      -1.2948812  0.0067113  -192.940  &lt; 2e-16 ***\nORIGIN_SZBMSZ06      -1.8317797  0.0106920  -171.323  &lt; 2e-16 ***\nORIGIN_SZBMSZ07      -0.3965908  0.0048890   -81.120  &lt; 2e-16 ***\nORIGIN_SZBMSZ08      -0.4426615  0.0048873   -90.574  &lt; 2e-16 ***\nORIGIN_SZBMSZ09      -1.1521247  0.0064125  -179.667  &lt; 2e-16 ***\nORIGIN_SZBMSZ10      -1.3498831  0.0071277  -189.386  &lt; 2e-16 ***\nORIGIN_SZBMSZ11      -0.7587856  0.0056716  -133.787  &lt; 2e-16 ***\nORIGIN_SZBMSZ12      -1.0124247  0.0075870  -133.441  &lt; 2e-16 ***\nORIGIN_SZBMSZ13      -0.0326607  0.0048100    -6.790 1.12e-11 ***\nORIGIN_SZBMSZ14      -0.5068776  0.0056569   -89.603  &lt; 2e-16 ***\nORIGIN_SZBMSZ15      -0.2701344  0.0051561   -52.391  &lt; 2e-16 ***\nORIGIN_SZBMSZ16      -1.3017559  0.0066844  -194.747  &lt; 2e-16 ***\nORIGIN_SZBMSZ17      -1.7000441  0.0099996  -170.011  &lt; 2e-16 ***\nORIGIN_SZBPSZ01       0.2669088  0.0048127    55.460  &lt; 2e-16 ***\nORIGIN_SZBPSZ02       0.3025537  0.0052798    57.304  &lt; 2e-16 ***\nORIGIN_SZBPSZ03       0.5456762  0.0049082   111.177  &lt; 2e-16 ***\nORIGIN_SZBPSZ04       0.6200281  0.0043234   143.411  &lt; 2e-16 ***\nORIGIN_SZBPSZ05       0.7092747  0.0040010   177.275  &lt; 2e-16 ***\nORIGIN_SZBPSZ06      -1.0266164  0.0074091  -138.561  &lt; 2e-16 ***\nORIGIN_SZBPSZ07      -0.7883886  0.0071684  -109.981  &lt; 2e-16 ***\nORIGIN_SZBSSZ01       0.0206846  0.0046777     4.422 9.78e-06 ***\nORIGIN_SZBSSZ02       0.2422614  0.0043750    55.374  &lt; 2e-16 ***\nORIGIN_SZBSSZ03       0.2541403  0.0042319    60.053  &lt; 2e-16 ***\nORIGIN_SZBTSZ01       0.0435329  0.0046547     9.353  &lt; 2e-16 ***\nORIGIN_SZBTSZ02      -1.0024988  0.0067690  -148.101  &lt; 2e-16 ***\nORIGIN_SZBTSZ03      -0.2062217  0.0050780   -40.611  &lt; 2e-16 ***\nORIGIN_SZBTSZ04      -0.9025837  0.0087625  -103.006  &lt; 2e-16 ***\nORIGIN_SZBTSZ05      -1.6253102  0.0096448  -168.516  &lt; 2e-16 ***\nORIGIN_SZBTSZ06      -0.8481418  0.0065977  -128.551  &lt; 2e-16 ***\nORIGIN_SZBTSZ07      -2.0293639  0.0104315  -194.541  &lt; 2e-16 ***\nORIGIN_SZBTSZ08      -1.2640980  0.0079299  -159.409  &lt; 2e-16 ***\nORIGIN_SZCBSZ01      -1.6755337  0.0461410   -36.313  &lt; 2e-16 ***\nORIGIN_SZCCSZ01      -1.6769586  0.0118018  -142.093  &lt; 2e-16 ***\nORIGIN_SZCHSZ01      -1.0913429  0.0099165  -110.053  &lt; 2e-16 ***\nORIGIN_SZCHSZ02      -0.4515900  0.0068723   -65.712  &lt; 2e-16 ***\nORIGIN_SZCHSZ03       0.4941486  0.0051649    95.675  &lt; 2e-16 ***\nORIGIN_SZCKSZ01       0.4641763  0.0043433   106.873  &lt; 2e-16 ***\nORIGIN_SZCKSZ02       0.9709837  0.0043841   221.477  &lt; 2e-16 ***\nORIGIN_SZCKSZ03       0.9650023  0.0039913   241.778  &lt; 2e-16 ***\nORIGIN_SZCKSZ04       1.3772720  0.0041024   335.723  &lt; 2e-16 ***\nORIGIN_SZCKSZ05       1.1398267  0.0046545   244.887  &lt; 2e-16 ***\nORIGIN_SZCKSZ06       1.1809132  0.0047393   249.174  &lt; 2e-16 ***\nORIGIN_SZCLSZ01      -0.2624247  0.0060463   -43.403  &lt; 2e-16 ***\nORIGIN_SZCLSZ02      -1.5835307  0.0111998  -141.389  &lt; 2e-16 ***\nORIGIN_SZCLSZ03      -0.6652855  0.0063921  -104.080  &lt; 2e-16 ***\nORIGIN_SZCLSZ04       0.7305042  0.0039999   182.631  &lt; 2e-16 ***\nORIGIN_SZCLSZ05      -1.7396773  0.0113460  -153.329  &lt; 2e-16 ***\nORIGIN_SZCLSZ06       0.9151137  0.0037622   243.242  &lt; 2e-16 ***\nORIGIN_SZCLSZ07      -0.1290281  0.0047741   -27.027  &lt; 2e-16 ***\nORIGIN_SZCLSZ08       0.2829244  0.0053130    53.252  &lt; 2e-16 ***\nORIGIN_SZCLSZ09      -1.7012515  0.0141617  -120.131  &lt; 2e-16 ***\nORIGIN_SZDTSZ01      -1.8152505  0.0079113  -229.451  &lt; 2e-16 ***\nORIGIN_SZDTSZ02      -1.7155257  0.0074197  -231.212  &lt; 2e-16 ***\nORIGIN_SZDTSZ03      -2.7298066  0.0134982  -202.235  &lt; 2e-16 ***\nORIGIN_SZDTSZ04      -4.8769923  0.1768059   -27.584  &lt; 2e-16 ***\nORIGIN_SZDTSZ05      -3.1780851  0.0248945  -127.662  &lt; 2e-16 ***\nORIGIN_SZDTSZ06      -2.9788812  0.0184579  -161.388  &lt; 2e-16 ***\nORIGIN_SZDTSZ07      -2.0587285  0.0234708   -87.715  &lt; 2e-16 ***\nORIGIN_SZDTSZ08      -2.6019045  0.0120040  -216.753  &lt; 2e-16 ***\nORIGIN_SZDTSZ09      -3.1135675  0.0238668  -130.456  &lt; 2e-16 ***\nORIGIN_SZDTSZ10      -2.4195997  0.0126801  -190.819  &lt; 2e-16 ***\nORIGIN_SZDTSZ11      -2.4191860  0.0124179  -194.815  &lt; 2e-16 ***\nORIGIN_SZDTSZ12      -3.4776345  0.0258344  -134.613  &lt; 2e-16 ***\nORIGIN_SZDTSZ13      -2.4433938  0.0138218  -176.779  &lt; 2e-16 ***\nORIGIN_SZGLSZ01      -1.3115168  0.0077080  -170.150  &lt; 2e-16 ***\nORIGIN_SZGLSZ02       0.2729653  0.0043544    62.687  &lt; 2e-16 ***\nORIGIN_SZGLSZ03       0.2478109  0.0043346    57.171  &lt; 2e-16 ***\nORIGIN_SZGLSZ04       1.0057872  0.0036747   273.708  &lt; 2e-16 ***\nORIGIN_SZGLSZ05       0.7071623  0.0038731   182.582  &lt; 2e-16 ***\nORIGIN_SZHGSZ01       0.3007625  0.0042706    70.427  &lt; 2e-16 ***\nORIGIN_SZHGSZ02       0.6580609  0.0041215   159.667  &lt; 2e-16 ***\nORIGIN_SZHGSZ03       0.3815122  0.0044541    85.655  &lt; 2e-16 ***\nORIGIN_SZHGSZ04       1.0310727  0.0038238   269.645  &lt; 2e-16 ***\nORIGIN_SZHGSZ05       1.3472438  0.0037637   357.953  &lt; 2e-16 ***\nORIGIN_SZHGSZ06      -0.0009918  0.0047715    -0.208    0.835    \nORIGIN_SZHGSZ07       0.6781934  0.0040469   167.584  &lt; 2e-16 ***\nORIGIN_SZHGSZ08       0.2693682  0.0046362    58.101  &lt; 2e-16 ***\nORIGIN_SZHGSZ09      -0.3544696  0.0059698   -59.377  &lt; 2e-16 ***\nORIGIN_SZHGSZ10      -3.5662703  0.0406525   -87.726  &lt; 2e-16 ***\nORIGIN_SZJESZ01       0.4528664  0.0044004   102.914  &lt; 2e-16 ***\nORIGIN_SZJESZ02       0.3210652  0.0044028    72.923  &lt; 2e-16 ***\nORIGIN_SZJESZ03       0.3063115  0.0046508    65.862  &lt; 2e-16 ***\nORIGIN_SZJESZ04      -0.7940775  0.0072483  -109.553  &lt; 2e-16 ***\nORIGIN_SZJESZ05      -2.0198990  0.0124785  -161.871  &lt; 2e-16 ***\nORIGIN_SZJESZ06       0.3575170  0.0042944    83.252  &lt; 2e-16 ***\nORIGIN_SZJESZ07      -1.6621884  0.0097460  -170.551  &lt; 2e-16 ***\nORIGIN_SZJESZ08      -0.5932612  0.0084663   -70.073  &lt; 2e-16 ***\nORIGIN_SZJESZ09       0.5925892  0.0043746   135.461  &lt; 2e-16 ***\nORIGIN_SZJESZ10      -1.8924880  0.0174179  -108.652  &lt; 2e-16 ***\nORIGIN_SZJESZ11      -1.9494598  0.0176831  -110.244  &lt; 2e-16 ***\nORIGIN_SZJWSZ01       0.3394748  0.0055917    60.710  &lt; 2e-16 ***\nORIGIN_SZJWSZ02       0.9871657  0.0040137   245.951  &lt; 2e-16 ***\nORIGIN_SZJWSZ03       1.3116842  0.0037865   346.408  &lt; 2e-16 ***\nORIGIN_SZJWSZ04       1.4409361  0.0038104   378.160  &lt; 2e-16 ***\nORIGIN_SZJWSZ05      -1.2962938  0.0110929  -116.858  &lt; 2e-16 ***\nORIGIN_SZJWSZ06      -0.6942117  0.0086716   -80.056  &lt; 2e-16 ***\nORIGIN_SZJWSZ07      -2.0861859  0.0190587  -109.461  &lt; 2e-16 ***\nORIGIN_SZJWSZ08       2.0608945  0.0036750   560.791  &lt; 2e-16 ***\nORIGIN_SZJWSZ09       1.9210325  0.0035020   548.549  &lt; 2e-16 ***\nORIGIN_SZKLSZ01       0.1861622  0.0042348    43.960  &lt; 2e-16 ***\nORIGIN_SZKLSZ02      -0.4126464  0.0052718   -78.274  &lt; 2e-16 ***\nORIGIN_SZKLSZ03      -0.4642349  0.0053629   -86.564  &lt; 2e-16 ***\nORIGIN_SZKLSZ04      -1.6472371  0.0075251  -218.898  &lt; 2e-16 ***\nORIGIN_SZKLSZ05      -0.5708721  0.0062611   -91.177  &lt; 2e-16 ***\nORIGIN_SZKLSZ06      -0.6135657  0.0050198  -122.229  &lt; 2e-16 ***\nORIGIN_SZKLSZ07      -0.9244714  0.0065291  -141.592  &lt; 2e-16 ***\nORIGIN_SZKLSZ08      -0.8401489  0.0057370  -146.444  &lt; 2e-16 ***\nORIGIN_SZKLSZ09      -1.5444388  0.0071838  -214.990  &lt; 2e-16 ***\nORIGIN_SZLKSZ01      -3.0494346  0.0325902   -93.569  &lt; 2e-16 ***\nORIGIN_SZMDSZ01      -2.2868314  0.0220628  -103.651  &lt; 2e-16 ***\nORIGIN_SZMDSZ02      -0.9137134  0.0097759   -93.466  &lt; 2e-16 ***\nORIGIN_SZMDSZ03      -1.7586473  0.0142443  -123.463  &lt; 2e-16 ***\nORIGIN_SZMPSZ01      -0.7419447  0.0063753  -116.377  &lt; 2e-16 ***\nORIGIN_SZMPSZ02      -0.4050732  0.0056898   -71.193  &lt; 2e-16 ***\nORIGIN_SZMPSZ03       0.4346351  0.0042583   102.068  &lt; 2e-16 ***\nORIGIN_SZMSSZ01      -5.2495941  0.2582191   -20.330  &lt; 2e-16 ***\nORIGIN_SZMUSZ01      -1.2678040  0.0063125  -200.840  &lt; 2e-16 ***\nORIGIN_SZMUSZ02      -3.3941228  0.0181446  -187.060  &lt; 2e-16 ***\nORIGIN_SZMUSZ03      -1.8579872  0.0074767  -248.504  &lt; 2e-16 ***\nORIGIN_SZNTSZ01      -2.4562677  0.0264751   -92.776  &lt; 2e-16 ***\nORIGIN_SZNTSZ02      -2.6884752  0.0153396  -175.264  &lt; 2e-16 ***\nORIGIN_SZNTSZ03      -1.0302618  0.0068333  -150.770  &lt; 2e-16 ***\nORIGIN_SZNTSZ05      -2.9961746  0.0381225   -78.593  &lt; 2e-16 ***\nORIGIN_SZNTSZ06      -3.3551771  0.0417904   -80.286  &lt; 2e-16 ***\nORIGIN_SZNVSZ01       0.6548294  0.0038395   170.550  &lt; 2e-16 ***\nORIGIN_SZNVSZ02      -0.5361729  0.0053627   -99.982  &lt; 2e-16 ***\nORIGIN_SZNVSZ03      -1.0528922  0.0064538  -163.143  &lt; 2e-16 ***\nORIGIN_SZNVSZ04      -1.3383009  0.0079171  -169.040  &lt; 2e-16 ***\nORIGIN_SZNVSZ05      -2.5755709  0.0143828  -179.073  &lt; 2e-16 ***\nORIGIN_SZORSZ01      -3.4038604  0.0362979   -93.776  &lt; 2e-16 ***\nORIGIN_SZORSZ02      -1.3352616  0.0065130  -205.014  &lt; 2e-16 ***\nORIGIN_SZORSZ03      -1.7228462  0.0075332  -228.701  &lt; 2e-16 ***\nORIGIN_SZOTSZ01      -1.8259642  0.0081642  -223.656  &lt; 2e-16 ***\nORIGIN_SZOTSZ02      -1.9274035  0.0094612  -203.716  &lt; 2e-16 ***\nORIGIN_SZOTSZ03      -0.8068808  0.0057451  -140.446  &lt; 2e-16 ***\nORIGIN_SZOTSZ04      -0.7938441  0.0094022   -84.431  &lt; 2e-16 ***\nORIGIN_SZPGSZ01      -0.5451306  0.0094909   -57.437  &lt; 2e-16 ***\nORIGIN_SZPGSZ02      -0.2400242  0.0059692   -40.210  &lt; 2e-16 ***\nORIGIN_SZPGSZ03       1.1781038  0.0038895   302.891  &lt; 2e-16 ***\nORIGIN_SZPGSZ04       1.2997193  0.0038963   333.574  &lt; 2e-16 ***\nORIGIN_SZPGSZ05       0.5404565  0.0048535   111.354  &lt; 2e-16 ***\nORIGIN_SZPLSZ01      -0.4447610  0.0083123   -53.506  &lt; 2e-16 ***\nORIGIN_SZPLSZ02      -1.3630166  0.0119901  -113.678  &lt; 2e-16 ***\nORIGIN_SZPLSZ03      -2.9111192  0.0335677   -86.724  &lt; 2e-16 ***\nORIGIN_SZPLSZ04      -2.9020672  0.0287202  -101.046  &lt; 2e-16 ***\nORIGIN_SZPLSZ05      -2.1070875  0.0177181  -118.923  &lt; 2e-16 ***\nORIGIN_SZPNSZ01       1.7044819  0.0039993   426.198  &lt; 2e-16 ***\nORIGIN_SZPNSZ02      -0.3996381  0.0098818   -40.442  &lt; 2e-16 ***\nORIGIN_SZPNSZ03      -1.8688060  0.0176893  -105.646  &lt; 2e-16 ***\nORIGIN_SZPNSZ04      -2.4090563  0.0245671   -98.060  &lt; 2e-16 ***\nORIGIN_SZPNSZ05      -1.8954587  0.0204403   -92.731  &lt; 2e-16 ***\nORIGIN_SZPRSZ01      -0.5422839  0.0095462   -56.806  &lt; 2e-16 ***\nORIGIN_SZPRSZ02       1.1918482  0.0040335   295.486  &lt; 2e-16 ***\nORIGIN_SZPRSZ03       0.9182134  0.0040784   225.139  &lt; 2e-16 ***\nORIGIN_SZPRSZ04      -0.0754896  0.0062875   -12.006  &lt; 2e-16 ***\nORIGIN_SZPRSZ05       1.3803696  0.0038600   357.608  &lt; 2e-16 ***\nORIGIN_SZPRSZ06      -0.3836077  0.0070846   -54.147  &lt; 2e-16 ***\nORIGIN_SZPRSZ07      -2.4586327  0.0177702  -138.357  &lt; 2e-16 ***\nORIGIN_SZPRSZ08       0.2233076  0.0053220    41.959  &lt; 2e-16 ***\nORIGIN_SZQTSZ01      -0.3596244  0.0058016   -61.988  &lt; 2e-16 ***\nORIGIN_SZQTSZ02      -0.7359044  0.0055569  -132.431  &lt; 2e-16 ***\nORIGIN_SZQTSZ03      -0.2047480  0.0049272   -41.555  &lt; 2e-16 ***\nORIGIN_SZQTSZ04      -1.1088918  0.0067099  -165.262  &lt; 2e-16 ***\nORIGIN_SZQTSZ05      -0.2193786  0.0049741   -44.104  &lt; 2e-16 ***\nORIGIN_SZQTSZ06      -0.5989957  0.0057358  -104.431  &lt; 2e-16 ***\nORIGIN_SZQTSZ07      -1.4949742  0.0082826  -180.496  &lt; 2e-16 ***\nORIGIN_SZQTSZ08      -0.2098833  0.0051292   -40.919  &lt; 2e-16 ***\nORIGIN_SZQTSZ09      -0.5304994  0.0058250   -91.073  &lt; 2e-16 ***\nORIGIN_SZQTSZ10      -0.4513062  0.0057865   -77.992  &lt; 2e-16 ***\nORIGIN_SZQTSZ11      -1.4758123  0.0090241  -163.540  &lt; 2e-16 ***\nORIGIN_SZQTSZ12      -1.1909691  0.0085136  -139.889  &lt; 2e-16 ***\nORIGIN_SZQTSZ13      -0.2161405  0.0053915   -40.089  &lt; 2e-16 ***\nORIGIN_SZQTSZ14      -1.4897165  0.0083116  -179.233  &lt; 2e-16 ***\nORIGIN_SZQTSZ15      -0.7475059  0.0090160   -82.909  &lt; 2e-16 ***\nORIGIN_SZRCSZ01      -0.6763214  0.0058784  -115.052  &lt; 2e-16 ***\nORIGIN_SZRCSZ02      -2.1255737  0.0156783  -135.574  &lt; 2e-16 ***\nORIGIN_SZRCSZ03      -1.4398312  0.0078670  -183.021  &lt; 2e-16 ***\nORIGIN_SZRCSZ04      -2.3098902  0.0123228  -187.448  &lt; 2e-16 ***\nORIGIN_SZRCSZ05      -2.6229210  0.0136432  -192.252  &lt; 2e-16 ***\nORIGIN_SZRCSZ06      -0.5427172  0.0077544   -69.989  &lt; 2e-16 ***\nORIGIN_SZRCSZ08      -2.6175865  0.0179817  -145.570  &lt; 2e-16 ***\nORIGIN_SZRCSZ09      -1.9917576  0.0131464  -151.506  &lt; 2e-16 ***\nORIGIN_SZRCSZ10      -1.8806794  0.0078372  -239.969  &lt; 2e-16 ***\nORIGIN_SZRVSZ01      -2.7768261  0.0139448  -199.130  &lt; 2e-16 ***\nORIGIN_SZRVSZ02      -1.2333062  0.0074671  -165.166  &lt; 2e-16 ***\nORIGIN_SZRVSZ03      -2.0800981  0.0113272  -183.637  &lt; 2e-16 ***\nORIGIN_SZRVSZ04      -2.2040158  0.0173312  -127.171  &lt; 2e-16 ***\nORIGIN_SZRVSZ05      -2.2885575  0.0135606  -168.765  &lt; 2e-16 ***\nORIGIN_SZSBSZ01       0.8757203  0.0047106   185.903  &lt; 2e-16 ***\nORIGIN_SZSBSZ02      -0.5319076  0.0068813   -77.297  &lt; 2e-16 ***\nORIGIN_SZSBSZ03       1.0955796  0.0040817   268.412  &lt; 2e-16 ***\nORIGIN_SZSBSZ04       0.8238882  0.0047311   174.142  &lt; 2e-16 ***\nORIGIN_SZSBSZ05       0.0021651  0.0057901     0.374    0.708    \nORIGIN_SZSBSZ06      -1.4917643  0.0137998  -108.100  &lt; 2e-16 ***\nORIGIN_SZSBSZ07      -0.6568958  0.0094394   -69.591  &lt; 2e-16 ***\nORIGIN_SZSBSZ08      -0.8439091  0.0096351   -87.587  &lt; 2e-16 ***\nORIGIN_SZSBSZ09      -0.3062645  0.0072204   -42.417  &lt; 2e-16 ***\nORIGIN_SZSESZ02       1.1587214  0.0038963   297.391  &lt; 2e-16 ***\nORIGIN_SZSESZ03       1.3879835  0.0036935   375.788  &lt; 2e-16 ***\nORIGIN_SZSESZ04       1.0521682  0.0042259   248.979  &lt; 2e-16 ***\nORIGIN_SZSESZ05      -0.0563679  0.0051169   -11.016  &lt; 2e-16 ***\nORIGIN_SZSESZ06       1.0449269  0.0040284   259.388  &lt; 2e-16 ***\nORIGIN_SZSESZ07      -2.1818479  0.0150605  -144.872  &lt; 2e-16 ***\nORIGIN_SZSGSZ01      -0.8082824  0.0073357  -110.185  &lt; 2e-16 ***\nORIGIN_SZSGSZ02      -1.0735569  0.0086924  -123.505  &lt; 2e-16 ***\nORIGIN_SZSGSZ03       0.4031502  0.0045448    88.707  &lt; 2e-16 ***\nORIGIN_SZSGSZ04       0.3063486  0.0042751    71.659  &lt; 2e-16 ***\nORIGIN_SZSGSZ05      -1.6037907  0.0089939  -178.320  &lt; 2e-16 ***\nORIGIN_SZSGSZ06       0.4486464  0.0040600   110.503  &lt; 2e-16 ***\nORIGIN_SZSGSZ07      -0.4958110  0.0053567   -92.558  &lt; 2e-16 ***\nORIGIN_SZSKSZ01      -0.1475886  0.0070814   -20.842  &lt; 2e-16 ***\nORIGIN_SZSKSZ02       0.3170975  0.0052616    60.266  &lt; 2e-16 ***\nORIGIN_SZSKSZ03      -0.3530447  0.0064310   -54.897  &lt; 2e-16 ***\nORIGIN_SZSKSZ04      -2.0946323  0.0205180  -102.087  &lt; 2e-16 ***\nORIGIN_SZSKSZ05      -1.1102428  0.0128651   -86.299  &lt; 2e-16 ***\nORIGIN_SZSLSZ01      -3.0573722  0.0267883  -114.131  &lt; 2e-16 ***\nORIGIN_SZSLSZ04      -0.2972489  0.0062147   -47.830  &lt; 2e-16 ***\nORIGIN_SZSRSZ01      -1.6849783  0.0080871  -208.353  &lt; 2e-16 ***\nORIGIN_SZSRSZ02      -1.9720019  0.0085445  -230.792  &lt; 2e-16 ***\nORIGIN_SZSRSZ03      -2.9317682  0.0175877  -166.694  &lt; 2e-16 ***\nORIGIN_SZSVSZ01      -4.0237287  0.0567990   -70.842  &lt; 2e-16 ***\nORIGIN_SZTHSZ01      -1.7034593  0.0363923   -46.808  &lt; 2e-16 ***\nORIGIN_SZTHSZ03      -1.8014255  0.0161459  -111.572  &lt; 2e-16 ***\nORIGIN_SZTHSZ04      -2.6749725  0.0251164  -106.503  &lt; 2e-16 ***\nORIGIN_SZTHSZ06      -2.1118373  0.0149975  -140.812  &lt; 2e-16 ***\nORIGIN_SZTMSZ01       0.9089892  0.0044890   202.490  &lt; 2e-16 ***\nORIGIN_SZTMSZ02       2.2886581  0.0034149   670.196  &lt; 2e-16 ***\nORIGIN_SZTMSZ03       1.5449408  0.0036605   422.060  &lt; 2e-16 ***\nORIGIN_SZTMSZ04       0.9776313  0.0042051   232.487  &lt; 2e-16 ***\nORIGIN_SZTMSZ05      -0.2459140  0.0065676   -37.443  &lt; 2e-16 ***\nORIGIN_SZTNSZ01      -1.2750694  0.0069422  -183.669  &lt; 2e-16 ***\nORIGIN_SZTNSZ02      -1.1577838  0.0065582  -176.538  &lt; 2e-16 ***\nORIGIN_SZTNSZ03      -1.6369376  0.0087512  -187.054  &lt; 2e-16 ***\nORIGIN_SZTNSZ04      -0.7124953  0.0060485  -117.798  &lt; 2e-16 ***\nORIGIN_SZTPSZ01      -0.6311289  0.0055165  -114.408  &lt; 2e-16 ***\nORIGIN_SZTPSZ02       0.4834100  0.0038860   124.397  &lt; 2e-16 ***\nORIGIN_SZTPSZ03      -0.3605389  0.0053560   -67.315  &lt; 2e-16 ***\nORIGIN_SZTPSZ04      -0.1344543  0.0050550   -26.598  &lt; 2e-16 ***\nORIGIN_SZTPSZ05      -0.1563664  0.0053098   -29.449  &lt; 2e-16 ***\nORIGIN_SZTPSZ06       0.3197379  0.0052926    60.412  &lt; 2e-16 ***\nORIGIN_SZTPSZ07      -0.2970123  0.0057224   -51.904  &lt; 2e-16 ***\nORIGIN_SZTPSZ08      -0.7928670  0.0075233  -105.388  &lt; 2e-16 ***\nORIGIN_SZTPSZ09      -0.4047445  0.0056963   -71.054  &lt; 2e-16 ***\nORIGIN_SZTPSZ10      -0.5375550  0.0061383   -87.574  &lt; 2e-16 ***\nORIGIN_SZTPSZ11       0.2587738  0.0045920    56.353  &lt; 2e-16 ***\nORIGIN_SZTPSZ12      -0.4227318  0.0055987   -75.505  &lt; 2e-16 ***\nORIGIN_SZTSSZ01      -3.7462180  0.0498600   -75.135  &lt; 2e-16 ***\nORIGIN_SZTSSZ02       0.5064375  0.0063176    80.163  &lt; 2e-16 ***\nORIGIN_SZTSSZ03       0.6468062  0.0061046   105.955  &lt; 2e-16 ***\nORIGIN_SZTSSZ04       0.5999365  0.0063391    94.640  &lt; 2e-16 ***\nORIGIN_SZTSSZ05      -0.8635286  0.0117636   -73.407  &lt; 2e-16 ***\nORIGIN_SZTSSZ06      -1.0584223  0.0142616   -74.215  &lt; 2e-16 ***\nORIGIN_SZWCSZ01       0.4620512  0.0058731    78.673  &lt; 2e-16 ***\nORIGIN_SZWCSZ02      -2.6522428  0.0266061   -99.685  &lt; 2e-16 ***\nORIGIN_SZWCSZ03      -4.3371974  0.1291395   -33.585  &lt; 2e-16 ***\nORIGIN_SZWDSZ01       1.4191503  0.0037442   379.023  &lt; 2e-16 ***\nORIGIN_SZWDSZ02       1.2242673  0.0041589   294.371  &lt; 2e-16 ***\nORIGIN_SZWDSZ03       2.2493444  0.0036309   619.501  &lt; 2e-16 ***\nORIGIN_SZWDSZ04       1.2928790  0.0043465   297.453  &lt; 2e-16 ***\nORIGIN_SZWDSZ05       0.7226180  0.0043727   165.257  &lt; 2e-16 ***\nORIGIN_SZWDSZ06       1.2861581  0.0041281   311.564  &lt; 2e-16 ***\nORIGIN_SZWDSZ07      -0.0701950  0.0067852   -10.345  &lt; 2e-16 ***\nORIGIN_SZWDSZ08      -0.0996380  0.0064850   -15.364  &lt; 2e-16 ***\nORIGIN_SZWDSZ09       1.4917032  0.0039823   374.586  &lt; 2e-16 ***\nORIGIN_SZYSSZ01       0.0490751  0.0048619    10.094  &lt; 2e-16 ***\nORIGIN_SZYSSZ02       1.0566018  0.0044148   239.334  &lt; 2e-16 ***\nORIGIN_SZYSSZ03       1.9676617  0.0037548   524.041  &lt; 2e-16 ***\nORIGIN_SZYSSZ04       0.9771122  0.0039924   244.745  &lt; 2e-16 ***\nORIGIN_SZYSSZ05       0.2282429  0.0049480    46.128  &lt; 2e-16 ***\nORIGIN_SZYSSZ06      -0.9726470  0.0088018  -110.506  &lt; 2e-16 ***\nORIGIN_SZYSSZ07      -0.7319012  0.0083972   -87.160  &lt; 2e-16 ***\nORIGIN_SZYSSZ08       0.0291637  0.0054994     5.303 1.14e-07 ***\nORIGIN_SZYSSZ09       1.4942617  0.0038005   393.173  &lt; 2e-16 ***\nlog(DESTIN_AGE25_64)  0.0234589  0.0000707   331.787  &lt; 2e-16 ***\nlog(dist)            -0.6993489  0.0001103 -6342.753  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 88920223  on 20599  degrees of freedom\nResidual deviance: 38651596  on 20288  degrees of freedom\nAIC: 38781345\n\nNumber of Fisher Scoring iterations: 7\n\n\nWe can examine how the constraints hold for destinations this time.\n\n\nCode\nCalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)\n\n\n[1] 0.3916646"
  },
  {
    "objectID": "in-class/ice3.html#destination-constrained",
    "href": "in-class/ice3.html#destination-constrained",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "6.7 Destination constrained",
    "text": "6.7 Destination constrained\nIn this section, we will fit a destination constrained SIM by using the code chunk below.\n\n\nCode\ndecSIM &lt;- glm(formula = TRIPS ~ \n                DESTIN_SZ + \n                log(ORIGIN_AGE25_64) + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(decSIM)\n\n\n\nCall:\nglm(formula = TRIPS ~ DESTIN_SZ + log(ORIGIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)          10.7508117  0.0030780  3492.796  &lt; 2e-16 ***\nDESTIN_SZAMSZ02       0.2839062  0.0038567    73.614  &lt; 2e-16 ***\nDESTIN_SZAMSZ03       0.4306927  0.0036823   116.963  &lt; 2e-16 ***\nDESTIN_SZAMSZ04      -0.8010799  0.0054756  -146.299  &lt; 2e-16 ***\nDESTIN_SZAMSZ05      -0.8583345  0.0052691  -162.901  &lt; 2e-16 ***\nDESTIN_SZAMSZ06      -0.6860157  0.0052062  -131.768  &lt; 2e-16 ***\nDESTIN_SZAMSZ07      -1.7152580  0.0089336  -192.000  &lt; 2e-16 ***\nDESTIN_SZAMSZ08      -0.8492376  0.0058007  -146.402  &lt; 2e-16 ***\nDESTIN_SZAMSZ09      -0.8317970  0.0054654  -152.194  &lt; 2e-16 ***\nDESTIN_SZAMSZ10       0.5099307  0.0038774   131.514  &lt; 2e-16 ***\nDESTIN_SZAMSZ11       0.1433257  0.0066949    21.408  &lt; 2e-16 ***\nDESTIN_SZAMSZ12      -0.6777171  0.0061136  -110.854  &lt; 2e-16 ***\nDESTIN_SZBDSZ01       0.6856188  0.0034558   198.396  &lt; 2e-16 ***\nDESTIN_SZBDSZ02      -0.0655409  0.0044247   -14.813  &lt; 2e-16 ***\nDESTIN_SZBDSZ03       0.1531570  0.0038934    39.338  &lt; 2e-16 ***\nDESTIN_SZBDSZ04       1.1599806  0.0031908   363.539  &lt; 2e-16 ***\nDESTIN_SZBDSZ05       0.5394399  0.0035351   152.596  &lt; 2e-16 ***\nDESTIN_SZBDSZ06       0.3393177  0.0038462    88.221  &lt; 2e-16 ***\nDESTIN_SZBDSZ07      -0.7852613  0.0077583  -101.216  &lt; 2e-16 ***\nDESTIN_SZBDSZ08      -1.5458650  0.0090502  -170.810  &lt; 2e-16 ***\nDESTIN_SZBKSZ01      -0.8866839  0.0056112  -158.020  &lt; 2e-16 ***\nDESTIN_SZBKSZ02      -0.0327540  0.0046131    -7.100 1.25e-12 ***\nDESTIN_SZBKSZ03      -0.3167299  0.0048345   -65.514  &lt; 2e-16 ***\nDESTIN_SZBKSZ04       0.2295516  0.0042654    53.817  &lt; 2e-16 ***\nDESTIN_SZBKSZ05      -0.5609944  0.0049507  -113.315  &lt; 2e-16 ***\nDESTIN_SZBKSZ06      -0.7637541  0.0055115  -138.575  &lt; 2e-16 ***\nDESTIN_SZBKSZ07       0.4331355  0.0036382   119.054  &lt; 2e-16 ***\nDESTIN_SZBKSZ08      -1.0069862  0.0062984  -159.880  &lt; 2e-16 ***\nDESTIN_SZBKSZ09      -0.2172189  0.0045109   -48.154  &lt; 2e-16 ***\nDESTIN_SZBLSZ01      -0.0912139  0.0058701   -15.539  &lt; 2e-16 ***\nDESTIN_SZBLSZ02       0.8732708  0.0057725   151.282  &lt; 2e-16 ***\nDESTIN_SZBLSZ03       1.7218191  0.0063041   273.127  &lt; 2e-16 ***\nDESTIN_SZBLSZ04       0.4542678  0.0103798    43.765  &lt; 2e-16 ***\nDESTIN_SZBMSZ01      -0.0936209  0.0040616   -23.050  &lt; 2e-16 ***\nDESTIN_SZBMSZ02      -0.4635549  0.0043364  -106.898  &lt; 2e-16 ***\nDESTIN_SZBMSZ03      -0.8424932  0.0052157  -161.529  &lt; 2e-16 ***\nDESTIN_SZBMSZ04      -0.5076746  0.0044861  -113.166  &lt; 2e-16 ***\nDESTIN_SZBMSZ05      -0.5555895  0.0053786  -103.297  &lt; 2e-16 ***\nDESTIN_SZBMSZ06      -1.6552732  0.0091463  -180.977  &lt; 2e-16 ***\nDESTIN_SZBMSZ07      -0.0427226  0.0039367   -10.852  &lt; 2e-16 ***\nDESTIN_SZBMSZ08      -1.0921979  0.0053522  -204.067  &lt; 2e-16 ***\nDESTIN_SZBMSZ09      -1.9948722  0.0084860  -235.079  &lt; 2e-16 ***\nDESTIN_SZBMSZ10      -1.6125986  0.0070605  -228.397  &lt; 2e-16 ***\nDESTIN_SZBMSZ11      -1.4946742  0.0065263  -229.022  &lt; 2e-16 ***\nDESTIN_SZBMSZ12      -1.0123558  0.0067983  -148.913  &lt; 2e-16 ***\nDESTIN_SZBMSZ13      -0.2578843  0.0043222   -59.665  &lt; 2e-16 ***\nDESTIN_SZBMSZ14      -1.0339216  0.0068113  -151.796  &lt; 2e-16 ***\nDESTIN_SZBMSZ15      -1.1406277  0.0061110  -186.652  &lt; 2e-16 ***\nDESTIN_SZBMSZ16      -1.4634801  0.0064078  -228.390  &lt; 2e-16 ***\nDESTIN_SZBMSZ17      -1.3751289  0.0075163  -182.954  &lt; 2e-16 ***\nDESTIN_SZBPSZ01      -0.4148273  0.0048362   -85.776  &lt; 2e-16 ***\nDESTIN_SZBPSZ02      -1.3861009  0.0077314  -179.282  &lt; 2e-16 ***\nDESTIN_SZBPSZ03      -1.0828236  0.0071960  -150.475  &lt; 2e-16 ***\nDESTIN_SZBPSZ04      -0.5981784  0.0053735  -111.321  &lt; 2e-16 ***\nDESTIN_SZBPSZ05       0.6141313  0.0035375   173.608  &lt; 2e-16 ***\nDESTIN_SZBPSZ06      -0.6601734  0.0065643  -100.571  &lt; 2e-16 ***\nDESTIN_SZBPSZ07      -0.3935848  0.0066280   -59.382  &lt; 2e-16 ***\nDESTIN_SZBSSZ01      -0.0779471  0.0040368   -19.309  &lt; 2e-16 ***\nDESTIN_SZBSSZ02      -0.6721472  0.0046819  -143.562  &lt; 2e-16 ***\nDESTIN_SZBSSZ03       0.2324562  0.0035877    64.793  &lt; 2e-16 ***\nDESTIN_SZBTSZ01       0.2200750  0.0037721    58.343  &lt; 2e-16 ***\nDESTIN_SZBTSZ02      -0.5608117  0.0056765   -98.796  &lt; 2e-16 ***\nDESTIN_SZBTSZ03      -0.1081184  0.0044095   -24.520  &lt; 2e-16 ***\nDESTIN_SZBTSZ04      -1.5479561  0.0088245  -175.416  &lt; 2e-16 ***\nDESTIN_SZBTSZ05      -0.6457186  0.0060380  -106.943  &lt; 2e-16 ***\nDESTIN_SZBTSZ06      -0.8460008  0.0055675  -151.954  &lt; 2e-16 ***\nDESTIN_SZBTSZ07      -1.8053654  0.0084483  -213.695  &lt; 2e-16 ***\nDESTIN_SZBTSZ08      -1.1682832  0.0073421  -159.122  &lt; 2e-16 ***\nDESTIN_SZCBSZ01      -4.7400015  0.2582141   -18.357  &lt; 2e-16 ***\nDESTIN_SZCCSZ01      -0.5867665  0.0062887   -93.305  &lt; 2e-16 ***\nDESTIN_SZCHSZ01      -0.8917753  0.0076306  -116.868  &lt; 2e-16 ***\nDESTIN_SZCHSZ02       0.1715371  0.0047410    36.181  &lt; 2e-16 ***\nDESTIN_SZCHSZ03       1.8280462  0.0034465   530.402  &lt; 2e-16 ***\nDESTIN_SZCKSZ01      -0.1739151  0.0045215   -38.464  &lt; 2e-16 ***\nDESTIN_SZCKSZ02      -0.4063167  0.0048588   -83.624  &lt; 2e-16 ***\nDESTIN_SZCKSZ03       0.8036429  0.0035410   226.955  &lt; 2e-16 ***\nDESTIN_SZCKSZ04      -0.6240149  0.0056195  -111.045  &lt; 2e-16 ***\nDESTIN_SZCKSZ05      -0.2383528  0.0058197   -40.956  &lt; 2e-16 ***\nDESTIN_SZCKSZ06       0.6845347  0.0043126   158.727  &lt; 2e-16 ***\nDESTIN_SZCLSZ01       0.5974361  0.0042068   142.018  &lt; 2e-16 ***\nDESTIN_SZCLSZ02      -2.1086220  0.0116870  -180.425  &lt; 2e-16 ***\nDESTIN_SZCLSZ03      -0.9465157  0.0065894  -143.643  &lt; 2e-16 ***\nDESTIN_SZCLSZ04       0.1725485  0.0039508    43.674  &lt; 2e-16 ***\nDESTIN_SZCLSZ05      -0.9604751  0.0068922  -139.357  &lt; 2e-16 ***\nDESTIN_SZCLSZ06       0.1960877  0.0037618    52.126  &lt; 2e-16 ***\nDESTIN_SZCLSZ07      -0.5242570  0.0047571  -110.205  &lt; 2e-16 ***\nDESTIN_SZCLSZ08      -0.3842675  0.0052616   -73.033  &lt; 2e-16 ***\nDESTIN_SZCLSZ09       0.3514013  0.0056529    62.163  &lt; 2e-16 ***\nDESTIN_SZDTSZ01      -0.8130081  0.0048754  -166.757  &lt; 2e-16 ***\nDESTIN_SZDTSZ02      -0.8759301  0.0048215  -181.671  &lt; 2e-16 ***\nDESTIN_SZDTSZ03      -1.0708543  0.0056028  -191.129  &lt; 2e-16 ***\nDESTIN_SZDTSZ04      -1.1604903  0.0125653   -92.357  &lt; 2e-16 ***\nDESTIN_SZDTSZ05      -1.1549812  0.0088096  -131.105  &lt; 2e-16 ***\nDESTIN_SZDTSZ06      -0.9487479  0.0056945  -166.606  &lt; 2e-16 ***\nDESTIN_SZDTSZ07      -2.0191431  0.0209759   -96.260  &lt; 2e-16 ***\nDESTIN_SZDTSZ08      -0.5381683  0.0043871  -122.671  &lt; 2e-16 ***\nDESTIN_SZDTSZ09      -1.3556820  0.0096701  -140.193  &lt; 2e-16 ***\nDESTIN_SZDTSZ10      -1.5542147  0.0088951  -174.727  &lt; 2e-16 ***\nDESTIN_SZDTSZ11      -0.6089266  0.0047467  -128.285  &lt; 2e-16 ***\nDESTIN_SZDTSZ12      -2.5521608  0.0171936  -148.437  &lt; 2e-16 ***\nDESTIN_SZDTSZ13      -1.8697206  0.0097461  -191.843  &lt; 2e-16 ***\nDESTIN_SZGLSZ01       0.1397666  0.0045185    30.932  &lt; 2e-16 ***\nDESTIN_SZGLSZ02      -0.2217141  0.0041878   -52.943  &lt; 2e-16 ***\nDESTIN_SZGLSZ03       0.5304130  0.0035148   150.909  &lt; 2e-16 ***\nDESTIN_SZGLSZ04       0.4907960  0.0034415   142.610  &lt; 2e-16 ***\nDESTIN_SZGLSZ05       0.2788043  0.0035946    77.561  &lt; 2e-16 ***\nDESTIN_SZHGSZ01       0.4826879  0.0035262   136.886  &lt; 2e-16 ***\nDESTIN_SZHGSZ02      -0.4113845  0.0046526   -88.421  &lt; 2e-16 ***\nDESTIN_SZHGSZ03      -1.0125376  0.0057393  -176.422  &lt; 2e-16 ***\nDESTIN_SZHGSZ04      -0.1514916  0.0040498   -37.407  &lt; 2e-16 ***\nDESTIN_SZHGSZ05      -0.0323397  0.0040499    -7.985 1.40e-15 ***\nDESTIN_SZHGSZ06      -0.7391075  0.0050170  -147.321  &lt; 2e-16 ***\nDESTIN_SZHGSZ07       0.2844554  0.0037586    75.680  &lt; 2e-16 ***\nDESTIN_SZHGSZ08      -0.1749828  0.0042881   -40.806  &lt; 2e-16 ***\nDESTIN_SZHGSZ09       0.4955070  0.0043403   114.165  &lt; 2e-16 ***\nDESTIN_SZHGSZ10      -2.7987786  0.0247620  -113.027  &lt; 2e-16 ***\nDESTIN_SZJESZ01      -0.0761378  0.0045726   -16.651  &lt; 2e-16 ***\nDESTIN_SZJESZ02      -0.4302317  0.0047711   -90.174  &lt; 2e-16 ***\nDESTIN_SZJESZ03      -0.4321296  0.0050293   -85.923  &lt; 2e-16 ***\nDESTIN_SZJESZ04       0.1592126  0.0051327    31.020  &lt; 2e-16 ***\nDESTIN_SZJESZ05      -0.7020425  0.0079778   -88.000  &lt; 2e-16 ***\nDESTIN_SZJESZ06       0.6242741  0.0036527   170.906  &lt; 2e-16 ***\nDESTIN_SZJESZ07      -0.7793636  0.0065103  -119.712  &lt; 2e-16 ***\nDESTIN_SZJESZ08      -0.3109043  0.0065040   -47.802  &lt; 2e-16 ***\nDESTIN_SZJESZ09      -0.2554383  0.0049023   -52.106  &lt; 2e-16 ***\nDESTIN_SZJESZ10       0.8992415  0.0060478   148.688  &lt; 2e-16 ***\nDESTIN_SZJESZ11       1.1168547  0.0056855   196.440  &lt; 2e-16 ***\nDESTIN_SZJWSZ01      -0.1424355  0.0054897   -25.946  &lt; 2e-16 ***\nDESTIN_SZJWSZ02      -0.2002214  0.0047858   -41.836  &lt; 2e-16 ***\nDESTIN_SZJWSZ03       0.7300105  0.0036739   198.700  &lt; 2e-16 ***\nDESTIN_SZJWSZ04       1.1616312  0.0034095   340.709  &lt; 2e-16 ***\nDESTIN_SZJWSZ05       0.0800087  0.0051584    15.510  &lt; 2e-16 ***\nDESTIN_SZJWSZ06       0.6147127  0.0047591   129.166  &lt; 2e-16 ***\nDESTIN_SZJWSZ07      -0.6893648  0.0215336   -32.013  &lt; 2e-16 ***\nDESTIN_SZJWSZ08       0.5683807  0.0041424   137.210  &lt; 2e-16 ***\nDESTIN_SZJWSZ09       1.5973619  0.0031439   508.082  &lt; 2e-16 ***\nDESTIN_SZKLSZ01      -0.5094948  0.0044060  -115.636  &lt; 2e-16 ***\nDESTIN_SZKLSZ02      -0.7449865  0.0051360  -145.052  &lt; 2e-16 ***\nDESTIN_SZKLSZ03      -1.1356580  0.0054828  -207.132  &lt; 2e-16 ***\nDESTIN_SZKLSZ04      -1.5525737  0.0069498  -223.400  &lt; 2e-16 ***\nDESTIN_SZKLSZ05      -0.6957866  0.0061482  -113.169  &lt; 2e-16 ***\nDESTIN_SZKLSZ06      -0.9285827  0.0049504  -187.579  &lt; 2e-16 ***\nDESTIN_SZKLSZ07      -0.9589297  0.0054404  -176.262  &lt; 2e-16 ***\nDESTIN_SZKLSZ08      -0.0678530  0.0040065   -16.936  &lt; 2e-16 ***\nDESTIN_SZKLSZ09      -1.8626513  0.0074083  -251.427  &lt; 2e-16 ***\nDESTIN_SZLKSZ01      -1.4542602  0.0194246   -74.867  &lt; 2e-16 ***\nDESTIN_SZMDSZ01      -0.9192172  0.0151847   -60.536  &lt; 2e-16 ***\nDESTIN_SZMDSZ02      -0.8522560  0.0093758   -90.900  &lt; 2e-16 ***\nDESTIN_SZMDSZ03      -2.6273864  0.0214513  -122.482  &lt; 2e-16 ***\nDESTIN_SZMPSZ01      -0.9379593  0.0063215  -148.375  &lt; 2e-16 ***\nDESTIN_SZMPSZ02      -0.7981714  0.0053387  -149.507  &lt; 2e-16 ***\nDESTIN_SZMPSZ03      -0.1191620  0.0042521   -28.024  &lt; 2e-16 ***\nDESTIN_SZMSSZ01      -2.9730915  0.0754302   -39.415  &lt; 2e-16 ***\nDESTIN_SZMUSZ01      -1.0785729  0.0052588  -205.101  &lt; 2e-16 ***\nDESTIN_SZMUSZ02      -1.4877511  0.0081593  -182.338  &lt; 2e-16 ***\nDESTIN_SZMUSZ03      -1.0837736  0.0051775  -209.324  &lt; 2e-16 ***\nDESTIN_SZNTSZ01      -2.5074846  0.0218327  -114.850  &lt; 2e-16 ***\nDESTIN_SZNTSZ02      -1.8703553  0.0091058  -205.403  &lt; 2e-16 ***\nDESTIN_SZNTSZ03      -1.3513958  0.0071426  -189.201  &lt; 2e-16 ***\nDESTIN_SZNTSZ05      -1.5793542  0.0168031   -93.992  &lt; 2e-16 ***\nDESTIN_SZNTSZ06      -2.7003589  0.0268534  -100.559  &lt; 2e-16 ***\nDESTIN_SZNVSZ01      -0.2140522  0.0039151   -54.674  &lt; 2e-16 ***\nDESTIN_SZNVSZ02      -0.4851324  0.0045238  -107.240  &lt; 2e-16 ***\nDESTIN_SZNVSZ03      -0.4257921  0.0045722   -93.126  &lt; 2e-16 ***\nDESTIN_SZNVSZ04      -2.1052751  0.0096396  -218.398  &lt; 2e-16 ***\nDESTIN_SZNVSZ05      -1.6948981  0.0076603  -221.258  &lt; 2e-16 ***\nDESTIN_SZORSZ01      -1.8510778  0.0180727  -102.424  &lt; 2e-16 ***\nDESTIN_SZORSZ02      -0.1325546  0.0040307   -32.886  &lt; 2e-16 ***\nDESTIN_SZORSZ03      -0.8855850  0.0051670  -171.392  &lt; 2e-16 ***\nDESTIN_SZOTSZ01      -1.5251208  0.0066865  -228.089  &lt; 2e-16 ***\nDESTIN_SZOTSZ02      -0.8893178  0.0060551  -146.871  &lt; 2e-16 ***\nDESTIN_SZOTSZ03      -1.5823759  0.0066067  -239.510  &lt; 2e-16 ***\nDESTIN_SZOTSZ04      -1.6701028  0.0095617  -174.666  &lt; 2e-16 ***\nDESTIN_SZPGSZ01      -1.7562724  0.0139239  -126.133  &lt; 2e-16 ***\nDESTIN_SZPGSZ02      -0.6209739  0.0056497  -109.913  &lt; 2e-16 ***\nDESTIN_SZPGSZ03       0.5832303  0.0036165   161.267  &lt; 2e-16 ***\nDESTIN_SZPGSZ04       0.2924833  0.0039200    74.613  &lt; 2e-16 ***\nDESTIN_SZPGSZ05      -0.7690434  0.0064170  -119.844  &lt; 2e-16 ***\nDESTIN_SZPLSZ01       0.2997902  0.0055417    54.097  &lt; 2e-16 ***\nDESTIN_SZPLSZ02      -1.0305355  0.0105925   -97.289  &lt; 2e-16 ***\nDESTIN_SZPLSZ03       0.2818253  0.0079191    35.588  &lt; 2e-16 ***\nDESTIN_SZPLSZ04       0.0989608  0.0077745    12.729  &lt; 2e-16 ***\nDESTIN_SZPLSZ05      -0.2624956  0.0092023   -28.525  &lt; 2e-16 ***\nDESTIN_SZPNSZ01       1.3772685  0.0043673   315.362  &lt; 2e-16 ***\nDESTIN_SZPNSZ02       1.9525185  0.0056085   348.134  &lt; 2e-16 ***\nDESTIN_SZPNSZ03       1.2700161  0.0063573   199.772  &lt; 2e-16 ***\nDESTIN_SZPNSZ04       2.2086756  0.0062030   356.066  &lt; 2e-16 ***\nDESTIN_SZPNSZ05       1.4553783  0.0085471   170.278  &lt; 2e-16 ***\nDESTIN_SZPRSZ01      -0.5228441  0.0064447   -81.128  &lt; 2e-16 ***\nDESTIN_SZPRSZ02       0.0065446  0.0044295     1.477 0.139545    \nDESTIN_SZPRSZ03       0.8821825  0.0034383   256.578  &lt; 2e-16 ***\nDESTIN_SZPRSZ04      -0.6920045  0.0076043   -91.001  &lt; 2e-16 ***\nDESTIN_SZPRSZ05       0.0507562  0.0042404    11.970  &lt; 2e-16 ***\nDESTIN_SZPRSZ06       0.6309197  0.0043312   145.668  &lt; 2e-16 ***\nDESTIN_SZPRSZ07      -1.2821533  0.0101052  -126.881  &lt; 2e-16 ***\nDESTIN_SZPRSZ08      -0.6843269  0.0059022  -115.944  &lt; 2e-16 ***\nDESTIN_SZQTSZ01      -1.2525523  0.0081381  -153.912  &lt; 2e-16 ***\nDESTIN_SZQTSZ02      -1.5681959  0.0069703  -224.982  &lt; 2e-16 ***\nDESTIN_SZQTSZ03      -0.7787760  0.0057643  -135.104  &lt; 2e-16 ***\nDESTIN_SZQTSZ04      -1.0473387  0.0060114  -174.226  &lt; 2e-16 ***\nDESTIN_SZQTSZ05      -0.8815205  0.0052731  -167.173  &lt; 2e-16 ***\nDESTIN_SZQTSZ06      -1.1493379  0.0057253  -200.746  &lt; 2e-16 ***\nDESTIN_SZQTSZ07      -1.5539842  0.0092974  -167.142  &lt; 2e-16 ***\nDESTIN_SZQTSZ08       0.0928777  0.0041608    22.322  &lt; 2e-16 ***\nDESTIN_SZQTSZ09      -0.3353896  0.0050415   -66.526  &lt; 2e-16 ***\nDESTIN_SZQTSZ10      -0.3990969  0.0046792   -85.291  &lt; 2e-16 ***\nDESTIN_SZQTSZ11      -0.0806971  0.0049649   -16.254  &lt; 2e-16 ***\nDESTIN_SZQTSZ12      -0.4606107  0.0060190   -76.527  &lt; 2e-16 ***\nDESTIN_SZQTSZ13       0.1940072  0.0042970    45.149  &lt; 2e-16 ***\nDESTIN_SZQTSZ14      -0.1783727  0.0050797   -35.114  &lt; 2e-16 ***\nDESTIN_SZQTSZ15       0.1084255  0.0059041    18.364  &lt; 2e-16 ***\nDESTIN_SZRCSZ01      -1.1732262  0.0060989  -192.368  &lt; 2e-16 ***\nDESTIN_SZRCSZ02      -2.2135068  0.0150343  -147.231  &lt; 2e-16 ***\nDESTIN_SZRCSZ03      -1.1395391  0.0079216  -143.852  &lt; 2e-16 ***\nDESTIN_SZRCSZ04      -2.3798289  0.0110853  -214.683  &lt; 2e-16 ***\nDESTIN_SZRCSZ05      -2.4891197  0.0115091  -216.275  &lt; 2e-16 ***\nDESTIN_SZRCSZ06      -2.0397389  0.0131477  -155.140  &lt; 2e-16 ***\nDESTIN_SZRCSZ08      -2.2566897  0.0126788  -177.990  &lt; 2e-16 ***\nDESTIN_SZRCSZ09      -1.4310004  0.0099334  -144.060  &lt; 2e-16 ***\nDESTIN_SZRCSZ10      -1.2078330  0.0057801  -208.963  &lt; 2e-16 ***\nDESTIN_SZRVSZ01      -2.0913758  0.0094479  -221.358  &lt; 2e-16 ***\nDESTIN_SZRVSZ02      -2.2166304  0.0123002  -180.211  &lt; 2e-16 ***\nDESTIN_SZRVSZ03      -2.4427627  0.0109800  -222.473  &lt; 2e-16 ***\nDESTIN_SZRVSZ04      -2.1091369  0.0151723  -139.012  &lt; 2e-16 ***\nDESTIN_SZRVSZ05      -2.0184883  0.0125160  -161.273  &lt; 2e-16 ***\nDESTIN_SZSBSZ01       0.0335638  0.0051219     6.553 5.64e-11 ***\nDESTIN_SZSBSZ02      -0.9435645  0.0066889  -141.064  &lt; 2e-16 ***\nDESTIN_SZSBSZ03       0.7576159  0.0037726   200.822  &lt; 2e-16 ***\nDESTIN_SZSBSZ04       0.3675652  0.0045548    80.699  &lt; 2e-16 ***\nDESTIN_SZSBSZ05      -0.6638955  0.0062550  -106.138  &lt; 2e-16 ***\nDESTIN_SZSBSZ06      -2.3082636  0.0211679  -109.046  &lt; 2e-16 ***\nDESTIN_SZSBSZ07      -0.1514545  0.0132983   -11.389  &lt; 2e-16 ***\nDESTIN_SZSBSZ08       1.8338179  0.0042436   432.136  &lt; 2e-16 ***\nDESTIN_SZSBSZ09       1.1022037  0.0043139   255.499  &lt; 2e-16 ***\nDESTIN_SZSESZ02      -0.0339087  0.0041744    -8.123 4.55e-16 ***\nDESTIN_SZSESZ03       0.7788795  0.0033616   231.702  &lt; 2e-16 ***\nDESTIN_SZSESZ04      -0.5240149  0.0049127  -106.664  &lt; 2e-16 ***\nDESTIN_SZSESZ05      -0.0686358  0.0041639   -16.484  &lt; 2e-16 ***\nDESTIN_SZSESZ06      -0.4266809  0.0050952   -83.742  &lt; 2e-16 ***\nDESTIN_SZSESZ07      -2.7407810  0.0200848  -136.461  &lt; 2e-16 ***\nDESTIN_SZSGSZ01      -0.2224302  0.0050154   -44.349  &lt; 2e-16 ***\nDESTIN_SZSGSZ02       0.1570660  0.0045272    34.694  &lt; 2e-16 ***\nDESTIN_SZSGSZ03      -0.2264829  0.0042946   -52.737  &lt; 2e-16 ***\nDESTIN_SZSGSZ04      -0.2252631  0.0043414   -51.888  &lt; 2e-16 ***\nDESTIN_SZSGSZ05      -1.8171433  0.0076843  -236.476  &lt; 2e-16 ***\nDESTIN_SZSGSZ06       0.5054953  0.0034431   146.813  &lt; 2e-16 ***\nDESTIN_SZSGSZ07      -0.3128598  0.0044256   -70.693  &lt; 2e-16 ***\nDESTIN_SZSISZ01      -1.4101423  0.0200736   -70.248  &lt; 2e-16 ***\nDESTIN_SZSKSZ01       0.1526154  0.0058959    25.885  &lt; 2e-16 ***\nDESTIN_SZSKSZ02       0.1211104  0.0059173    20.467  &lt; 2e-16 ***\nDESTIN_SZSKSZ03       0.2275540  0.0050553    45.013  &lt; 2e-16 ***\nDESTIN_SZSKSZ04      -0.3210274  0.0122955   -26.109  &lt; 2e-16 ***\nDESTIN_SZSKSZ05       0.3847096  0.0093083    41.330  &lt; 2e-16 ***\nDESTIN_SZSLSZ01      -0.1436252  0.0066352   -21.646  &lt; 2e-16 ***\nDESTIN_SZSLSZ04      -0.3148972  0.0055407   -56.833  &lt; 2e-16 ***\nDESTIN_SZSRSZ01      -1.5747785  0.0068734  -229.112  &lt; 2e-16 ***\nDESTIN_SZSRSZ02      -1.6885450  0.0085337  -197.868  &lt; 2e-16 ***\nDESTIN_SZSRSZ03      -1.6139711  0.0077304  -208.783  &lt; 2e-16 ***\nDESTIN_SZSVSZ01      -3.2184815  0.0556290   -57.856  &lt; 2e-16 ***\nDESTIN_SZTHSZ01      -2.6973210  0.0331414   -81.388  &lt; 2e-16 ***\nDESTIN_SZTHSZ03      -1.5390798  0.0185714   -82.874  &lt; 2e-16 ***\nDESTIN_SZTHSZ04      -2.1024995  0.0189657  -110.858  &lt; 2e-16 ***\nDESTIN_SZTHSZ06      -0.8460270  0.0105837   -79.937  &lt; 2e-16 ***\nDESTIN_SZTMSZ01       0.1402849  0.0045968    30.518  &lt; 2e-16 ***\nDESTIN_SZTMSZ02       1.7833663  0.0030328   588.028  &lt; 2e-16 ***\nDESTIN_SZTMSZ03       0.8754485  0.0034123   256.559  &lt; 2e-16 ***\nDESTIN_SZTMSZ04       0.9274501  0.0034956   265.316  &lt; 2e-16 ***\nDESTIN_SZTMSZ05       0.7226247  0.0043728   165.256  &lt; 2e-16 ***\nDESTIN_SZTNSZ01      -0.6457759  0.0048959  -131.902  &lt; 2e-16 ***\nDESTIN_SZTNSZ02      -1.4352096  0.0063876  -224.688  &lt; 2e-16 ***\nDESTIN_SZTNSZ03      -1.4383743  0.0078045  -184.300  &lt; 2e-16 ***\nDESTIN_SZTNSZ04      -0.9584041  0.0058061  -165.068  &lt; 2e-16 ***\nDESTIN_SZTPSZ01      -0.4238815  0.0047638   -88.980  &lt; 2e-16 ***\nDESTIN_SZTPSZ02       0.2302907  0.0034488    66.774  &lt; 2e-16 ***\nDESTIN_SZTPSZ03      -0.3633775  0.0048621   -74.736  &lt; 2e-16 ***\nDESTIN_SZTPSZ04      -1.5414713  0.0068258  -225.830  &lt; 2e-16 ***\nDESTIN_SZTPSZ05      -0.7861832  0.0051257  -153.379  &lt; 2e-16 ***\nDESTIN_SZTPSZ06      -0.2306047  0.0059194   -38.958  &lt; 2e-16 ***\nDESTIN_SZTPSZ07      -1.6386160  0.0093336  -175.561  &lt; 2e-16 ***\nDESTIN_SZTPSZ08      -1.3106086  0.0072787  -180.060  &lt; 2e-16 ***\nDESTIN_SZTPSZ09      -0.5340698  0.0053383  -100.045  &lt; 2e-16 ***\nDESTIN_SZTPSZ10      -0.6924296  0.0067313  -102.867  &lt; 2e-16 ***\nDESTIN_SZTPSZ11      -0.3158488  0.0044419   -71.107  &lt; 2e-16 ***\nDESTIN_SZTPSZ12      -0.7151984  0.0054086  -132.234  &lt; 2e-16 ***\nDESTIN_SZTSSZ01      -0.1883136  0.0187109   -10.064  &lt; 2e-16 ***\nDESTIN_SZTSSZ02       1.2720953  0.0077141   164.904  &lt; 2e-16 ***\nDESTIN_SZTSSZ03       2.0485658  0.0055935   366.243  &lt; 2e-16 ***\nDESTIN_SZTSSZ04       1.9173638  0.0058152   329.716  &lt; 2e-16 ***\nDESTIN_SZTSSZ05       2.0478832  0.0064392   318.035  &lt; 2e-16 ***\nDESTIN_SZTSSZ06       0.9996676  0.0109281    91.477  &lt; 2e-16 ***\nDESTIN_SZWCSZ01       1.6566251  0.0040593   408.110  &lt; 2e-16 ***\nDESTIN_SZWCSZ02      -0.1337229  0.0102862   -13.000  &lt; 2e-16 ***\nDESTIN_SZWCSZ03      -1.5155595  0.0236971   -63.956  &lt; 2e-16 ***\nDESTIN_SZWDSZ01       1.6938928  0.0032123   527.312  &lt; 2e-16 ***\nDESTIN_SZWDSZ02      -0.1405706  0.0050461   -27.857  &lt; 2e-16 ***\nDESTIN_SZWDSZ03       1.3476314  0.0033673   400.210  &lt; 2e-16 ***\nDESTIN_SZWDSZ04       0.2668170  0.0048596    54.905  &lt; 2e-16 ***\nDESTIN_SZWDSZ05       0.3366466  0.0045944    73.273  &lt; 2e-16 ***\nDESTIN_SZWDSZ06       0.6682970  0.0036977   180.731  &lt; 2e-16 ***\nDESTIN_SZWDSZ07       0.7006826  0.0057454   121.956  &lt; 2e-16 ***\nDESTIN_SZWDSZ08       0.9495662  0.0052819   179.778  &lt; 2e-16 ***\nDESTIN_SZWDSZ09       0.5927500  0.0042996   137.861  &lt; 2e-16 ***\nDESTIN_SZYSSZ01       1.3383786  0.0034421   388.830  &lt; 2e-16 ***\nDESTIN_SZYSSZ02       0.3970016  0.0043812    90.616  &lt; 2e-16 ***\nDESTIN_SZYSSZ03      -0.0171852  0.0047699    -3.603 0.000315 ***\nDESTIN_SZYSSZ04       0.1891383  0.0043696    43.285  &lt; 2e-16 ***\nDESTIN_SZYSSZ05      -1.4775725  0.0091390  -161.678  &lt; 2e-16 ***\nDESTIN_SZYSSZ06      -1.1722834  0.0071348  -164.305  &lt; 2e-16 ***\nDESTIN_SZYSSZ07      -0.7639462  0.0086822   -87.990  &lt; 2e-16 ***\nDESTIN_SZYSSZ08       0.7418545  0.0035755   207.485  &lt; 2e-16 ***\nDESTIN_SZYSSZ09       0.5270666  0.0036041   146.240  &lt; 2e-16 ***\nlog(ORIGIN_AGE25_64)  0.2391762  0.0001138  2101.866  &lt; 2e-16 ***\nlog(dist)            -0.6979943  0.0001106 -6309.151  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 88920223  on 20599  degrees of freedom\nResidual deviance: 37360814  on 20287  degrees of freedom\nAIC: 37490565\n\nNumber of Fisher Scoring iterations: 7\n\n\nWe can examine how the constraints hold for destinations this time.\n\n\nCode\nCalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)\n\n\n[1] 0.4941146"
  },
  {
    "objectID": "in-class/ice3.html#doubly-constrained",
    "href": "in-class/ice3.html#doubly-constrained",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "6.8 Doubly constrained",
    "text": "6.8 Doubly constrained\nIn this section, we will fit a doubly constrained SIM by using the code chunk below.\n\n\nCode\ndbcSIM &lt;- glm(formula = TRIPS ~ \n                ORIGIN_SZ + \n                DESTIN_SZ + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(dbcSIM)\n\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(dist), family = poisson(link = \"log\"), \n    data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)     12.4966116  0.0040561  3080.959  &lt; 2e-16 ***\nORIGIN_SZAMSZ02  1.0591892  0.0040650   260.566  &lt; 2e-16 ***\nORIGIN_SZAMSZ03  0.6130821  0.0041126   149.074  &lt; 2e-16 ***\nORIGIN_SZAMSZ04  0.2235346  0.0045736    48.875  &lt; 2e-16 ***\nORIGIN_SZAMSZ05  0.0825570  0.0052302    15.785  &lt; 2e-16 ***\nORIGIN_SZAMSZ06  0.6095542  0.0047519   128.276  &lt; 2e-16 ***\nORIGIN_SZAMSZ07 -0.8250814  0.0079464  -103.830  &lt; 2e-16 ***\nORIGIN_SZAMSZ08 -0.6897281  0.0075825   -90.963  &lt; 2e-16 ***\nORIGIN_SZAMSZ09  0.4219445  0.0049855    84.634  &lt; 2e-16 ***\nORIGIN_SZAMSZ10  0.1530905  0.0046439    32.966  &lt; 2e-16 ***\nORIGIN_SZAMSZ11 -1.5715669  0.0100585  -156.242  &lt; 2e-16 ***\nORIGIN_SZAMSZ12 -1.4782210  0.0096093  -153.832  &lt; 2e-16 ***\nORIGIN_SZBDSZ01  0.8344952  0.0040176   207.710  &lt; 2e-16 ***\nORIGIN_SZBDSZ02  0.4468657  0.0046179    96.769  &lt; 2e-16 ***\nORIGIN_SZBDSZ03  0.8343032  0.0041581   200.645  &lt; 2e-16 ***\nORIGIN_SZBDSZ04  1.4642964  0.0036148   405.086  &lt; 2e-16 ***\nORIGIN_SZBDSZ05  0.5926392  0.0040716   145.553  &lt; 2e-16 ***\nORIGIN_SZBDSZ06  0.8071845  0.0041884   192.721  &lt; 2e-16 ***\nORIGIN_SZBDSZ07 -0.6447845  0.0070076   -92.012  &lt; 2e-16 ***\nORIGIN_SZBDSZ08 -0.4406402  0.0065496   -67.277  &lt; 2e-16 ***\nORIGIN_SZBKSZ01 -0.0659897  0.0056721   -11.634  &lt; 2e-16 ***\nORIGIN_SZBKSZ02  0.6190497  0.0047238   131.049  &lt; 2e-16 ***\nORIGIN_SZBKSZ03  1.0464558  0.0044144   237.055  &lt; 2e-16 ***\nORIGIN_SZBKSZ04 -0.0297910  0.0053938    -5.523 3.33e-08 ***\nORIGIN_SZBKSZ05  0.1995998  0.0050725    39.349  &lt; 2e-16 ***\nORIGIN_SZBKSZ06  0.3290048  0.0053212    61.828  &lt; 2e-16 ***\nORIGIN_SZBKSZ07  0.8008732  0.0041208   194.348  &lt; 2e-16 ***\nORIGIN_SZBKSZ08  0.3487298  0.0047073    74.082  &lt; 2e-16 ***\nORIGIN_SZBKSZ09  0.1381079  0.0050300    27.457  &lt; 2e-16 ***\nORIGIN_SZBLSZ01 -1.7067776  0.0107886  -158.202  &lt; 2e-16 ***\nORIGIN_SZBLSZ02 -2.7850036  0.0160510  -173.510  &lt; 2e-16 ***\nORIGIN_SZBLSZ03 -5.0990517  0.0360711  -141.361  &lt; 2e-16 ***\nORIGIN_SZBLSZ04 -2.7788039  0.0197493  -140.704  &lt; 2e-16 ***\nORIGIN_SZBMSZ01  0.1187728  0.0045202    26.276  &lt; 2e-16 ***\nORIGIN_SZBMSZ02 -0.9648595  0.0062327  -154.805  &lt; 2e-16 ***\nORIGIN_SZBMSZ03 -0.1834133  0.0051936   -35.316  &lt; 2e-16 ***\nORIGIN_SZBMSZ04  0.2760770  0.0045626    60.509  &lt; 2e-16 ***\nORIGIN_SZBMSZ05 -1.0160883  0.0067990  -149.447  &lt; 2e-16 ***\nORIGIN_SZBMSZ06 -1.3097202  0.0108482  -120.732  &lt; 2e-16 ***\nORIGIN_SZBMSZ07 -0.3038126  0.0050057   -60.694  &lt; 2e-16 ***\nORIGIN_SZBMSZ08 -0.1441807  0.0049754   -28.979  &lt; 2e-16 ***\nORIGIN_SZBMSZ09 -0.7413387  0.0064916  -114.199  &lt; 2e-16 ***\nORIGIN_SZBMSZ10 -0.9399698  0.0072094  -130.380  &lt; 2e-16 ***\nORIGIN_SZBMSZ11 -0.3872043  0.0057653   -67.162  &lt; 2e-16 ***\nORIGIN_SZBMSZ12 -0.6531114  0.0078370   -83.337  &lt; 2e-16 ***\nORIGIN_SZBMSZ13  0.0636722  0.0049635    12.828  &lt; 2e-16 ***\nORIGIN_SZBMSZ14 -0.1469028  0.0058602   -25.068  &lt; 2e-16 ***\nORIGIN_SZBMSZ15  0.1334010  0.0053044    25.149  &lt; 2e-16 ***\nORIGIN_SZBMSZ16 -0.9831390  0.0067506  -145.638  &lt; 2e-16 ***\nORIGIN_SZBMSZ17 -1.3930684  0.0100778  -138.231  &lt; 2e-16 ***\nORIGIN_SZBPSZ01  0.5543338  0.0049890   111.111  &lt; 2e-16 ***\nORIGIN_SZBPSZ02  0.8629081  0.0055228   156.244  &lt; 2e-16 ***\nORIGIN_SZBPSZ03  1.0972928  0.0051870   211.547  &lt; 2e-16 ***\nORIGIN_SZBPSZ04  0.8278269  0.0044951   184.162  &lt; 2e-16 ***\nORIGIN_SZBPSZ05  0.6829375  0.0041755   163.557  &lt; 2e-16 ***\nORIGIN_SZBPSZ06 -0.8674808  0.0075597  -114.751  &lt; 2e-16 ***\nORIGIN_SZBPSZ07 -0.6918239  0.0074105   -93.358  &lt; 2e-16 ***\nORIGIN_SZBSSZ01  0.1057354  0.0047759    22.139  &lt; 2e-16 ***\nORIGIN_SZBSSZ02  0.3640223  0.0044333    82.110  &lt; 2e-16 ***\nORIGIN_SZBSSZ03  0.2145379  0.0043033    49.854  &lt; 2e-16 ***\nORIGIN_SZBTSZ01  0.0188860  0.0047841     3.948 7.89e-05 ***\nORIGIN_SZBTSZ02 -0.8633190  0.0068644  -125.768  &lt; 2e-16 ***\nORIGIN_SZBTSZ03 -0.1640418  0.0052268   -31.385  &lt; 2e-16 ***\nORIGIN_SZBTSZ04 -0.5694930  0.0090625   -62.840  &lt; 2e-16 ***\nORIGIN_SZBTSZ05 -1.4640361  0.0097757  -149.762  &lt; 2e-16 ***\nORIGIN_SZBTSZ06 -0.6600823  0.0067082   -98.400  &lt; 2e-16 ***\nORIGIN_SZBTSZ07 -1.6939543  0.0104882  -161.511  &lt; 2e-16 ***\nORIGIN_SZBTSZ08 -1.0542057  0.0080676  -130.671  &lt; 2e-16 ***\nORIGIN_SZCBSZ01 -2.9074101  0.0461652   -62.978  &lt; 2e-16 ***\nORIGIN_SZCCSZ01 -1.5993177  0.0119335  -134.019  &lt; 2e-16 ***\nORIGIN_SZCHSZ01 -1.1703372  0.0100471  -116.485  &lt; 2e-16 ***\nORIGIN_SZCHSZ02 -0.7772685  0.0070575  -110.133  &lt; 2e-16 ***\nORIGIN_SZCHSZ03 -0.6231419  0.0054350  -114.654  &lt; 2e-16 ***\nORIGIN_SZCKSZ01  0.5648311  0.0045197   124.971  &lt; 2e-16 ***\nORIGIN_SZCKSZ02  1.2686283  0.0046707   271.615  &lt; 2e-16 ***\nORIGIN_SZCKSZ03  0.9257081  0.0042287   218.908  &lt; 2e-16 ***\nORIGIN_SZCKSZ04  1.8271591  0.0044371   411.788  &lt; 2e-16 ***\nORIGIN_SZCKSZ05  1.6302421  0.0054119   301.233  &lt; 2e-16 ***\nORIGIN_SZCKSZ06  1.1137469  0.0060603   183.779  &lt; 2e-16 ***\nORIGIN_SZCLSZ01 -0.5070844  0.0062710   -80.862  &lt; 2e-16 ***\nORIGIN_SZCLSZ02 -1.2081232  0.0112861  -107.046  &lt; 2e-16 ***\nORIGIN_SZCLSZ03 -0.5137408  0.0065375   -78.583  &lt; 2e-16 ***\nORIGIN_SZCLSZ04  0.7776268  0.0041422   187.734  &lt; 2e-16 ***\nORIGIN_SZCLSZ05 -1.6266661  0.0114806  -141.688  &lt; 2e-16 ***\nORIGIN_SZCLSZ06  0.9035699  0.0038964   231.899  &lt; 2e-16 ***\nORIGIN_SZCLSZ07 -0.0696754  0.0049004   -14.218  &lt; 2e-16 ***\nORIGIN_SZCLSZ08  0.2469137  0.0056403    43.777  &lt; 2e-16 ***\nORIGIN_SZCLSZ09 -2.1299674  0.0145335  -146.555  &lt; 2e-16 ***\nORIGIN_SZDTSZ01 -1.4450722  0.0079647  -181.434  &lt; 2e-16 ***\nORIGIN_SZDTSZ02 -1.3939014  0.0074637  -186.757  &lt; 2e-16 ***\nORIGIN_SZDTSZ03 -2.4394004  0.0135280  -180.322  &lt; 2e-16 ***\nORIGIN_SZDTSZ04 -4.6572723  0.1768256   -26.338  &lt; 2e-16 ***\nORIGIN_SZDTSZ05 -2.8950583  0.0249100  -116.221  &lt; 2e-16 ***\nORIGIN_SZDTSZ06 -2.7742526  0.0184754  -150.159  &lt; 2e-16 ***\nORIGIN_SZDTSZ07 -1.5433376  0.0235496   -65.536  &lt; 2e-16 ***\nORIGIN_SZDTSZ08 -2.3599579  0.0120595  -195.694  &lt; 2e-16 ***\nORIGIN_SZDTSZ09 -2.6811593  0.0239657  -111.875  &lt; 2e-16 ***\nORIGIN_SZDTSZ10 -2.0506237  0.0127305  -161.080  &lt; 2e-16 ***\nORIGIN_SZDTSZ11 -2.0963489  0.0125222  -167.411  &lt; 2e-16 ***\nORIGIN_SZDTSZ12 -3.0477750  0.0258593  -117.860  &lt; 2e-16 ***\nORIGIN_SZDTSZ13 -2.0652921  0.0138673  -148.932  &lt; 2e-16 ***\nORIGIN_SZGLSZ01 -1.3670824  0.0078027  -175.206  &lt; 2e-16 ***\nORIGIN_SZGLSZ02  0.2835701  0.0044426    63.830  &lt; 2e-16 ***\nORIGIN_SZGLSZ03  0.0615525  0.0044253    13.909  &lt; 2e-16 ***\nORIGIN_SZGLSZ04  0.9877660  0.0037689   262.082  &lt; 2e-16 ***\nORIGIN_SZGLSZ05  0.6019388  0.0039569   152.125  &lt; 2e-16 ***\nORIGIN_SZHGSZ01  0.1989262  0.0043547    45.681  &lt; 2e-16 ***\nORIGIN_SZHGSZ02  0.6818570  0.0042130   161.845  &lt; 2e-16 ***\nORIGIN_SZHGSZ03  0.5236155  0.0045298   115.593  &lt; 2e-16 ***\nORIGIN_SZHGSZ04  1.0090032  0.0039059   258.328  &lt; 2e-16 ***\nORIGIN_SZHGSZ05  1.3345356  0.0038615   345.604  &lt; 2e-16 ***\nORIGIN_SZHGSZ06  0.1110314  0.0048343    22.968  &lt; 2e-16 ***\nORIGIN_SZHGSZ07  0.5727958  0.0041368   138.464  &lt; 2e-16 ***\nORIGIN_SZHGSZ08  0.1603112  0.0047328    33.872  &lt; 2e-16 ***\nORIGIN_SZHGSZ09 -0.6406435  0.0061647  -103.921  &lt; 2e-16 ***\nORIGIN_SZHGSZ10 -3.2187296  0.0407331   -79.020  &lt; 2e-16 ***\nORIGIN_SZJESZ01  0.4863544  0.0045983   105.768  &lt; 2e-16 ***\nORIGIN_SZJESZ02  0.3891810  0.0045629    85.293  &lt; 2e-16 ***\nORIGIN_SZJESZ03  0.3693841  0.0048216    76.610  &lt; 2e-16 ***\nORIGIN_SZJESZ04 -0.9603400  0.0074627  -128.686  &lt; 2e-16 ***\nORIGIN_SZJESZ05 -2.0532793  0.0125837  -163.170  &lt; 2e-16 ***\nORIGIN_SZJESZ06  0.2246801  0.0044615    50.359  &lt; 2e-16 ***\nORIGIN_SZJESZ07 -1.6331881  0.0098351  -166.058  &lt; 2e-16 ***\nORIGIN_SZJESZ08 -0.8499914  0.0087262   -97.407  &lt; 2e-16 ***\nORIGIN_SZJESZ09  0.5248542  0.0045997   114.107  &lt; 2e-16 ***\nORIGIN_SZJESZ10 -2.6985608  0.0178825  -150.905  &lt; 2e-16 ***\nORIGIN_SZJESZ11 -2.9349376  0.0181710  -161.517  &lt; 2e-16 ***\nORIGIN_SZJWSZ01  0.5047866  0.0059818    84.387  &lt; 2e-16 ***\nORIGIN_SZJWSZ02  1.0282720  0.0042063   244.458  &lt; 2e-16 ***\nORIGIN_SZJWSZ03  1.1764945  0.0040387   291.308  &lt; 2e-16 ***\nORIGIN_SZJWSZ04  0.9876482  0.0041158   239.965  &lt; 2e-16 ***\nORIGIN_SZJWSZ05 -1.7693210  0.0112643  -157.074  &lt; 2e-16 ***\nORIGIN_SZJWSZ06 -1.1131983  0.0089465  -124.428  &lt; 2e-16 ***\nORIGIN_SZJWSZ07 -1.8273391  0.0196746   -92.878  &lt; 2e-16 ***\nORIGIN_SZJWSZ08  2.0483105  0.0040450   506.384  &lt; 2e-16 ***\nORIGIN_SZJWSZ09  1.4089728  0.0037777   372.969  &lt; 2e-16 ***\nORIGIN_SZKLSZ01  0.3013947  0.0043139    69.866  &lt; 2e-16 ***\nORIGIN_SZKLSZ02 -0.2605614  0.0053519   -48.686  &lt; 2e-16 ***\nORIGIN_SZKLSZ03 -0.3382197  0.0054298   -62.289  &lt; 2e-16 ***\nORIGIN_SZKLSZ04 -1.3122170  0.0075695  -173.355  &lt; 2e-16 ***\nORIGIN_SZKLSZ05 -0.2861753  0.0064395   -44.441  &lt; 2e-16 ***\nORIGIN_SZKLSZ06 -0.3291744  0.0050850   -64.734  &lt; 2e-16 ***\nORIGIN_SZKLSZ07 -0.6755728  0.0066047  -102.287  &lt; 2e-16 ***\nORIGIN_SZKLSZ08 -0.7458262  0.0058126  -128.311  &lt; 2e-16 ***\nORIGIN_SZKLSZ09 -1.2043757  0.0072278  -166.631  &lt; 2e-16 ***\nORIGIN_SZLKSZ01 -2.4758853  0.0330014   -75.024  &lt; 2e-16 ***\nORIGIN_SZMDSZ01 -1.6711363  0.0233340   -71.618  &lt; 2e-16 ***\nORIGIN_SZMDSZ02 -0.9889661  0.0100548   -98.357  &lt; 2e-16 ***\nORIGIN_SZMDSZ03 -1.3831414  0.0145172   -95.276  &lt; 2e-16 ***\nORIGIN_SZMPSZ01 -0.6396094  0.0064787   -98.725  &lt; 2e-16 ***\nORIGIN_SZMPSZ02 -0.4095659  0.0057738   -70.935  &lt; 2e-16 ***\nORIGIN_SZMPSZ03  0.4067326  0.0043621    93.243  &lt; 2e-16 ***\nORIGIN_SZMSSZ01 -4.6286722  0.2589985   -17.871  &lt; 2e-16 ***\nORIGIN_SZMUSZ01 -0.9261260  0.0063668  -145.463  &lt; 2e-16 ***\nORIGIN_SZMUSZ02 -2.9018719  0.0181864  -159.562  &lt; 2e-16 ***\nORIGIN_SZMUSZ03 -1.5258043  0.0075185  -202.939  &lt; 2e-16 ***\nORIGIN_SZNTSZ01 -2.4615493  0.0264980   -92.896  &lt; 2e-16 ***\nORIGIN_SZNTSZ02 -2.2844568  0.0153859  -148.477  &lt; 2e-16 ***\nORIGIN_SZNTSZ03 -0.6904494  0.0069139   -99.864  &lt; 2e-16 ***\nORIGIN_SZNTSZ05 -2.6611331  0.0381505   -69.754  &lt; 2e-16 ***\nORIGIN_SZNTSZ06 -2.9172586  0.0418365   -69.730  &lt; 2e-16 ***\nORIGIN_SZNVSZ01  0.8288778  0.0039283   211.002  &lt; 2e-16 ***\nORIGIN_SZNVSZ02 -0.3635060  0.0054460   -66.747  &lt; 2e-16 ***\nORIGIN_SZNVSZ03 -0.9540457  0.0065275  -146.158  &lt; 2e-16 ***\nORIGIN_SZNVSZ04 -1.1194896  0.0079620  -140.603  &lt; 2e-16 ***\nORIGIN_SZNVSZ05 -2.3859067  0.0144101  -165.572  &lt; 2e-16 ***\nORIGIN_SZORSZ01 -3.0405815  0.0363234   -83.709  &lt; 2e-16 ***\nORIGIN_SZORSZ02 -1.1401169  0.0065821  -173.216  &lt; 2e-16 ***\nORIGIN_SZORSZ03 -1.4185747  0.0075865  -186.986  &lt; 2e-16 ***\nORIGIN_SZOTSZ01 -1.4247675  0.0082304  -173.111  &lt; 2e-16 ***\nORIGIN_SZOTSZ02 -1.6603899  0.0095486  -173.888  &lt; 2e-16 ***\nORIGIN_SZOTSZ03 -0.4211957  0.0058304   -72.241  &lt; 2e-16 ***\nORIGIN_SZOTSZ04 -0.4994803  0.0094838   -52.667  &lt; 2e-16 ***\nORIGIN_SZPGSZ01  0.7071166  0.0114508    61.753  &lt; 2e-16 ***\nORIGIN_SZPGSZ02 -0.2123053  0.0060914   -34.853  &lt; 2e-16 ***\nORIGIN_SZPGSZ03  1.0455245  0.0040271   259.620  &lt; 2e-16 ***\nORIGIN_SZPGSZ04  1.1931061  0.0040334   295.807  &lt; 2e-16 ***\nORIGIN_SZPGSZ05  0.6363361  0.0050325   126.445  &lt; 2e-16 ***\nORIGIN_SZPLSZ01 -0.7135790  0.0086872   -82.142  &lt; 2e-16 ***\nORIGIN_SZPLSZ02 -1.1548170  0.0121923   -94.717  &lt; 2e-16 ***\nORIGIN_SZPLSZ03 -3.4630960  0.0341189  -101.501  &lt; 2e-16 ***\nORIGIN_SZPLSZ04 -3.3324952  0.0291243  -114.423  &lt; 2e-16 ***\nORIGIN_SZPLSZ05 -2.2496904  0.0180741  -124.470  &lt; 2e-16 ***\nORIGIN_SZPNSZ01  0.9405460  0.0049059   191.716  &lt; 2e-16 ***\nORIGIN_SZPNSZ02 -1.8465328  0.0112963  -163.463  &lt; 2e-16 ***\nORIGIN_SZPNSZ03 -2.9089806  0.0180972  -160.742  &lt; 2e-16 ***\nORIGIN_SZPNSZ04 -4.7301707  0.0253115  -186.878  &lt; 2e-16 ***\nORIGIN_SZPNSZ05 -3.6925145  0.0221411  -166.772  &lt; 2e-16 ***\nORIGIN_SZPRSZ01 -0.5249358  0.0098222   -53.444  &lt; 2e-16 ***\nORIGIN_SZPRSZ02  1.0782257  0.0041891   257.391  &lt; 2e-16 ***\nORIGIN_SZPRSZ03  0.4977909  0.0042287   117.716  &lt; 2e-16 ***\nORIGIN_SZPRSZ04 -0.2699769  0.0065625   -41.139  &lt; 2e-16 ***\nORIGIN_SZPRSZ05  1.1812990  0.0040043   295.005  &lt; 2e-16 ***\nORIGIN_SZPRSZ06 -0.8901878  0.0072810  -122.262  &lt; 2e-16 ***\nORIGIN_SZPRSZ07 -2.5604616  0.0178808  -143.196  &lt; 2e-16 ***\nORIGIN_SZPRSZ08  0.0890258  0.0054740    16.263  &lt; 2e-16 ***\nORIGIN_SZQTSZ01  0.1052862  0.0059887    17.581  &lt; 2e-16 ***\nORIGIN_SZQTSZ02 -0.4514716  0.0056346   -80.125  &lt; 2e-16 ***\nORIGIN_SZQTSZ03  0.1069646  0.0050689    21.102  &lt; 2e-16 ***\nORIGIN_SZQTSZ04 -0.9495089  0.0068054  -139.524  &lt; 2e-16 ***\nORIGIN_SZQTSZ05  0.0817446  0.0051042    16.015  &lt; 2e-16 ***\nORIGIN_SZQTSZ06 -0.3185567  0.0058467   -54.485  &lt; 2e-16 ***\nORIGIN_SZQTSZ07 -1.2164671  0.0083631  -145.457  &lt; 2e-16 ***\nORIGIN_SZQTSZ08 -0.2117561  0.0052930   -40.007  &lt; 2e-16 ***\nORIGIN_SZQTSZ09 -0.4605864  0.0059518   -77.386  &lt; 2e-16 ***\nORIGIN_SZQTSZ10 -0.3875802  0.0059267   -65.396  &lt; 2e-16 ***\nORIGIN_SZQTSZ11 -1.5553875  0.0091487  -170.013  &lt; 2e-16 ***\nORIGIN_SZQTSZ12 -1.1245888  0.0087130  -129.070  &lt; 2e-16 ***\nORIGIN_SZQTSZ13 -0.3370189  0.0055855   -60.338  &lt; 2e-16 ***\nORIGIN_SZQTSZ14 -1.4600821  0.0084380  -173.038  &lt; 2e-16 ***\nORIGIN_SZQTSZ15 -1.0779884  0.0095421  -112.972  &lt; 2e-16 ***\nORIGIN_SZRCSZ01 -0.3995523  0.0059608   -67.030  &lt; 2e-16 ***\nORIGIN_SZRCSZ02 -1.7210758  0.0157108  -109.547  &lt; 2e-16 ***\nORIGIN_SZRCSZ03 -0.9142324  0.0079829  -114.523  &lt; 2e-16 ***\nORIGIN_SZRCSZ04 -2.1007964  0.0123473  -170.142  &lt; 2e-16 ***\nORIGIN_SZRCSZ05 -2.1111645  0.0136762  -154.368  &lt; 2e-16 ***\nORIGIN_SZRCSZ06 -0.2410605  0.0078163   -30.841  &lt; 2e-16 ***\nORIGIN_SZRCSZ08 -2.3221068  0.0180478  -128.665  &lt; 2e-16 ***\nORIGIN_SZRCSZ09 -1.6764376  0.0131884  -127.115  &lt; 2e-16 ***\nORIGIN_SZRCSZ10 -1.5462202  0.0078842  -196.117  &lt; 2e-16 ***\nORIGIN_SZRVSZ01 -2.4370943  0.0139860  -174.253  &lt; 2e-16 ***\nORIGIN_SZRVSZ02 -0.6955044  0.0075706   -91.870  &lt; 2e-16 ***\nORIGIN_SZRVSZ03 -1.4716987  0.0113978  -129.122  &lt; 2e-16 ***\nORIGIN_SZRVSZ04 -1.7860365  0.0173663  -102.845  &lt; 2e-16 ***\nORIGIN_SZRVSZ05 -1.6579974  0.0137611  -120.484  &lt; 2e-16 ***\nORIGIN_SZSBSZ01  0.9359404  0.0052713   177.555  &lt; 2e-16 ***\nORIGIN_SZSBSZ02 -0.6319837  0.0070303   -89.894  &lt; 2e-16 ***\nORIGIN_SZSBSZ03  0.6478118  0.0043856   147.713  &lt; 2e-16 ***\nORIGIN_SZSBSZ04  0.2861251  0.0051894    55.136  &lt; 2e-16 ***\nORIGIN_SZSBSZ05 -0.0305640  0.0060362    -5.063 4.12e-07 ***\nORIGIN_SZSBSZ06 -0.9452297  0.0144662   -65.341  &lt; 2e-16 ***\nORIGIN_SZSBSZ07 -0.1378715  0.0104423   -13.203  &lt; 2e-16 ***\nORIGIN_SZSBSZ08 -2.0844986  0.0100784  -206.828  &lt; 2e-16 ***\nORIGIN_SZSBSZ09 -1.0748495  0.0075662  -142.059  &lt; 2e-16 ***\nORIGIN_SZSESZ02  1.1930123  0.0039974   298.447  &lt; 2e-16 ***\nORIGIN_SZSESZ03  1.2049480  0.0037977   317.281  &lt; 2e-16 ***\nORIGIN_SZSESZ04  1.1777460  0.0043780   269.015  &lt; 2e-16 ***\nORIGIN_SZSESZ05 -0.0832367  0.0052033   -15.997  &lt; 2e-16 ***\nORIGIN_SZSESZ06  1.1917968  0.0041416   287.763  &lt; 2e-16 ***\nORIGIN_SZSESZ07 -1.9359736  0.0150834  -128.351  &lt; 2e-16 ***\nORIGIN_SZSGSZ01 -0.8151091  0.0075068  -108.583  &lt; 2e-16 ***\nORIGIN_SZSGSZ02 -1.2118572  0.0087857  -137.936  &lt; 2e-16 ***\nORIGIN_SZSGSZ03  0.3946369  0.0046327    85.186  &lt; 2e-16 ***\nORIGIN_SZSGSZ04  0.3465861  0.0043488    79.697  &lt; 2e-16 ***\nORIGIN_SZSGSZ05 -1.4931536  0.0090229  -165.484  &lt; 2e-16 ***\nORIGIN_SZSGSZ06  0.3553026  0.0041346    85.933  &lt; 2e-16 ***\nORIGIN_SZSGSZ07 -0.4462510  0.0054204   -82.328  &lt; 2e-16 ***\nORIGIN_SZSKSZ01 -0.1753946  0.0075714   -23.165  &lt; 2e-16 ***\nORIGIN_SZSKSZ02  0.3779065  0.0056560    66.815  &lt; 2e-16 ***\nORIGIN_SZSKSZ03 -0.3212578  0.0066773   -48.112  &lt; 2e-16 ***\nORIGIN_SZSKSZ04 -1.8581585  0.0218870   -84.898  &lt; 2e-16 ***\nORIGIN_SZSKSZ05 -1.1793751  0.0150179   -78.531  &lt; 2e-16 ***\nORIGIN_SZSLSZ01 -2.9381199  0.0269160  -109.159  &lt; 2e-16 ***\nORIGIN_SZSLSZ04 -0.3155847  0.0063166   -49.961  &lt; 2e-16 ***\nORIGIN_SZSRSZ01 -1.2273144  0.0081709  -150.205  &lt; 2e-16 ***\nORIGIN_SZSRSZ02 -1.6090154  0.0085987  -187.123  &lt; 2e-16 ***\nORIGIN_SZSRSZ03 -2.4412686  0.0176806  -138.076  &lt; 2e-16 ***\nORIGIN_SZSVSZ01 -3.1129619  0.0690021   -45.114  &lt; 2e-16 ***\nORIGIN_SZTHSZ01 -2.1289530  0.0364590   -58.393  &lt; 2e-16 ***\nORIGIN_SZTHSZ03 -1.0801473  0.0166302   -64.951  &lt; 2e-16 ***\nORIGIN_SZTHSZ04 -1.8516215  0.0253269   -73.109  &lt; 2e-16 ***\nORIGIN_SZTHSZ06 -1.7604688  0.0151913  -115.887  &lt; 2e-16 ***\nORIGIN_SZTMSZ01  0.5635170  0.0046859   120.259  &lt; 2e-16 ***\nORIGIN_SZTMSZ02  1.6636315  0.0035612   467.149  &lt; 2e-16 ***\nORIGIN_SZTMSZ03  1.1602012  0.0038038   305.011  &lt; 2e-16 ***\nORIGIN_SZTMSZ04  0.3911070  0.0044252    88.382  &lt; 2e-16 ***\nORIGIN_SZTMSZ05 -0.8437744  0.0068915  -122.438  &lt; 2e-16 ***\nORIGIN_SZTNSZ01 -1.0103187  0.0070226  -143.866  &lt; 2e-16 ***\nORIGIN_SZTNSZ02 -0.8189520  0.0066363  -123.406  &lt; 2e-16 ***\nORIGIN_SZTNSZ03 -1.2658087  0.0088503  -143.024  &lt; 2e-16 ***\nORIGIN_SZTNSZ04 -0.3636192  0.0061634   -58.996  &lt; 2e-16 ***\nORIGIN_SZTPSZ01 -0.4389373  0.0056104   -78.236  &lt; 2e-16 ***\nORIGIN_SZTPSZ02  0.5473522  0.0039616   138.165  &lt; 2e-16 ***\nORIGIN_SZTPSZ03 -0.3632655  0.0054591   -66.543  &lt; 2e-16 ***\nORIGIN_SZTPSZ04  0.0466458  0.0051345     9.085  &lt; 2e-16 ***\nORIGIN_SZTPSZ05  0.0824553  0.0054100    15.241  &lt; 2e-16 ***\nORIGIN_SZTPSZ06  0.7224262  0.0060194   120.017  &lt; 2e-16 ***\nORIGIN_SZTPSZ07 -0.1169830  0.0058182   -20.106  &lt; 2e-16 ***\nORIGIN_SZTPSZ08 -0.4950291  0.0076320   -64.862  &lt; 2e-16 ***\nORIGIN_SZTPSZ09 -0.4442238  0.0058145   -76.400  &lt; 2e-16 ***\nORIGIN_SZTPSZ10 -0.3393678  0.0062513   -54.287  &lt; 2e-16 ***\nORIGIN_SZTPSZ11  0.2870061  0.0047070    60.974  &lt; 2e-16 ***\nORIGIN_SZTPSZ12 -0.4042238  0.0056796   -71.172  &lt; 2e-16 ***\nORIGIN_SZTSSZ01 -3.9410612  0.0511556   -77.041  &lt; 2e-16 ***\nORIGIN_SZTSSZ02 -0.0022343  0.0082819    -0.270 0.787332    \nORIGIN_SZTSSZ03 -0.2704983  0.0082595   -32.750  &lt; 2e-16 ***\nORIGIN_SZTSSZ04 -0.5507017  0.0085288   -64.570  &lt; 2e-16 ***\nORIGIN_SZTSSZ05 -2.5931745  0.0136983  -189.306  &lt; 2e-16 ***\nORIGIN_SZTSSZ06 -2.7760391  0.0207494  -133.789  &lt; 2e-16 ***\nORIGIN_SZWCSZ01 -0.5078672  0.0067651   -75.072  &lt; 2e-16 ***\nORIGIN_SZWCSZ02 -2.5299208  0.0269186   -93.984  &lt; 2e-16 ***\nORIGIN_SZWCSZ03 -4.6346771  0.1291550   -35.885  &lt; 2e-16 ***\nORIGIN_SZWDSZ01  0.8541738  0.0039214   217.823  &lt; 2e-16 ***\nORIGIN_SZWDSZ02  1.0329006  0.0043848   235.565  &lt; 2e-16 ***\nORIGIN_SZWDSZ03  1.6522935  0.0040199   411.030  &lt; 2e-16 ***\nORIGIN_SZWDSZ04  1.2237322  0.0047769   256.179  &lt; 2e-16 ***\nORIGIN_SZWDSZ05  0.5694626  0.0046160   123.367  &lt; 2e-16 ***\nORIGIN_SZWDSZ06  0.9566450  0.0044185   216.509  &lt; 2e-16 ***\nORIGIN_SZWDSZ07 -0.3909105  0.0072005   -54.289  &lt; 2e-16 ***\nORIGIN_SZWDSZ08 -0.6818307  0.0068347   -99.760  &lt; 2e-16 ***\nORIGIN_SZWDSZ09  1.3698988  0.0043385   315.755  &lt; 2e-16 ***\nORIGIN_SZYSSZ01 -0.3747111  0.0050359   -74.409  &lt; 2e-16 ***\nORIGIN_SZYSSZ02  1.0086870  0.0047931   210.447  &lt; 2e-16 ***\nORIGIN_SZYSSZ03  2.2187630  0.0040347   549.927  &lt; 2e-16 ***\nORIGIN_SZYSSZ04  0.9550260  0.0041370   230.848  &lt; 2e-16 ***\nORIGIN_SZYSSZ05  0.4237737  0.0050436    84.022  &lt; 2e-16 ***\nORIGIN_SZYSSZ06 -0.7523568  0.0089087   -84.452  &lt; 2e-16 ***\nORIGIN_SZYSSZ07 -0.6693863  0.0089472   -74.815  &lt; 2e-16 ***\nORIGIN_SZYSSZ08 -0.3390729  0.0056920   -59.570  &lt; 2e-16 ***\nORIGIN_SZYSSZ09  1.2303208  0.0039904   308.319  &lt; 2e-16 ***\nDESTIN_SZAMSZ02  0.0211124  0.0039723     5.315 1.07e-07 ***\nDESTIN_SZAMSZ03  0.2839025  0.0037637    75.432  &lt; 2e-16 ***\nDESTIN_SZAMSZ04 -0.8165674  0.0055346  -147.540  &lt; 2e-16 ***\nDESTIN_SZAMSZ05 -0.7659330  0.0053350  -143.567  &lt; 2e-16 ***\nDESTIN_SZAMSZ06 -0.6388567  0.0053423  -119.585  &lt; 2e-16 ***\nDESTIN_SZAMSZ07 -1.5321725  0.0089961  -170.315  &lt; 2e-16 ***\nDESTIN_SZAMSZ08 -0.7453204  0.0058831  -126.688  &lt; 2e-16 ***\nDESTIN_SZAMSZ09 -0.8793592  0.0055615  -158.117  &lt; 2e-16 ***\nDESTIN_SZAMSZ10  0.1891741  0.0039530    47.856  &lt; 2e-16 ***\nDESTIN_SZAMSZ11  0.0332095  0.0069001     4.813 1.49e-06 ***\nDESTIN_SZAMSZ12 -0.5193169  0.0061739   -84.115  &lt; 2e-16 ***\nDESTIN_SZBDSZ01  0.5385493  0.0035894   150.037  &lt; 2e-16 ***\nDESTIN_SZBDSZ02 -0.2415771  0.0045728   -52.829  &lt; 2e-16 ***\nDESTIN_SZBDSZ03 -0.0081489  0.0040277    -2.023 0.043049 *  \nDESTIN_SZBDSZ04  0.8356118  0.0033244   251.357  &lt; 2e-16 ***\nDESTIN_SZBDSZ05  0.5067379  0.0036518   138.762  &lt; 2e-16 ***\nDESTIN_SZBDSZ06  0.1824389  0.0040113    45.481  &lt; 2e-16 ***\nDESTIN_SZBDSZ07 -0.5677255  0.0080202   -70.787  &lt; 2e-16 ***\nDESTIN_SZBDSZ08 -1.6247163  0.0091349  -177.858  &lt; 2e-16 ***\nDESTIN_SZBKSZ01 -1.0749282  0.0057530  -186.847  &lt; 2e-16 ***\nDESTIN_SZBKSZ02 -0.2684365  0.0048881   -54.916  &lt; 2e-16 ***\nDESTIN_SZBKSZ03 -0.7390434  0.0050911  -145.164  &lt; 2e-16 ***\nDESTIN_SZBKSZ04  0.0429856  0.0045034     9.545  &lt; 2e-16 ***\nDESTIN_SZBKSZ05 -0.5689285  0.0051211  -111.095  &lt; 2e-16 ***\nDESTIN_SZBKSZ06 -0.9666944  0.0056965  -169.701  &lt; 2e-16 ***\nDESTIN_SZBKSZ07  0.2475196  0.0038359    64.528  &lt; 2e-16 ***\nDESTIN_SZBKSZ08 -1.0993626  0.0064539  -170.340  &lt; 2e-16 ***\nDESTIN_SZBKSZ09 -0.2010393  0.0046881   -42.883  &lt; 2e-16 ***\nDESTIN_SZBLSZ01 -0.5082231  0.0060108   -84.552  &lt; 2e-16 ***\nDESTIN_SZBLSZ02  0.5822129  0.0060119    96.843  &lt; 2e-16 ***\nDESTIN_SZBLSZ03  1.8426939  0.0066529   276.974  &lt; 2e-16 ***\nDESTIN_SZBLSZ04  0.0177787  0.0108489     1.639 0.101265    \nDESTIN_SZBMSZ01  0.0231158  0.0041699     5.544 2.96e-08 ***\nDESTIN_SZBMSZ02 -0.1955840  0.0044197   -44.253  &lt; 2e-16 ***\nDESTIN_SZBMSZ03 -0.4984387  0.0053297   -93.521  &lt; 2e-16 ***\nDESTIN_SZBMSZ04 -0.2295275  0.0046250   -49.628  &lt; 2e-16 ***\nDESTIN_SZBMSZ05 -0.3617358  0.0054770   -66.047  &lt; 2e-16 ***\nDESTIN_SZBMSZ06 -1.1298956  0.0092853  -121.687  &lt; 2e-16 ***\nDESTIN_SZBMSZ07  0.2424339  0.0040488    59.878  &lt; 2e-16 ***\nDESTIN_SZBMSZ08 -0.7430928  0.0054447  -136.481  &lt; 2e-16 ***\nDESTIN_SZBMSZ09 -1.5047569  0.0085633  -175.721  &lt; 2e-16 ***\nDESTIN_SZBMSZ10 -1.1359762  0.0071437  -159.018  &lt; 2e-16 ***\nDESTIN_SZBMSZ11 -1.1661030  0.0066112  -176.383  &lt; 2e-16 ***\nDESTIN_SZBMSZ12 -0.5714995  0.0070389   -81.191  &lt; 2e-16 ***\nDESTIN_SZBMSZ13 -0.0101903  0.0044776    -2.276 0.022856 *  \nDESTIN_SZBMSZ14 -0.6468292  0.0070776   -91.391  &lt; 2e-16 ***\nDESTIN_SZBMSZ15 -0.8575821  0.0062706  -136.762  &lt; 2e-16 ***\nDESTIN_SZBMSZ16 -1.1407169  0.0064702  -176.302  &lt; 2e-16 ***\nDESTIN_SZBMSZ17 -1.2126576  0.0075834  -159.909  &lt; 2e-16 ***\nDESTIN_SZBPSZ01 -0.7582981  0.0050666  -149.666  &lt; 2e-16 ***\nDESTIN_SZBPSZ02 -1.7069485  0.0080434  -212.218  &lt; 2e-16 ***\nDESTIN_SZBPSZ03 -1.5417053  0.0075932  -203.037  &lt; 2e-16 ***\nDESTIN_SZBPSZ04 -0.8858738  0.0055939  -158.365  &lt; 2e-16 ***\nDESTIN_SZBPSZ05  0.3331327  0.0037543    88.733  &lt; 2e-16 ***\nDESTIN_SZBPSZ06 -0.6141779  0.0067549   -90.923  &lt; 2e-16 ***\nDESTIN_SZBPSZ07 -0.3939970  0.0069045   -57.064  &lt; 2e-16 ***\nDESTIN_SZBSSZ01  0.1218520  0.0041264    29.530  &lt; 2e-16 ***\nDESTIN_SZBSSZ02 -0.6330208  0.0047460  -133.380  &lt; 2e-16 ***\nDESTIN_SZBSSZ03  0.3019006  0.0036535    82.633  &lt; 2e-16 ***\nDESTIN_SZBTSZ01  0.2642613  0.0039100    67.585  &lt; 2e-16 ***\nDESTIN_SZBTSZ02 -0.4948031  0.0058013   -85.292  &lt; 2e-16 ***\nDESTIN_SZBTSZ03  0.0840505  0.0045501    18.472  &lt; 2e-16 ***\nDESTIN_SZBTSZ04 -1.1158583  0.0091046  -122.560  &lt; 2e-16 ***\nDESTIN_SZBTSZ05 -0.3057947  0.0061758   -49.515  &lt; 2e-16 ***\nDESTIN_SZBTSZ06 -0.5868414  0.0056607  -103.670  &lt; 2e-16 ***\nDESTIN_SZBTSZ07 -1.3990897  0.0085073  -164.458  &lt; 2e-16 ***\nDESTIN_SZBTSZ08 -0.6229617  0.0075045   -83.012  &lt; 2e-16 ***\nDESTIN_SZCBSZ01 -5.3482386  0.2582193   -20.712  &lt; 2e-16 ***\nDESTIN_SZCCSZ01 -0.5127489  0.0063899   -80.244  &lt; 2e-16 ***\nDESTIN_SZCHSZ01 -0.9981867  0.0077439  -128.900  &lt; 2e-16 ***\nDESTIN_SZCHSZ02  0.0635800  0.0048894    13.004  &lt; 2e-16 ***\nDESTIN_SZCHSZ03  1.4572250  0.0036058   404.130  &lt; 2e-16 ***\nDESTIN_SZCKSZ01 -0.4759356  0.0047536  -100.122  &lt; 2e-16 ***\nDESTIN_SZCKSZ02 -0.9358143  0.0051724  -180.925  &lt; 2e-16 ***\nDESTIN_SZCKSZ03  0.2998466  0.0038435    78.013  &lt; 2e-16 ***\nDESTIN_SZCKSZ04 -1.5080577  0.0060184  -250.575  &lt; 2e-16 ***\nDESTIN_SZCKSZ05 -1.2133803  0.0067839  -178.862  &lt; 2e-16 ***\nDESTIN_SZCKSZ06  0.0434573  0.0056673     7.668 1.75e-14 ***\nDESTIN_SZCLSZ01  0.3157994  0.0044183    71.476  &lt; 2e-16 ***\nDESTIN_SZCLSZ02 -1.9602455  0.0117882  -166.288  &lt; 2e-16 ***\nDESTIN_SZCLSZ03 -0.7971860  0.0067399  -118.279  &lt; 2e-16 ***\nDESTIN_SZCLSZ04  0.0274389  0.0041308     6.642 3.08e-11 ***\nDESTIN_SZCLSZ05 -0.6904606  0.0070195   -98.364  &lt; 2e-16 ***\nDESTIN_SZCLSZ06  0.0716179  0.0039081    18.326  &lt; 2e-16 ***\nDESTIN_SZCLSZ07 -0.3958889  0.0048825   -81.082  &lt; 2e-16 ***\nDESTIN_SZCLSZ08 -0.3482242  0.0055653   -62.570  &lt; 2e-16 ***\nDESTIN_SZCLSZ09  0.3555632  0.0058816    60.454  &lt; 2e-16 ***\nDESTIN_SZDTSZ01 -0.5391452  0.0049347  -109.256  &lt; 2e-16 ***\nDESTIN_SZDTSZ02 -0.8194433  0.0048723  -168.183  &lt; 2e-16 ***\nDESTIN_SZDTSZ03 -1.0169010  0.0056473  -180.069  &lt; 2e-16 ***\nDESTIN_SZDTSZ04 -0.5297146  0.0126795   -41.777  &lt; 2e-16 ***\nDESTIN_SZDTSZ05 -0.6473759  0.0088807   -72.897  &lt; 2e-16 ***\nDESTIN_SZDTSZ06 -0.8617369  0.0057339  -150.289  &lt; 2e-16 ***\nDESTIN_SZDTSZ07 -2.0569281  0.0210230   -97.842  &lt; 2e-16 ***\nDESTIN_SZDTSZ08 -0.4136414  0.0044428   -93.103  &lt; 2e-16 ***\nDESTIN_SZDTSZ09 -1.5067857  0.0097037  -155.280  &lt; 2e-16 ***\nDESTIN_SZDTSZ10 -1.3486238  0.0089622  -150.479  &lt; 2e-16 ***\nDESTIN_SZDTSZ11 -0.5241537  0.0048004  -109.190  &lt; 2e-16 ***\nDESTIN_SZDTSZ12 -2.5141740  0.0172211  -145.994  &lt; 2e-16 ***\nDESTIN_SZDTSZ13 -1.6165616  0.0097938  -165.059  &lt; 2e-16 ***\nDESTIN_SZGLSZ01  0.1479855  0.0046141    32.072  &lt; 2e-16 ***\nDESTIN_SZGLSZ02 -0.1586055  0.0042851   -37.013  &lt; 2e-16 ***\nDESTIN_SZGLSZ03  0.5062282  0.0035978   140.706  &lt; 2e-16 ***\nDESTIN_SZGLSZ04  0.4383915  0.0035501   123.485  &lt; 2e-16 ***\nDESTIN_SZGLSZ05  0.2535932  0.0036831    68.853  &lt; 2e-16 ***\nDESTIN_SZHGSZ01  0.3290666  0.0036058    91.260  &lt; 2e-16 ***\nDESTIN_SZHGSZ02 -0.5820041  0.0047544  -122.414  &lt; 2e-16 ***\nDESTIN_SZHGSZ03 -1.1883737  0.0058266  -203.957  &lt; 2e-16 ***\nDESTIN_SZHGSZ04 -0.3953541  0.0041450   -95.381  &lt; 2e-16 ***\nDESTIN_SZHGSZ05 -0.4396748  0.0041783  -105.229  &lt; 2e-16 ***\nDESTIN_SZHGSZ06 -0.7997170  0.0050828  -157.337  &lt; 2e-16 ***\nDESTIN_SZHGSZ07  0.1505080  0.0038535    39.057  &lt; 2e-16 ***\nDESTIN_SZHGSZ08 -0.2141129  0.0043764   -48.925  &lt; 2e-16 ***\nDESTIN_SZHGSZ09  0.1536079  0.0044429    34.574  &lt; 2e-16 ***\nDESTIN_SZHGSZ10 -2.8940795  0.0248051  -116.673  &lt; 2e-16 ***\nDESTIN_SZJESZ01 -0.3084109  0.0047959   -64.307  &lt; 2e-16 ***\nDESTIN_SZJESZ02 -0.6208815  0.0049320  -125.887  &lt; 2e-16 ***\nDESTIN_SZJESZ03 -0.5959135  0.0052142  -114.288  &lt; 2e-16 ***\nDESTIN_SZJESZ04  0.0187621  0.0053590     3.501 0.000463 ***\nDESTIN_SZJESZ05 -0.8506610  0.0080888  -105.166  &lt; 2e-16 ***\nDESTIN_SZJESZ06  0.3966194  0.0038268   103.642  &lt; 2e-16 ***\nDESTIN_SZJESZ07 -0.8684975  0.0066126  -131.339  &lt; 2e-16 ***\nDESTIN_SZJESZ08 -0.6327406  0.0067009   -94.426  &lt; 2e-16 ***\nDESTIN_SZJESZ09 -0.3483935  0.0051280   -67.940  &lt; 2e-16 ***\nDESTIN_SZJESZ10  0.6208771  0.0063329    98.041  &lt; 2e-16 ***\nDESTIN_SZJESZ11  0.9376128  0.0059973   156.338  &lt; 2e-16 ***\nDESTIN_SZJWSZ01 -0.6611437  0.0059081  -111.905  &lt; 2e-16 ***\nDESTIN_SZJWSZ02 -0.6854325  0.0050264  -136.368  &lt; 2e-16 ***\nDESTIN_SZJWSZ03  0.3045089  0.0039776    76.556  &lt; 2e-16 ***\nDESTIN_SZJWSZ04  0.8358144  0.0037186   224.767  &lt; 2e-16 ***\nDESTIN_SZJWSZ05 -0.2618105  0.0053072   -49.331  &lt; 2e-16 ***\nDESTIN_SZJWSZ06 -0.0608256  0.0050037   -12.156  &lt; 2e-16 ***\nDESTIN_SZJWSZ07 -1.6291742  0.0223242   -72.978  &lt; 2e-16 ***\nDESTIN_SZJWSZ08 -0.5408459  0.0046487  -116.344  &lt; 2e-16 ***\nDESTIN_SZJWSZ09  1.0380235  0.0034297   302.658  &lt; 2e-16 ***\nDESTIN_SZKLSZ01 -0.3550389  0.0044935   -79.011  &lt; 2e-16 ***\nDESTIN_SZKLSZ02 -0.6411645  0.0052168  -122.903  &lt; 2e-16 ***\nDESTIN_SZKLSZ03 -0.9687060  0.0055471  -174.633  &lt; 2e-16 ***\nDESTIN_SZKLSZ04 -1.3956038  0.0069944  -199.531  &lt; 2e-16 ***\nDESTIN_SZKLSZ05 -0.5944327  0.0063279   -93.938  &lt; 2e-16 ***\nDESTIN_SZKLSZ06 -0.6738739  0.0050195  -134.250  &lt; 2e-16 ***\nDESTIN_SZKLSZ07 -0.7250680  0.0055194  -131.367  &lt; 2e-16 ***\nDESTIN_SZKLSZ08  0.0506044  0.0040818    12.398  &lt; 2e-16 ***\nDESTIN_SZKLSZ09 -1.5569413  0.0074506  -208.968  &lt; 2e-16 ***\nDESTIN_SZLKSZ01 -1.9032642  0.0197063   -96.582  &lt; 2e-16 ***\nDESTIN_SZMDSZ01 -1.2701798  0.0160808   -78.987  &lt; 2e-16 ***\nDESTIN_SZMDSZ02 -1.0027039  0.0096162  -104.273  &lt; 2e-16 ***\nDESTIN_SZMDSZ03 -2.0744960  0.0218068   -95.131  &lt; 2e-16 ***\nDESTIN_SZMPSZ01 -0.6678281  0.0064335  -103.805  &lt; 2e-16 ***\nDESTIN_SZMPSZ02 -0.6625825  0.0054230  -122.179  &lt; 2e-16 ***\nDESTIN_SZMPSZ03 -0.0941854  0.0043707   -21.549  &lt; 2e-16 ***\nDESTIN_SZMSSZ01 -0.9964019  0.0759047   -13.127  &lt; 2e-16 ***\nDESTIN_SZMUSZ01 -0.9586973  0.0053142  -180.402  &lt; 2e-16 ***\nDESTIN_SZMUSZ02 -1.0473821  0.0082228  -127.375  &lt; 2e-16 ***\nDESTIN_SZMUSZ03 -0.9746675  0.0052266  -186.480  &lt; 2e-16 ***\nDESTIN_SZNTSZ01 -2.1065137  0.0218706   -96.317  &lt; 2e-16 ***\nDESTIN_SZNTSZ02 -1.5271988  0.0091554  -166.809  &lt; 2e-16 ***\nDESTIN_SZNTSZ03 -1.1918868  0.0072221  -165.033  &lt; 2e-16 ***\nDESTIN_SZNTSZ05 -1.5100655  0.0168727   -89.498  &lt; 2e-16 ***\nDESTIN_SZNTSZ06 -2.7578160  0.0268901  -102.559  &lt; 2e-16 ***\nDESTIN_SZNVSZ01 -0.1773431  0.0040076   -44.252  &lt; 2e-16 ***\nDESTIN_SZNVSZ02 -0.2777875  0.0046110   -60.245  &lt; 2e-16 ***\nDESTIN_SZNVSZ03 -0.1938244  0.0046486   -41.695  &lt; 2e-16 ***\nDESTIN_SZNVSZ04 -1.8191107  0.0096864  -187.800  &lt; 2e-16 ***\nDESTIN_SZNVSZ05 -1.3662486  0.0076986  -177.468  &lt; 2e-16 ***\nDESTIN_SZORSZ01 -1.2794535  0.0181517   -70.487  &lt; 2e-16 ***\nDESTIN_SZORSZ02  0.0844600  0.0041141    20.530  &lt; 2e-16 ***\nDESTIN_SZORSZ03 -0.7119874  0.0052319  -136.085  &lt; 2e-16 ***\nDESTIN_SZOTSZ01 -1.0673583  0.0067550  -158.009  &lt; 2e-16 ***\nDESTIN_SZOTSZ02 -0.4452825  0.0061640   -72.239  &lt; 2e-16 ***\nDESTIN_SZOTSZ03 -1.3114902  0.0066812  -196.296  &lt; 2e-16 ***\nDESTIN_SZOTSZ04 -1.5702099  0.0095906  -163.723  &lt; 2e-16 ***\nDESTIN_SZPGSZ01 -2.1254069  0.0167944  -126.555  &lt; 2e-16 ***\nDESTIN_SZPGSZ02 -0.7167814  0.0058167  -123.228  &lt; 2e-16 ***\nDESTIN_SZPGSZ03  0.2356549  0.0037783    62.371  &lt; 2e-16 ***\nDESTIN_SZPGSZ04 -0.1175036  0.0040900   -28.730  &lt; 2e-16 ***\nDESTIN_SZPGSZ05 -0.9580182  0.0067081  -142.815  &lt; 2e-16 ***\nDESTIN_SZPLSZ01 -0.1294963  0.0058016   -22.321  &lt; 2e-16 ***\nDESTIN_SZPLSZ02 -1.4099592  0.0107774  -130.826  &lt; 2e-16 ***\nDESTIN_SZPLSZ03  0.1895489  0.0081365    23.296  &lt; 2e-16 ***\nDESTIN_SZPLSZ04  0.1433774  0.0080572    17.795  &lt; 2e-16 ***\nDESTIN_SZPLSZ05 -0.4394746  0.0094286   -46.611  &lt; 2e-16 ***\nDESTIN_SZPNSZ01  0.0141183  0.0049800     2.835 0.004583 ** \nDESTIN_SZPNSZ02  1.2411047  0.0065989   188.078  &lt; 2e-16 ***\nDESTIN_SZPNSZ03  0.3650063  0.0067099    54.398  &lt; 2e-16 ***\nDESTIN_SZPNSZ04  2.1962368  0.0072302   303.758  &lt; 2e-16 ***\nDESTIN_SZPNSZ05  1.5501505  0.0097439   159.089  &lt; 2e-16 ***\nDESTIN_SZPRSZ01 -0.9220155  0.0066379  -138.901  &lt; 2e-16 ***\nDESTIN_SZPRSZ02 -0.3667241  0.0046425   -78.992  &lt; 2e-16 ***\nDESTIN_SZPRSZ03  0.7089051  0.0035800   198.018  &lt; 2e-16 ***\nDESTIN_SZPRSZ04 -0.6407169  0.0079624   -80.468  &lt; 2e-16 ***\nDESTIN_SZPRSZ05 -0.2860877  0.0044367   -64.482  &lt; 2e-16 ***\nDESTIN_SZPRSZ06  0.3182073  0.0044782    71.057  &lt; 2e-16 ***\nDESTIN_SZPRSZ07 -0.9313994  0.0102139   -91.189  &lt; 2e-16 ***\nDESTIN_SZPRSZ08 -0.7646933  0.0060650  -126.084  &lt; 2e-16 ***\nDESTIN_SZQTSZ01 -1.2065568  0.0083953  -143.719  &lt; 2e-16 ***\nDESTIN_SZQTSZ02 -1.3337121  0.0070458  -189.292  &lt; 2e-16 ***\nDESTIN_SZQTSZ03 -0.5987814  0.0059454  -100.713  &lt; 2e-16 ***\nDESTIN_SZQTSZ04 -0.6356001  0.0061088  -104.047  &lt; 2e-16 ***\nDESTIN_SZQTSZ05 -0.5632510  0.0054098  -104.116  &lt; 2e-16 ***\nDESTIN_SZQTSZ06 -0.8363928  0.0058291  -143.485  &lt; 2e-16 ***\nDESTIN_SZQTSZ07 -1.3223625  0.0093878  -140.860  &lt; 2e-16 ***\nDESTIN_SZQTSZ08  0.2289320  0.0043088    53.132  &lt; 2e-16 ***\nDESTIN_SZQTSZ09 -0.3345250  0.0051666   -64.748  &lt; 2e-16 ***\nDESTIN_SZQTSZ10 -0.1951616  0.0048044   -40.621  &lt; 2e-16 ***\nDESTIN_SZQTSZ11  0.0115878  0.0050805     2.281 0.022558 *  \nDESTIN_SZQTSZ12 -0.2601121  0.0061774   -42.107  &lt; 2e-16 ***\nDESTIN_SZQTSZ13  0.3029537  0.0044752    67.696  &lt; 2e-16 ***\nDESTIN_SZQTSZ14  0.0748386  0.0051987    14.396  &lt; 2e-16 ***\nDESTIN_SZQTSZ15  0.1699397  0.0062445    27.215  &lt; 2e-16 ***\nDESTIN_SZRCSZ01 -0.9555784  0.0061856  -154.484  &lt; 2e-16 ***\nDESTIN_SZRCSZ02 -2.1248998  0.0150644  -141.055  &lt; 2e-16 ***\nDESTIN_SZRCSZ03 -1.0509399  0.0080253  -130.954  &lt; 2e-16 ***\nDESTIN_SZRCSZ04 -2.0168192  0.0111212  -181.349  &lt; 2e-16 ***\nDESTIN_SZRCSZ05 -2.3217184  0.0115384  -201.217  &lt; 2e-16 ***\nDESTIN_SZRCSZ06 -1.7109774  0.0131848  -129.769  &lt; 2e-16 ***\nDESTIN_SZRCSZ08 -1.6867983  0.0127613  -132.181  &lt; 2e-16 ***\nDESTIN_SZRCSZ09 -1.1288545  0.0099814  -113.096  &lt; 2e-16 ***\nDESTIN_SZRCSZ10 -0.8322188  0.0058352  -142.620  &lt; 2e-16 ***\nDESTIN_SZRVSZ01 -1.5874174  0.0094951  -167.183  &lt; 2e-16 ***\nDESTIN_SZRVSZ02 -2.0632703  0.0123823  -166.631  &lt; 2e-16 ***\nDESTIN_SZRVSZ03 -1.9352774  0.0110428  -175.252  &lt; 2e-16 ***\nDESTIN_SZRVSZ04 -1.6999412  0.0152183  -111.703  &lt; 2e-16 ***\nDESTIN_SZRVSZ05 -1.3174869  0.0127063  -103.688  &lt; 2e-16 ***\nDESTIN_SZSBSZ01 -0.3511150  0.0058151   -60.380  &lt; 2e-16 ***\nDESTIN_SZSBSZ02 -0.9498747  0.0068382  -138.908  &lt; 2e-16 ***\nDESTIN_SZSBSZ03  0.5963524  0.0041051   145.270  &lt; 2e-16 ***\nDESTIN_SZSBSZ04  0.3269010  0.0050407    64.852  &lt; 2e-16 ***\nDESTIN_SZSBSZ05 -0.6776338  0.0065376  -103.651  &lt; 2e-16 ***\nDESTIN_SZSBSZ06 -1.9663827  0.0221685   -88.702  &lt; 2e-16 ***\nDESTIN_SZSBSZ07 -1.4831285  0.0147116  -100.814  &lt; 2e-16 ***\nDESTIN_SZSBSZ08  1.4029340  0.0045970   305.186  &lt; 2e-16 ***\nDESTIN_SZSBSZ09  0.7338341  0.0046211   158.801  &lt; 2e-16 ***\nDESTIN_SZSESZ02 -0.4258803  0.0043125   -98.755  &lt; 2e-16 ***\nDESTIN_SZSESZ03  0.4320760  0.0034754   124.323  &lt; 2e-16 ***\nDESTIN_SZSESZ04 -0.8491377  0.0051131  -166.072  &lt; 2e-16 ***\nDESTIN_SZSESZ05 -0.2367025  0.0042519   -55.670  &lt; 2e-16 ***\nDESTIN_SZSESZ06 -0.8003757  0.0052835  -151.487  &lt; 2e-16 ***\nDESTIN_SZSESZ07 -3.1163233  0.0201115  -154.952  &lt; 2e-16 ***\nDESTIN_SZSGSZ01 -0.0277356  0.0051347    -5.402 6.60e-08 ***\nDESTIN_SZSGSZ02 -0.1026582  0.0045921   -22.355  &lt; 2e-16 ***\nDESTIN_SZSGSZ03 -0.3448425  0.0043826   -78.685  &lt; 2e-16 ***\nDESTIN_SZSGSZ04 -0.2064794  0.0044260   -46.652  &lt; 2e-16 ***\nDESTIN_SZSGSZ05 -1.6666369  0.0077157  -216.007  &lt; 2e-16 ***\nDESTIN_SZSGSZ06  0.4539498  0.0035146   129.160  &lt; 2e-16 ***\nDESTIN_SZSGSZ07 -0.3094940  0.0044927   -68.888  &lt; 2e-16 ***\nDESTIN_SZSISZ01 -1.0188388  0.0201495   -50.564  &lt; 2e-16 ***\nDESTIN_SZSKSZ01 -0.4087700  0.0063144   -64.736  &lt; 2e-16 ***\nDESTIN_SZSKSZ02 -0.4567170  0.0064009   -71.352  &lt; 2e-16 ***\nDESTIN_SZSKSZ03 -0.3040223  0.0053253   -57.090  &lt; 2e-16 ***\nDESTIN_SZSKSZ04 -0.7386444  0.0131885   -56.007  &lt; 2e-16 ***\nDESTIN_SZSKSZ05 -0.2172676  0.0109237   -19.889  &lt; 2e-16 ***\nDESTIN_SZSLSZ01 -0.5523676  0.0067386   -81.971  &lt; 2e-16 ***\nDESTIN_SZSLSZ04 -0.7667101  0.0056415  -135.906  &lt; 2e-16 ***\nDESTIN_SZSRSZ01 -1.0677345  0.0069517  -153.593  &lt; 2e-16 ***\nDESTIN_SZSRSZ02 -1.3470266  0.0085931  -156.757  &lt; 2e-16 ***\nDESTIN_SZSRSZ03 -1.4191310  0.0077723  -182.588  &lt; 2e-16 ***\nDESTIN_SZSVSZ01 -1.5435777  0.0678577   -22.747  &lt; 2e-16 ***\nDESTIN_SZTHSZ01 -3.4835911  0.0332037  -104.916  &lt; 2e-16 ***\nDESTIN_SZTHSZ03 -2.0902120  0.0191240  -109.298  &lt; 2e-16 ***\nDESTIN_SZTHSZ04 -2.4801866  0.0191471  -129.534  &lt; 2e-16 ***\nDESTIN_SZTHSZ06 -1.2131928  0.0107822  -112.518  &lt; 2e-16 ***\nDESTIN_SZTMSZ01 -0.1783623  0.0048238   -36.976  &lt; 2e-16 ***\nDESTIN_SZTMSZ02  1.3471362  0.0031928   421.928  &lt; 2e-16 ***\nDESTIN_SZTMSZ03  0.6167721  0.0035826   172.159  &lt; 2e-16 ***\nDESTIN_SZTMSZ04  0.8827896  0.0036849   239.570  &lt; 2e-16 ***\nDESTIN_SZTMSZ05  0.7015166  0.0046013   152.459  &lt; 2e-16 ***\nDESTIN_SZTNSZ01 -0.3854415  0.0049756   -77.466  &lt; 2e-16 ***\nDESTIN_SZTNSZ02 -1.0116640  0.0064636  -156.517  &lt; 2e-16 ***\nDESTIN_SZTNSZ03 -0.9969349  0.0079007  -126.183  &lt; 2e-16 ***\nDESTIN_SZTNSZ04 -0.8068935  0.0059051  -136.645  &lt; 2e-16 ***\nDESTIN_SZTPSZ01 -0.2217206  0.0048497   -45.719  &lt; 2e-16 ***\nDESTIN_SZTPSZ02  0.2947652  0.0035258    83.602  &lt; 2e-16 ***\nDESTIN_SZTPSZ03 -0.1506180  0.0049959   -30.148  &lt; 2e-16 ***\nDESTIN_SZTPSZ04 -1.5516087  0.0068909  -225.168  &lt; 2e-16 ***\nDESTIN_SZTPSZ05 -0.8425099  0.0052178  -161.469  &lt; 2e-16 ***\nDESTIN_SZTPSZ06 -0.4783177  0.0068485   -69.843  &lt; 2e-16 ***\nDESTIN_SZTPSZ07 -1.6185250  0.0094773  -170.779  &lt; 2e-16 ***\nDESTIN_SZTPSZ08 -1.2058772  0.0073927  -163.118  &lt; 2e-16 ***\nDESTIN_SZTPSZ09 -0.2827998  0.0054707   -51.694  &lt; 2e-16 ***\nDESTIN_SZTPSZ10 -0.9042380  0.0068526  -131.956  &lt; 2e-16 ***\nDESTIN_SZTPSZ11 -0.2378862  0.0045592   -52.177  &lt; 2e-16 ***\nDESTIN_SZTPSZ12 -0.5943323  0.0054969  -108.121  &lt; 2e-16 ***\nDESTIN_SZTSSZ01 -0.4654272  0.0195130   -23.852  &lt; 2e-16 ***\nDESTIN_SZTSSZ02 -0.2867240  0.0096697   -29.652  &lt; 2e-16 ***\nDESTIN_SZTSSZ03  0.6143718  0.0075850    80.998  &lt; 2e-16 ***\nDESTIN_SZTSSZ04  0.7160812  0.0077316    92.617  &lt; 2e-16 ***\nDESTIN_SZTSSZ05  1.5857568  0.0081300   195.050  &lt; 2e-16 ***\nDESTIN_SZTSSZ06  1.4138202  0.0162869    86.807  &lt; 2e-16 ***\nDESTIN_SZWCSZ01  1.1496497  0.0046986   244.682  &lt; 2e-16 ***\nDESTIN_SZWCSZ02 -1.0349742  0.0105727   -97.891  &lt; 2e-16 ***\nDESTIN_SZWCSZ03 -2.2963440  0.0237591   -96.651  &lt; 2e-16 ***\nDESTIN_SZWDSZ01  0.9781536  0.0034040   287.353  &lt; 2e-16 ***\nDESTIN_SZWDSZ02 -0.6845793  0.0053438  -128.108  &lt; 2e-16 ***\nDESTIN_SZWDSZ03  0.6693330  0.0038297   174.774  &lt; 2e-16 ***\nDESTIN_SZWDSZ04 -0.4213882  0.0054825   -76.861  &lt; 2e-16 ***\nDESTIN_SZWDSZ05 -0.0619737  0.0048976   -12.654  &lt; 2e-16 ***\nDESTIN_SZWDSZ06  0.2338675  0.0039807    58.750  &lt; 2e-16 ***\nDESTIN_SZWDSZ07 -0.2053677  0.0061766   -33.249  &lt; 2e-16 ***\nDESTIN_SZWDSZ08  0.1935476  0.0056565    34.217  &lt; 2e-16 ***\nDESTIN_SZWDSZ09 -0.2666847  0.0047456   -56.196  &lt; 2e-16 ***\nDESTIN_SZYSSZ01  0.9922918  0.0036638   270.837  &lt; 2e-16 ***\nDESTIN_SZYSSZ02 -0.1925948  0.0048105   -40.037  &lt; 2e-16 ***\nDESTIN_SZYSSZ03 -1.1482004  0.0052037  -220.650  &lt; 2e-16 ***\nDESTIN_SZYSSZ04 -0.2303018  0.0045923   -50.149  &lt; 2e-16 ***\nDESTIN_SZYSSZ05 -1.7874160  0.0092880  -192.444  &lt; 2e-16 ***\nDESTIN_SZYSSZ06 -1.2568568  0.0072266  -173.921  &lt; 2e-16 ***\nDESTIN_SZYSSZ07 -0.5479832  0.0092646   -59.148  &lt; 2e-16 ***\nDESTIN_SZYSSZ08  0.6465652  0.0037043   174.542  &lt; 2e-16 ***\nDESTIN_SZYSSZ09  0.1198840  0.0037924    31.611  &lt; 2e-16 ***\nlog(dist)       -0.6772955  0.0001165 -5813.070  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 88920223  on 20599  degrees of freedom\nResidual deviance: 29958287  on 19979  degrees of freedom\nAIC: 30088654\n\nNumber of Fisher Scoring iterations: 7\n\n\nWe can examine how the constraints hold for destinations this time.\n\n\nCode\nCalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)\n\n\n[1] 0.5727022\n\n\nNotice that there is a relatively greater improvement in the R^2 value."
  },
  {
    "objectID": "in-class/ice3.html#model-comparison",
    "href": "in-class/ice3.html#model-comparison",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "6.9 Model comparison",
    "text": "6.9 Model comparison\nAnother useful model performance measure for continuous dependent variable is Root Mean Squared Error. In this sub-section, you will learn how to use compare_performance() of performance package\nFirst of all, let us create a list called model_list by using the code chunk below.\n\n\nCode\nmodel_list &lt;- list(unconstrained=uncSIM,\n                   originConstrained=orcSIM,\n                   destinationConstrained=decSIM,\n                   doublyConstrained=dbcSIM)\n\n\nNext, we will compute the RMSE of all the models in model_list file by using the code chunk below.\n\n\nCode\ncompare_performance(model_list,\n                    metrics = \"RMSE\")\n\n\n# Comparison of Model Performance Indices\n\nName                   | Model |     RMSE\n-----------------------------------------\nunconstrained          |   glm | 4652.384\noriginConstrained      |   glm | 4092.063\ndestinationConstrained |   glm | 3717.580\ndoublyConstrained      |   glm | 3548.631\n\n\nThe print above reveals that doubly constrained SIM is the best model among all the four SIMs because it has the smallest RMSE value of 1487.111."
  },
  {
    "objectID": "in-class/ice3.html#visualising-fitted",
    "href": "in-class/ice3.html#visualising-fitted",
    "title": "In-class Exercise 3 - Calibrating Spatial Interaction Models with R",
    "section": "6.10 Visualising fitted",
    "text": "6.10 Visualising fitted\nIn this section, you will learn how to visualise the observed values and the fitted values.\nFirstly we will extract the fitted values from each model by using the code chunk below.\n\n\nCode\ndf &lt;- as.data.frame(uncSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nNext, we will join the values to SIM_data data frame.\n\n\nCode\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(uncTRIPS = \"uncSIM$fitted.values\")\n\n\nRepeat the same step by for Origin Constrained SIM (i.e. orcSIM)\n\n\nCode\ndf &lt;- as.data.frame(orcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\n\n\nCode\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(orcTRIPS = \"orcSIM$fitted.values\")\n\n\nRepeat the same step by for Destination Constrained SIM (i.e. decSIM)\n\n\nCode\ndf &lt;- as.data.frame(decSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\n\n\nCode\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(decTRIPS = \"decSIM$fitted.values\")\n\n\nRepeat the same step by for Doubly Constrained SIM (i.e. dbcSIM)\n\n\nCode\ndf &lt;- as.data.frame(dbcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\n\n\nCode\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(dbcTRIPS = \"dbcSIM$fitted.values\")\n\n\n\n\nCode\nunc_p &lt;- ggplot(data = SIM_data,\n                aes(x = uncTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\norc_p &lt;- ggplot(data = SIM_data,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndec_p &lt;- ggplot(data = SIM_data,\n                aes(x = decTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndbc_p &lt;- ggplot(data = SIM_data,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n# Use patchwork to arrange the plots\n(unc_p | orc_p) / (dec_p | dbc_p)"
  },
  {
    "objectID": "in-class/ice1.html",
    "href": "in-class/ice1.html",
    "title": "In-class Exercise 1: Preparing the Data Flow",
    "section": "",
    "text": "Preparing Data Flow Illustration"
  },
  {
    "objectID": "in-class/ice1.html#getting-started",
    "href": "in-class/ice1.html#getting-started",
    "title": "In-class Exercise 1: Preparing the Data Flow",
    "section": "1 Getting Started",
    "text": "1 Getting Started\nThe code chunk below load the following packages: - tmap: for thematic mapping - sf : for geospatial data handling - tidyverse for non-spatial data handling.\n\npacman::p_load(tmap, sf, tidyverse)\n# load the libraries, the pacman itself will only be loaded temporarily"
  },
  {
    "objectID": "in-class/ice1.html#preparing-the-data-flow",
    "href": "in-class/ice1.html#preparing-the-data-flow",
    "title": "In-class Exercise 1: Preparing the Data Flow",
    "section": "2 Preparing the Data Flow",
    "text": "2 Preparing the Data Flow\n\n2.1 Importing the Aspatial data\nImport the Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall by using read_csv() of readr package.\n\nodbus &lt;- read_csv(\"../data/aspatial/origin_destination_bus_202308.csv.gz\")\nhead(odbus)\n\n\nChange Character Data Type to Numerical Factor\nodbus08 is a tibble dataframe. However, ORIGIN_PT_CODE and DESTINATION_PT_CODE are in character format. These are transformed into factors (categorical data type) for further analysis.\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE)\n\n\n\nExtracting the data for analysis\nextract commuting flows by extracting Origin bus stop codes and number of trips for weekdays between 7 and 9 o’clock, into a new dataframe:\n\n\nCode\norigtrip_7_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 7 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\nglimpse(origtrip_7_9)\n# the %&gt;% sign is for stepping the process in order \n\n\n\n\n\n2.2 Importing the geospatial data\nTwo geospatial data will be used in this exercise both data contain coordinate in geometry column:\n\nbusstop &lt;- st_read(dsn = \"../data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414) # the st_transform is for projection\nglimpse(busstop)\n\n\nmpsz &lt;- st_read(dsn = \"../data/geospatial\",\n                layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\nglimpse(mpsz)"
  },
  {
    "objectID": "hands-on/hoe3.html",
    "href": "hands-on/hoe3.html",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "",
    "text": "Spatial interaction is the movement of people, goods, or information between different places. It includes things like shipping goods, energy transfer, global trade of rare items, as well as flight schedules, traffic during busy times, and people walking around.\nImagine each movement as a specific trip from one place to another. We can represent these trips using a table where one side shows where the journey starts, and the other side shows where it ends. This table is called an origin/destination matrix or a spatial interaction matrix.\nIn this practical exercise, we will learn to create this matrix using data about how many passengers travel between different bus stops. The data is from LTA DataMall\nLearning Objectives:\n\nImport and extract Origin-Destination (OD) data for a specific time period.\nImport and store geospatial data, such as bus stops and MRT (MPSZ), as sf tibble data frame objects.\nAssign planning subzone codes to bus stops in the sf tibble data frame.\nCreate geospatial data representing desire lines based on the OD data.\nVisualize passenger volume between origin and destination bus stops using the desire lines data."
  },
  {
    "objectID": "hands-on/hoe3.html#overview",
    "href": "hands-on/hoe3.html#overview",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "",
    "text": "Spatial interaction is the movement of people, goods, or information between different places. It includes things like shipping goods, energy transfer, global trade of rare items, as well as flight schedules, traffic during busy times, and people walking around.\nImagine each movement as a specific trip from one place to another. We can represent these trips using a table where one side shows where the journey starts, and the other side shows where it ends. This table is called an origin/destination matrix or a spatial interaction matrix.\nIn this practical exercise, we will learn to create this matrix using data about how many passengers travel between different bus stops. The data is from LTA DataMall\nLearning Objectives:\n\nImport and extract Origin-Destination (OD) data for a specific time period.\nImport and store geospatial data, such as bus stops and MRT (MPSZ), as sf tibble data frame objects.\nAssign planning subzone codes to bus stops in the sf tibble data frame.\nCreate geospatial data representing desire lines based on the OD data.\nVisualize passenger volume between origin and destination bus stops using the desire lines data."
  },
  {
    "objectID": "hands-on/hoe3.html#getting-started",
    "href": "hands-on/hoe3.html#getting-started",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nWe’ll employ various R packages which will be loading using pacman on the following code\n\n\nCode\n#pacman::p_load' ensures all specified packages are installed and loaded\npacman::p_load(tmap, sf, DT, stplanr, performance,\n               ggpubr, tidyverse)\n\n\n\n\n\n\n\n\nLibrary Descriptions\n\n\n\n\n\n\ntmap: A comprehensive package for creating thematic maps that are static, interactive, or animated, specializing in visualizing geospatial data.\nsf: An R package that provides simple features access for handling and manipulating geospatial data, enabling easy and straightforward operations on geographic data.\nDT: This package is an R interface to the DataTables library, and it allows for the creation of interactive tables in R Markdown documents and Shiny applications.\nstplanr: Designed for sustainable transport planning with R, this package assists in working with spatial data on transport systems, including the creation of desire lines, route networks, and more.\nperformance: This package is used for checking the performance of statistical models, including diagnostics for regression models, making it easier to assess model quality and fit.\nggpubr: Provides a convenient interface to ggplot2, especially for creating publication-ready plots with minimal amounts of code adjustments.\ntidyverse: A collection of R packages designed for data science that makes it easier to import, tidy, transform, visualize, and model data."
  },
  {
    "objectID": "hands-on/hoe3.html#preparing-the-flow-data",
    "href": "hands-on/hoe3.html#preparing-the-flow-data",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "3 Preparing the Flow Data",
    "text": "3 Preparing the Flow Data\n\nImporting the OD Data\nWe begin by importing the Passenger Volume by Origin Destination Bus Stops:\n\n\nCode\n# The dataset is converted to a dataframe with appropriate data types\nodbus202308 &lt;- read_csv(\"../data/aspatial/origin_destination_bus_202308.csv.gz\")\nodbus202308 &lt;- data.frame(lapply(odbus202308, factor))\nodbus202308$TOTAL_TRIPS &lt;- as.numeric(odbus202308$TOTAL_TRIPS)\nodbus202308$TIME_PER_HOUR &lt;- as.numeric(odbus202308$TIME_PER_HOUR)\n\n# display the summary of the dataset\nglimpse(odbus202308)\n\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;fct&gt; 2023-08, 2023-08, 2023-08, 2023-08, 2023-08, 2023-…\n$ DAY_TYPE            &lt;fct&gt; WEEKDAY, WEEKENDS/HOLIDAY, WEEKENDS/HOLIDAY, WEEKD…\n$ TIME_PER_HOUR       &lt;dbl&gt; 17, 17, 15, 15, 18, 18, 18, 18, 8, 18, 15, 11, 11,…\n$ PT_TYPE             &lt;fct&gt; BUS, BUS, BUS, BUS, BUS, BUS, BUS, BUS, BUS, BUS, …\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 44069, 20281, 2…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 17229, 20141, 2…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nread_csv from readr package is used to read a CSV file into R, converting it to a data frame.\ndata.frame from base R converts the list (from lapply) into a data frame.\nlapply from base R applies the factor function to each column in the data frame, converting them to factors.\nas.numeric converts factors or character vectors to numeric values.\nglimpse from dplyr package provides a transposed summary of the data frame, offering a quick look at its structure and contents.\n\n\n\n\n\n\nExtracting the Study Data\nFor this exercise, our focus is on weekday commuting flows between 6 and 9 AM.\n\n\nCode\n# Filtering and aggregating data for specific time and day\nodbus6_9 &lt;- odbus202308 %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 & TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n# save the output in rds format\nwrite_rds(odbus6_9, \"../data/rds/odbus6_9.rds\")\n\n# code for re-importing the rds file (for future use)\nodbus6_9 &lt;- read_rds(\"../data/rds/odbus6_9.rds\")\n\n# Displaying the data in an interactive table format\ndatatable(odbus6_9)\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nfilter from dplyr package is used to subset rows based on specific conditions, here filtering data for specific days and times.\ngroup_by from dplyr package groups the data for summarization.\nsummarise from dplyr package aggregates the data within each group, here summing up total trips.\nwrite_rds from base R saves an R object to a file in RDS format.\nread_rds (or readRDS) from base R re-imports an R object from an RDS file.\ndatatable from DT package creates an interactive table widget for dynamic data interaction.\n\n\n\n\n\n\n\n\n\n\nWhat & Why RDS Format?\n\n\n\n\n\nThe RDS format in R is a specialized file format used for storing single R objects. It’s a compact binary format that preserves the exact structure of the saved object, including metadata. This format is particularly efficient for saving and loading objects in R, as it ensures that the object is restored exactly as it was when saved, without any need for reformatting or reassembling data.\nUsing the RDS format is beneficial because it allows for fast and efficient storage and retrieval of R objects, making it ideal for situations where you need to save an object and reload it later in another session without any loss of information. The functions write_rds and read_rds (or writeRDS and readRDS in base R) are used for saving to and reading from this format, respectively. RDS is especially useful for large datasets or complex objects where preservation of structure is crucial."
  },
  {
    "objectID": "hands-on/hoe3.html#working-with-geospatial-data",
    "href": "hands-on/hoe3.html#working-with-geospatial-data",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "4 Working with Geospatial Data",
    "text": "4 Working with Geospatial Data\nWe’ll use two geospatial datasets:\n\nBusStop: Locations of bus stops from LTA DataMall as of July 2023.\nMPSZ-2019: URA Master Plan 2019 sub-zone boundaries.\n\n\nImporting Geospatial Data\nThe datasets will be imported as follows:\n\n\nCode\n# Importing and transforming the BusStop and mpsz data\nbusstop &lt;- st_read(dsn = \"../data/geospatial\", layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\n\nReading layer `BusStop' from data source `C:\\ameernoor\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nCode\nmpsz &lt;- st_read(dsn = \"../data/geospatial\", layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\n\nReading layer `MPSZ-2019' from data source `C:\\ameernoor\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nCode\n# export the data for future use\nwrite_rds(mpsz, \"../data/rds/mpsz.rds\")\n\n# show the output\nmpsz\n\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nst_read from sf package imports spatial data into R, specifying the data source (dsn) and layer.\nst_transform from sf package transforms the coordinate reference system (CRS) of spatial data, here to CRS 3414.\nwrite_rds from base R saves an R object (in this case, the transformed mpsz data) to a file in RDS format."
  },
  {
    "objectID": "hands-on/hoe3.html#geospatial-data-wrangling",
    "href": "hands-on/hoe3.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "5 Geospatial Data Wrangling",
    "text": "5 Geospatial Data Wrangling\n\n1. Combining Busstop and mpsz2. Append Planning Subzone Code to Attribute Dataset3. Checking for Duplicates4. Update Destination Subzone Code5. Re-checking for Duplicates6. Prepare Data for Visualization7. Export Output for Future Use\n\n\nWe’ll merge the planning subzone codes from the mpsz dataset into the busstop dataset.\n\n\nCode\n# Merging data and retaining essential columns\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\n# Note: Five bus stops outside Singapore's boundary are excluded (Malaysia).\n\n# Viewing the combined data\ndatatable(busstop_mpsz)\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nst_intersection from sf package is used to find the intersection of two spatial objects, here busstop and mpsz. It returns the areas that are common to both spatial objects.\nselect from dplyr package is used to keep only specific columns (BUS_STOP_N, SUBZONE_C) in the resulting data frame.\nst_drop_geometry from sf package removes the geometry column from a spatial object, converting it into a regular data frame.\ndatatable from DT package creates an interactive table widget for viewing and interacting with the data.\nThe note mentions that five bus stops outside Singapore’s boundary are excluded as a result of the spatial intersection.\n\n\n\n\n\n\nNow, let’s append the planning subzone codes to the odbus6_9 dataset:\n\n\nCode\n# Joining and renaming columns for clarity\nod_data &lt;- left_join(odbus6_9, busstop_mpsz, by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE, ORIGIN_SZ = SUBZONE_C, DESTIN_BS = DESTINATION_PT_CODE)\n\n# check the data\nglimpse(od_data)\n\n\nRows: 227,177\nColumns: 4\nGroups: ORIGIN_BS [5,005]\n$ ORIGIN_BS &lt;chr&gt; \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", \"01012…\n$ DESTIN_BS &lt;fct&gt; 01112, 01113, 01121, 01211, 01311, 07371, 60011, 60021, 6003…\n$ TRIPS     &lt;dbl&gt; 177, 111, 40, 87, 184, 18, 22, 16, 12, 21, 2, 3, 1, 1, 1, 1,…\n$ ORIGIN_SZ &lt;chr&gt; \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", …\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nleft_join from dplyr package merges two data frames based on matching values in their columns. The left_join function specifically keeps all rows from the left data frame and adds matching rows from the right data frame. If there is no match, the right side will contain NA.\nrename from dplyr package changes the names of columns in a data frame for clarity or convenience. In this case, it’s used to rename ORIGIN_PT_CODE to ORIGIN_BS, SUBZONE_C to ORIGIN_SZ, and DESTINATION_PT_CODE to DESTIN_BS.\nglimpse from dplyr package provides a transposed summary of the data frame, offering a quick look at its structure, including the types of columns and the first few entries in each column.\n\n\n\n\n\n\nChecking for duplicate records is crucial, if duplicates exist, we keep only unique records:\n\n\nCode\n# Identifying any duplicate records\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n# Retaining only unique records\nod_data &lt;- unique(od_data)\n\n# check the data\nglimpse(od_data)\n\n\nRows: 226,610\nColumns: 4\nGroups: ORIGIN_BS [5,005]\n$ ORIGIN_BS &lt;chr&gt; \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", \"01012…\n$ DESTIN_BS &lt;fct&gt; 01112, 01113, 01121, 01211, 01311, 07371, 60011, 60021, 6003…\n$ TRIPS     &lt;dbl&gt; 177, 111, 40, 87, 184, 18, 22, 16, 12, 21, 2, 3, 1, 1, 1, 1,…\n$ ORIGIN_SZ &lt;chr&gt; \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", …\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\ngroup_by_all from dplyr package groups a data frame by all of its variables, creating groups based on every column present.\nfilter from dplyr package is used to subset rows that meet a certain condition. Here, it retains rows where the number of rows in a group is greater than one, effectively identifying duplicates.\nungroup from dplyr package removes the grouping structure from the data frame.\nunique from base R package is used to remove duplicate rows from a data frame, keeping only unique records.\nglimpse from dplyr package provides a quick overview of the data frame’s structure, including column types and the first few entries in each column.\n\n\n\n\n\n\nWe’ll now complete the dataset with destination subzone codes:\n\n\nCode\n# Further enriching the dataset with destination subzone codes\nod_data &lt;- left_join(od_data, busstop_mpsz, by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) %&gt;%\n   rename(DESTIN_SZ = SUBZONE_C)\n\n# check the data\nglimpse(od_data)\n\n\nRows: 227,523\nColumns: 5\nGroups: ORIGIN_BS [5,005]\n$ ORIGIN_BS &lt;chr&gt; \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", \"01012…\n$ DESTIN_BS &lt;chr&gt; \"01112\", \"01113\", \"01121\", \"01211\", \"01311\", \"07371\", \"60011…\n$ TRIPS     &lt;dbl&gt; 177, 111, 40, 87, 184, 18, 22, 16, 12, 21, 2, 3, 1, 1, 1, 1,…\n$ ORIGIN_SZ &lt;chr&gt; \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", …\n$ DESTIN_SZ &lt;chr&gt; \"RCSZ10\", \"DTSZ01\", \"RCSZ04\", \"KLSZ09\", \"KLSZ06\", \"KLSZ06\", …\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nleft_join from dplyr package merges two data frames based on matching values in their columns. The left_join function specifically keeps all rows from the left data frame and adds matching rows from the right data frame. If there is no match, the right side will contain NA.\nrename from dplyr package changes the names of columns in a data frame for clarity or convenience. In this case, it’s used to rename ORIGIN_PT_CODE to ORIGIN_BS, SUBZONE_C to ORIGIN_SZ, and DESTINATION_PT_CODE to DESTIN_BS.\nglimpse from dplyr package provides a transposed summary of the data frame, offering a quick look at its structure, including the types of columns and the first few entries in each column.\n\n\n\n\n\n\nChecking for and removing any remaining duplicates:\n\n\nCode\n# Re-checking for duplicates\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n# Retaining only unique records\nod_data &lt;- unique(od_data)\n\n# Check the data\nglimpse(od_data)\n\n\nRows: 226,846\nColumns: 5\nGroups: ORIGIN_BS [5,005]\n$ ORIGIN_BS &lt;chr&gt; \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", \"01012…\n$ DESTIN_BS &lt;chr&gt; \"01112\", \"01113\", \"01121\", \"01211\", \"01311\", \"07371\", \"60011…\n$ TRIPS     &lt;dbl&gt; 177, 111, 40, 87, 184, 18, 22, 16, 12, 21, 2, 3, 1, 1, 1, 1,…\n$ ORIGIN_SZ &lt;chr&gt; \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", …\n$ DESTIN_SZ &lt;chr&gt; \"RCSZ10\", \"DTSZ01\", \"RCSZ04\", \"KLSZ09\", \"KLSZ06\", \"KLSZ06\", …\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\ngroup_by_all from dplyr package groups a data frame by all of its variables, creating groups based on every column present.\nfilter from dplyr package is used to subset rows that meet a certain condition. Here, it retains rows where the number of rows in a group is greater than one, effectively identifying duplicates.\nungroup from dplyr package removes the grouping structure from the data frame.\nunique from base R package is used to remove duplicate rows from a data frame, keeping only unique records.\nglimpse from dplyr package provides a quick overview of the data frame’s structure, including column types and the first few entries in each column.\n\n\n\n\n\n\nFinally, we’ll prepare the data for visualisation:\n\n\nCode\n# Final data preparation step\nod_data &lt;- od_data %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;%\n  summarise(MORNING_PEAK = sum(TRIPS))\n\n# check the final data\nglimpse(od_data)\n\n\nRows: 20,600\nColumns: 3\nGroups: ORIGIN_SZ [310]\n$ ORIGIN_SZ    &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01…\n$ DESTIN_SZ    &lt;chr&gt; \"AMSZ01\", \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMSZ06…\n$ MORNING_PEAK &lt;dbl&gt; 1866, 8726, 12598, 2098, 7718, 1631, 1308, 2261, 1526, 14…\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\ndrop_na from tidyr package is used to remove rows with missing values (NA) in the data frame.\ngroup_by from dplyr package is used to create groups in the data frame for summarization, here grouping by ORIGIN_SZ and DESTIN_SZ.\nsummarise (or summarize) from dplyr package calculates summary statistics for each group, here summing up the TRIPS for each ORIGIN_SZ and DESTIN_SZ combination.\nglimpse from dplyr package provides a transposed summary of the data frame, giving a quick look at its structure, including the types of columns and the first few entries in each column.\n\n\n\n\n\n\nExport the output to rds for future usage.\n\n\nCode\nwrite_rds(od_data, \"../data/rds/od_data.rds\")"
  },
  {
    "objectID": "hands-on/hoe3.html#visualising-spatial-interaction",
    "href": "hands-on/hoe3.html#visualising-spatial-interaction",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "6 Visualising Spatial Interaction",
    "text": "6 Visualising Spatial Interaction\nWe’ll now create and visualize desire lines using the stplanr package.\n\n1. Removing Intra-zonal Flows2. Creating Desire Lines3. Visualising All Desire Lines4. Visualising Focused Desire Lines\n\n\nIntra-zonal flows are not required for our analysis:\n\n\nCode\n# Removing intra-zonal flows for clarity in visualization\nod_data1 &lt;- od_data[od_data$ORIGIN_SZ != od_data$DESTIN_SZ,]\n\n# check the output\nglimpse(od_data1)\n\n\nRows: 20,309\nColumns: 3\nGroups: ORIGIN_SZ [310]\n$ ORIGIN_SZ    &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01…\n$ DESTIN_SZ    &lt;chr&gt; \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMSZ06\", \"AMSZ07…\n$ MORNING_PEAK &lt;dbl&gt; 8726, 12598, 2098, 7718, 1631, 1308, 2261, 1526, 141, 655…\n\n\n\n\nHere’s how to create desire lines using the od2line() function:\n\n\n\n\n\n\nWhat is Desire Lines?\n\n\n\n\n\nIn the context of transport planning, desire lines are like the paths people would naturally prefer to take when going from one place to another. Think of them as the routes you would choose if you could walk or travel in a straight line, without any obstacles.\nImagine a park where there’s a paved path, but people consistently walk across the grass to get from one side to the other. The worn-down grassy trail is the desire line – it shows where people naturally want to walk, even if it’s not the officially designated path.\nIn transport planning, understanding these desire lines helps city planners decide where to put roads, sidewalks, or public transportation routes. It’s about making sure the infrastructure fits the way people actually move around, making travel more efficient and convenient for everyone.\n\n\n\n\n\nCode\nflowLine &lt;- od2line(flow = od_data1, zones = mpsz, zone_code = \"SUBZONE_C\")\n# Generating desire lines between different zones\n\nglimpse(flowLine)\n\n\nRows: 20,309\nColumns: 4\n$ ORIGIN_SZ    &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01…\n$ DESTIN_SZ    &lt;chr&gt; \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMSZ06\", \"AMSZ07…\n$ MORNING_PEAK &lt;dbl&gt; 8726, 12598, 2098, 7718, 1631, 1308, 2261, 1526, 141, 655…\n$ geometry     &lt;LINESTRING [m]&gt; LINESTRING (29501.77 39419...., LINESTRING (29…\n\n\nCode\n# check the output\n\n\n\n\nWithout any filtering, the desire lines are quite messy with various flows entangled.\n\n\nCode\n# Enable tmap to automatically check and fix invalid polygons\ntmap_options(check.and.fix = TRUE)\n\n# Now create your plot\ntm_shape(mpsz) +\n  tm_polygons() +\n  flowLine %&gt;%\n  tm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\n\n\n\n\nCode\n# Thematic map showing the intensity of commuting flows\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\ntmap_options from tmap package sets options for tmap functions. Here, it is set to automatically check and fix invalid polygons in spatial data.\ntm_shape from tmap package prepares spatial data for plotting.\ntm_polygons from tmap package adds a layer of polygons to the map, in this case, the mpsz data.\ntm_lines from tmap package adds a layer of lines to the map. The properties of the lines (like width and transparency) are set based on the variable MORNING_PEAK, with the style defined as “quantile” and specific scaling parameters.\nThe code snippet creates a thematic map that visually represents the intensity of commuting flows.\n\n\n\n\n\n\nFocusing on selected flows can be insightful, especially when data are skewed:\n\n\nCode\ntmap_mode(\"view\")\ntmap_options(check.and.fix = TRUE)\n\n\nflowLine %&gt;%  \n  filter(MORNING_PEAK &gt;= 5000) %&gt;%\n  tm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\", col = \"orange\", style = \"quantile\", scale = c(0.1, 1, 3, 5, 7, 10), n = 6, alpha = 0.3)\n\n\n\n\n\n\n\nCode\n# Filtering and visualizing only significant flows\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nfilter from dplyr package is used to subset rows based on a condition, here retaining rows where the value of MORNING_PEAK is greater than or equal to 5000.\ntm_shape from tmap package prepares the filtered data for plotting.\ntm_lines from tmap package adds a layer of lines to the map, with properties (like width, color, and transparency) set based on the MORNING_PEAK variable. The style is set to “quantile”, with a specific scale and number of breaks (n) for line width, and the color is set to orange.\nThis code snippet creates a thematic map that visually represents only the significant commuting flows based on the specified threshold for MORNING_PEAK."
  },
  {
    "objectID": "hands-on/hoe2-localautocor.html",
    "href": "hands-on/hoe2-localautocor.html",
    "title": "Hands-on Exercise 2: Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "Zoomed Clusters of Wealthy vs Poor Area - Local Spatial Autocorrelation Illustration"
  },
  {
    "objectID": "hands-on/hoe2-localautocor.html#overview",
    "href": "hands-on/hoe2-localautocor.html#overview",
    "title": "Hands-on Exercise 2: Local Measures of Spatial Autocorrelation",
    "section": "1 Overview",
    "text": "1 Overview\nThis exercise is a follow up of 2B exercise on exploring Global and Local Measures of Spatial Autocorrelation (GLSA) using the spdep package. Specifically, this 2C exercise will focus on Local Measures of Spatial Autocorrelation.\nThe new learning objectives includes: - Compute Local Indicator of Spatial Association (LISA) statistics to detect clusters and outliers. - Compute Getis-Ord’s Gi-statistics to identify hotspots or cold spots. - Visualize the analysis output using the tmap package.\n\nLocal measures of spatial autocorrelation, in contrast, focus on the relationships between each observation and its immediate surroundings. Instead of a single summary statistic, they provide specific scores for each observation, which help to understand more about the spatial structure in the data. These measures can tell us where specific clusters or outliers are located within the map. They are based on the same general principles as global measures but are more detailed, sometimes mathematically related to the global measures. Local Indicators of Spatial Association (LISAs) are a common example of this type of measure, offering a detailed view of spatial patterns and relationships at a local level. summarized from: Rey et al., 2020"
  },
  {
    "objectID": "hands-on/hoe2-localautocor.html#getting-started",
    "href": "hands-on/hoe2-localautocor.html#getting-started",
    "title": "Hands-on Exercise 2: Local Measures of Spatial Autocorrelation",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nload the packages\n\n\nCode\npacman::p_load(sf, spdep, tmap, tidyverse)\n\n\nimport, join, and visualize the data\n\n\nCode\n#import geospatial data\nhunan &lt;- st_read(dsn = \"../data/geospatial\", \n                 layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source `C:\\ameernoor\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nCode\n# import aspatial data\nhunan2012 &lt;- read_csv(\"../data/aspatial/Hunan_2012.csv\")\n\n# perform relational join\nhunan &lt;- left_join(hunan, hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\n# visualize the data\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\", n = 5, style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\", main.title.size = 1,\n            main.title.position = \"center\", legend.outside = TRUE,\n            legend.outside.position = \"bottom\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\", n = 5, style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\", main.title.size = 1,\n            main.title.position = \"center\", legend.outside = TRUE,\n            legend.outside.position = \"bottom\")\n\ntmap_arrange(equal, quantile, asp=1, ncol=2)\n\n\n\n\n\ncarry-over important variables from previous exercise\n\n\nCode\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)"
  },
  {
    "objectID": "hands-on/hoe2-localautocor.html#cluster-and-outlier-analysis",
    "href": "hands-on/hoe2-localautocor.html#cluster-and-outlier-analysis",
    "title": "Hands-on Exercise 2: Local Measures of Spatial Autocorrelation",
    "section": "3 Cluster and Outlier Analysis",
    "text": "3 Cluster and Outlier Analysis\nLocal Indicators of Spatial Association (LISA) are statistical tools that help us identify clusters or outliers in the spatial distribution of a variable. Imagine studying cancer rates in different neighborhoods of a city; LISA would reveal whether there are areas with unusually high or low rates, indicating a spatial pattern beyond random chance. In this section, we’ll focus on applying LISA, particularly local Moran’s I, to detect clusters and outliers in the GDP per capita of Hunan Province, China, in 2012.\n\n3.1 Computing and Mapping local Moran’s I\nTo calculate local Moran’s I, we use the localmoran() function of spdep package. This function computes various statistics, such as Ii, E.Ii, Var.Ii, Z.Ii, and Pr(), indicating the local spatial autocorrelation for each region.\n\n\nCode\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\n\nlocalmoran() function returns a matrix of values whose columns are: - Ii: the local Moran’s I statistics - E.Ii: the expectation of local moran statistic under the randomisation hypothesis - Var.Ii: the variance of local moran statistic under the randomisation hypothesis - Z.Ii:the standard deviate of local moran statistic - Pr(): the p-value of local moran statistic\n\nThe following code displays the content of the local Moran matrix by using printCoefmat().\n\n\nCode\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\nlocal Moran’s Ilocal Moran’s I valueslocal Moran’s I p-valuesMapping both local Moran’s I values and p-values\n\n\nTo visualize the local Moran’s I, we append the local Moran’s I dataframe to the hunan SpatialPolygonDataFrame, creating hunan.localMI. We can then use tmap to create choropleth maps.\n\n\nCode\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n\nthe code below uses tmap to plot a choropleth map of local Moran’s I values.\n\n\nCode\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.outside = TRUE, legend.outside.position = \"right\")\n\n\n\n\n\n\n\nConsidering both Ii values and their p-values is essential. The code chunk below creates a choropleth map of Moran’s I p-values.\n\n\nCode\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.outside = TRUE, legend.outside.position = \"right\")\n\n\n\n\n\n\n\nFor a comprehensive interpretation, it’s beneficial to plot both the local Moran’s I values and their corresponding p-values side by side.\n\n\nCode\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "hands-on/hoe2-localautocor.html#creating-a-lisa-cluster-map",
    "href": "hands-on/hoe2-localautocor.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 2: Local Measures of Spatial Autocorrelation",
    "section": "4 Creating a LISA Cluster Map",
    "text": "4 Creating a LISA Cluster Map\nThe LISA Cluster Map helps us identify significant spatial clusters by color-coding areas based on their type of spatial autocorrelation. To generate this map, we start by plotting the Moran scatterplot.\n\nA LISA (Local Indicators of Spatial Association) Cluster Map is a tool used in geography and spatial analysis to identify areas of significant spatial autocorrelation in a dataset. It visually represents regions where observed values (like population density, temperature, etc.) are either similar or dissimilar to their neighboring areas. The map highlights clusters of high values near high values (high-high), low values near low values (low-low), and areas where high values are near low values (high-low) and vice versa. This visualization helps to easily identify areas of similar or dissimilar values and understand spatial patterns and relationships within the data. In essence, it’s a way to see where certain types of values are grouped together on a map.\n\n\nMoran scatterplotMoran scatterplot with standardised variableLISA map\n\n\nThe Moran scatterplot illustrates how the values of a variable at each location relate to the average values at neighboring locations. The code below uses moran.plot() from the spdep package to create this plot for the GDPPC.\n\n\nCode\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\nThe plot is divided into four quadrants. The top right quadrant represents areas with high GDPPC surrounded by areas with average GDPPC – these are the high-high locations.\n\n\nTo enhance the analysis, we standardize the GDPPC variable using the scale() function. Then, we plot the Moran scatterplot again.\nThe as.vector() added to the end is to make sure that the data type we get is a vector that map neatly into the dataframe.\n\n\nCode\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\nThe following code prepares the LISA cluster map by categorizing areas into low-low, low-high, high-low, high-high, or insignificant clusters, and plot it into a map.\n\n\nCode\n# Create an empty vector to store the quadrant information for each area\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\n# Calculate the spatially lagged variable (DV) by subtracting the mean from the lagged GDPPC\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)\n\n# Calculate the local Moran's I values (LM_I) by subtracting the mean from the original values\nLM_I &lt;- localMI[,1] - mean(localMI[,1])\n\n# Set the significance level for the local Moran's I\nsignif &lt;- 0.05       \n\n# Categorize areas into different quadrants based on their DV and LM_I values\nquadrant[DV &lt; 0 & LM_I &gt; 0] &lt;- 1  # Low values surrounded by high values (low-high)\nquadrant[DV &gt; 0 & LM_I &lt; 0] &lt;- 2  # High values surrounded by low values (high-low)\nquadrant[DV &lt; 0 & LM_I &lt; 0] &lt;- 3  # Low values surrounded by low values (low-low)\nquadrant[DV &gt; 0 & LM_I &gt; 0] &lt;- 4  # High values surrounded by high values (high-high)\n\n# Identify areas with non-significant Moran's I values and label them as 0\nquadrant[localMI[,5] &gt; signif] &lt;- 0\n\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\n\nCode\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\nWe can also include the local Moran’s I map and p-value map as shown below for easy comparison.\n\n\n\n\n\n\nThe LISA maps show significant spatial clustering of economic activity. Counties with a high GDP per Capita geographically clustered together indicates positive spatial autocorrelation. Conversely, areas with low Moran’s I values (orange) indicate counties with lower GDP per Capita that may be surrounded by higher-income counties. But, previous data processing section shows that some of the negative area might actually be richer, but the technical calculation averaged it down."
  },
  {
    "objectID": "hands-on/hoe2-localautocor.html#hot-spot-and-cold-spot-area-analysis",
    "href": "hands-on/hoe2-localautocor.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 2: Local Measures of Spatial Autocorrelation",
    "section": "5 Hot Spot and Cold Spot Area Analysis",
    "text": "5 Hot Spot and Cold Spot Area Analysis\nIn addition to finding clusters and outliers, localized spatial statistics can help identify hot spot and cold spot areas. The term ‘hot spot’ generally refers to a region or value that is higher relative to its surroundings. The Getis and Ord’s G-statistics is a spatial statistical method that detects spatial anomalies by examining neighbors within a specified proximity to identify where either high or low values cluster spatially. Statistically significant hot spots are areas with high values where neighboring areas also exhibit high values. The analysis involves three steps: deriving a spatial weight matrix, computing Gi statistics, and mapping Gi statistics.\n\n5.1 Deriving distance-based weight matrix\nInitially, we need to define new neighbors based on distance rather than shared borders, which was considered in spatial autocorrelation. Two types of distance-based proximity matrices are fixed distance weight matrix and adaptive distance weight matrix.\n\nDeriving the centroidDetermine the cut-off distanceComputing fixed distance weight matrix\n\n\nFirst, we need points associated with each polygon, and to achieve this, we use the st_centroid() function. Longitude and latitude values are extracted separately and combined into a coordinate matrix.\n\n\nCode\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords &lt;- cbind(longitude, latitude)\n\n\n\n\nWe determine the upper limit for the distance band by finding the k nearest neighbors for each point and calculating the distance between them.\n\n\nCode\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary indicates the largest first nearest neighbor distance is 61.79 km, setting this as the upper threshold ensures all units have at least one neighbor.\n\n\nNow, we calculate the distance weight matrix bt using a fixed distance of 62 km and dnearneigh() function\n\n\nCode\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nThen, we convert the neighbor object into a spatial weights object named wm62_lw using nb2listw().\n\n\nCode\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n\n\n\n5.2 Computing adaptive distance weight matrix\nFixed distance weight matrices tend to assign more neighbors to densely settled areas and fewer neighbors to less densely settled areas. To control the number of neighbors directly, we use k-nearest neighbors and specify k.\n\n\nCode\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nThen, we convert the neighbor object into a spatial weights object\n\n\nCode\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "hands-on/hoe2-localautocor.html#computing-gi-statistics",
    "href": "hands-on/hoe2-localautocor.html#computing-gi-statistics",
    "title": "Hands-on Exercise 2: Local Measures of Spatial Autocorrelation",
    "section": "6 Computing Gi statistics",
    "text": "6 Computing Gi statistics\nGi statistics help us find areas with unusually high or low values compared to their neighbors\n\n\n6.1 Gi statistics using fixed distance\nThe first code chunk computes Gi statistics using a fixed distance weight matrix (wm62_lw). The resulting Gi values are Z-scores, where greater values indicate stronger clustering intensity. We then join these Gi values to the original data frame for visualization.\n\n\nCode\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe Gi statistics, represented as Z-scores, are now linked to the original data frame. We visualize these values on a map using a choropleth map, where colors indicate the intensity and direction of clustering.\n\n\nCode\n# Combine the Gi statistics with the original data frame 'hunan'\n# Convert the Gi vector ('gi.fixed') to a matrix and bind it to the original data frame ('hunan')\n# Rename the newly added column to 'gstat_fixed'\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n# Create a quick thematic map (qtm) of the original data frame ('hunan') for GDP per capita ('GDPPC')\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\n# Create a thematic map (Gimap) for Gi statistics using the 'tm' package\n# Shape the map based on the combined data frame ('hunan.gi')\nGimap &lt;-tm_shape(hunan.gi) +\n  # Fill the map with colors based on 'gstat_fixed' column\n  tm_fill(col = \"gstat_fixed\", \n          # Use the 'pretty' style for color breaks\n          style = \"pretty\",\n          # Choose the RdBu color palette\n          palette=\"-RdBu\",\n          # Set the title for the legend\n          title = \"local Gi\") +\n  # Add semi-transparent borders to map features\n  tm_borders(alpha = 0.5)\n\n# Arrange the original GDP per capita map and the Gi map side by side\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\n\n\nThe Gi* map (Getis-Ord Gi* statistic) for the GDP per Capita of counties in Hunan, China, suggests spatial hotspots and cold spots of economic wealth. The map on the right indicates areas with high Gi* values (in red), revealing clusters of counties with significantly high GDP per Capita—these are the hotspots of economic activity. Conversely, the blue areas represent cold spots with low Gi* values, indicating clusters of counties with low GDP per Capita. Notably, the central to northeast region shows a strong concentration of wealth with a Gi* value between 5 to 6, indicating a very high degree of clustering of economic affluence. This pattern highlights the unequal distribution of economic wealth across the region, with certain areas being significantly more prosperous than others, which can inform targeted economic development and policy intervention strategies.\n\n\n\n6.2 Gi statistics using adaptive distance\nNow, we repeat the process using an adaptive distance weight matrix (knn_lw). This allows us to consider different distances for each location based on their neighbors, providing a more flexible approach.\n\n\nCode\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\nThe Gi values based on adaptive distance weights are joined to the original data frame. Again, we visualize these values on a choropleth map to observe patterns.\n\n\nCode\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\n\n\n\n\n\nThe Gi map with adaptive distance shows a clear delineation of economic clustering across the Hunan area. Compared to the previous fixed distance Gi map, the adaptive distance approach may provide a more nuanced view of spatial relationships, adjusting for varying densities of counties. This can highlight economic disparities more precisely, as the fixed distance may overemphasize or underrepresent clustering due to uniform application of distance across varied geographical spaces. The adaptive map might therefore offer a more accurate representation of spatial economic patterns, potentially revealing more localized clusters that are not as apparent with a fixed distance approach."
  },
  {
    "objectID": "hands-on/hoe1.html",
    "href": "hands-on/hoe1.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "Data Wrangling Illustration"
  },
  {
    "objectID": "hands-on/hoe1.html#overview",
    "href": "hands-on/hoe1.html#overview",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "1 Overview",
    "text": "1 Overview\nThis hands-on exercise is about importing and wrangling geospatial data using appropriate R packages."
  },
  {
    "objectID": "hands-on/hoe1.html#getting-started",
    "href": "hands-on/hoe1.html#getting-started",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nThe code chunk below install and load sf and tidyverse packages into R environment.\n\npacman::p_load(sf, tidyverse, tmap)"
  },
  {
    "objectID": "hands-on/hoe1.html#importing-geospatial-data",
    "href": "hands-on/hoe1.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "3 Importing Geospatial Data",
    "text": "3 Importing Geospatial Data\nThe data import process uses a tool called st_read. It is a function to read different types of maps, in the format/extension such as .shp, .dbf, .prj, and .shx. The function use the following parameters:\n\nLocation Instruction (dsn Parameter): This part is specifying where to find the map files. In our case, the maps are in a folder called “../data/geospatial.”\nLayer Instruction (layer Parameter): This part is specifying focus on a specific aspect of the maps. Think of the maps as a big book, and a layer is like a section that talks about a particular topic. In our example, we’re interested in a section named “MP14_SUBZONE_WEB_PL,” which contains information about areas called subzones.\n\n\nPolygon Data in Shapefile FormatPolyline Data in Shapefile FormGIS data in KML format\n\n\n\nmpsz &lt;- st_read(dsn = \"../data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\ameernoor\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nShapefiles are a common geospatial vector data format used to represent geographic features such as points, lines, and polygons. In this case, MP14_SUBZONE_WEB_PL is a layer within the shapefile containing polygon features, which could represent, for example, subzones in a geographic region. The Master Plan 2014 Subzone Boundary (Web) data is a forward looking guiding plan for Singapore’s development in the medium term over the next 10 to 15 years Development Master Plan 2014. Subzones are divisions within a planning area which are usually centred around a focal point such as neighbourhood centre or activity node. There can be more than 10 subzones within a Planning Area. The data is sourced from Singapore Government\n\n\n\n\ncyclingpath &lt;- st_read(dsn = \"../data/geospatial\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\ameernoor\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\nThis code imports polyline feature data from a shapefile. Polylines are sequences of connected straight lines and are commonly used to represent linear features such as roads, rivers, or cycling paths. In this case, the data are line representations of an intra-town path around Singapore designated for cyclists, excluding park connectors. The data is sourced from Land Transport Authority\n\n\n\n\npreschool &lt;- st_read(dsn = \"../data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\ameernoor\\ISSS624\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nThis code import GIS (Geographic Information System) in KML format. KML (Keyhole Markup Language) is an XML-based format often used for expressing geographic annotation and visualization within Internet-based, two-dimensional maps and three-dimensional Earth browsers. In this example, the code imports geospatial data representing the location of pre-schools (childcare centres and kindergartens) around Singapore from a KML file. The data is sourced from Singapore Government"
  },
  {
    "objectID": "hands-on/hoe1.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "hands-on/hoe1.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "4 Checking the Content of A Simple Feature Data Frame",
    "text": "4 Checking the Content of A Simple Feature Data Frame\nWhen working with a geospatial data frame like ‘mpsz’ (or any dataset in general), it’s essential to understand its structure and content. The following codes are for checking and understanding the data:\n\nExtracting Geometric Information with st_geometry.Overview of Data Structure with ‘glimpse’Previewing Data with ‘head’\n\n\nThe st_geometry function is used to extract the geometric information (shapes) from the mpsz (Master Plan Subzone Boundary 2014) feature data frame.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\n\nFrom the output of the code, it can be summarized that:\n\nThe dataset contains 323 features, each representing a geographic entity. The geometry type used is MULTIPOLYGON, indicating that these features consist of multiple connected polygons.\nThe dimension is XY, implying that the geometry is represented in a two-dimensional space with X and Y coordinates.\nThe bounding box provides the spatial extent of the dataset which includes xmin (minimum X-coordinate), ymin (minimum Y-coordinate), xmax (maximum X-coordinate), and ymax (maximum Y-coordinate)\nProjection Information: The data is projected in the SVY21 coordinate reference system (CRS). SVY21 is a coordinate system used in Singapore for accurate spatial representation.\nFirst 5 Geometries: The output displays the geometries for the first 5 features in the dataset, each represented as a MULTIPOLYGON.\n\n\n\n\nThe glimpse function is employed to obtain a quick overview of the structure and content of the ‘mpsz’ data frame, offering insights into its shape, variables and data types.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\nFrom the output of the code, it can be summarized that the dataset contains 323 row and 16 columns, with various data type including integer (int), characters/string (chr), date, double-precision floating-point/64bit float (dbl), and multipolygon\n\n\n\nThe head function is utilized to display the initial 5 rows of the ‘mpsz’ data frame, providing a glimpse of its data values. The n=5 parameter specifies the number of rows to be shown (in this case, the first 5 rows).\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\nThe output describes the data as a Simple feature collection with 5 features and 15 fields. Note that the features will change in accordance with the numer in the ‘n’ parameter changed. Field represents the number of columns in the dataset. Note that it only count 15 columns in the dataset as opposed to 16 columns in ‘glimpse’ function. It is because of the ‘geometry’ column is not counted as a ‘geometry’ column is not counted as a ‘simple feature’."
  },
  {
    "objectID": "hands-on/hoe1.html#visualizing-the-geospatial-data-on-chartplot",
    "href": "hands-on/hoe1.html#visualizing-the-geospatial-data-on-chartplot",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "5 Visualizing the Geospatial Data on Chart/Plot",
    "text": "5 Visualizing the Geospatial Data on Chart/Plot\nIn geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. THe following visualization use plot function from sf library. Note that ‘plot()’ function is mean for plotting the geospatial object for quick look. For high cartographic quality plot, other R package such as tmap should be used.\n\nPlotting All FeaturesPlotting Only the Geometric ShapesPlotting Based on a Specific Attribute\n\n\nThe plot function is used to visualize all features in the ‘mpsz’ dataset. The max.plot parameter limits the display to a maximum of 15 features\n\nplot(mpsz, max.plot = 15)\n\n\n\n\n\n\nHere, the plot function is applied to display only the geometric shapes from the ‘mpsz’ dataset. The st_geometry function extracts the geometries, and the plot focuses solely on the spatial representation.\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\nThis code utilizes the plot function to visualize features from the ‘mpsz’ dataset based on the attribute “PLN_AREA_N.” The resulting plot highlights spatial distributions based on the specified attribute, providing insights into the geographic distribution of the selected feature.\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "hands-on/hoe1.html#working-with-projection",
    "href": "hands-on/hoe1.html#working-with-projection",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "6 Working with Projection",
    "text": "6 Working with Projection\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system. In this section, you will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called projection transformation.\n\n6.1 Assigning EPSG code to a simple feature data frame\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\n\nChecking default EPSG CodeCorrecting EPSG CodeChecking Correction Result\n\n\nThe st_crs is a function to retrieve coordinate reference system from sf or sfc object. In this case, it is used to obtain the current EPSG code of the ‘mpsz’ dataset, providing information about its current coordinate reference system. The EPSG code (European Petroleum Survey Group) is a standardized identifier used to uniquely reference a coordinate reference system.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\n\nAlthough mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414. This code assigns the EPSG code 3414 to the ‘mpsz’ dataset, ensuring that it adheres to the SVY21 coordinate reference system (EPSG 3414) for accurate spatial representation.\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\n\n\nThe following code is to re-run st_crs to verify that the correction was successful by displaying the updated EPSG code (EPSG 3414) of the ‘mpsz3414’ dataset.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\n\n\n6.2 Transforming the projection of preschool from wgs84 to svy21\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements. This following code utilizes st_transform to convert the projection of the preschool dataset from the WGS84 coordinate system to the SVY21 coordinate system (EPSG 3414). This transformation ensures compatibility with other spatial data in the SVY21 projection.\n\npreschool3414 &lt;- st_transform(preschool, crs = 3414)"
  },
  {
    "objectID": "hands-on/hoe1.html#importing-and-converting-an-aspatial-data",
    "href": "hands-on/hoe1.html#importing-and-converting-an-aspatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "7 Importing and Converting an Aspatial Data",
    "text": "7 Importing and Converting an Aspatial Data\nIn practice, it is not unusual that we will come across data such as listing of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points. In this section, you will learn how to import an aspatial data into R environment and save it as a tibble data frame. Next, you will convert it into a simple feature data frame.\n\nImporting the aspatial dataCreating a simple feature data frame from an aspatial data frame\n\n\nSince listings data set is in csv file format, we will use read_csv() of readr package to import listing.csv as shown the code chunk below. The output R object is called listings and it is a tibble data frame.\n\nlistings &lt;- read_csv(\"../data/aspatial/listings.csv\")\n\nDisplaying the Aspatial Data This code displays the content of the ‘listings’ data frame, providing a preview of its structure and values.\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,483 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Villa in…  367042 Belinda   East Region         Tampines          1.35\n 2  71896 Home in …  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Home in …  367042 Belinda   East Region         Tampines          1.35\n 4 275343 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Home in …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 Rental u… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 369141 Place to… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,473 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\n\nThe output reveals that listing tibble data frame consists of 4252 rows and 16 columns. Two useful fields we are going to use in the next phase are latitude and longitude. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System.\n\n\n\nThis code converts the listings data frame into a simple feature data frame named listings_sf. It assigns coordinates and transforms the CRS to SVY21 (EPSG 3414) for accurate spatial representation\n\nlistings_sf &lt;- st_as_sf(listings, coords = c(\"longitude\", \"latitude\"), crs=4326) %&gt;% st_transform(crs = 3414)\n\n\nThings to learn from the arguments above: - coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates. - crs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io. - %&gt;% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\nexamine the content using glimpse function\n\nglimpse(listings_sf)\n\nRows: 3,483\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Villa in Singapore · ★4.44 · 2 bedroom…\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; 150, 80, 80, 55, 69, 220, 85, 75, 45, 7…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 92, 60, 60, 92,…\n$ number_of_reviews              &lt;dbl&gt; 20, 24, 47, 22, 17, 12, 133, 18, 6, 81,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.14, 0.16, 0.31, 0.17, 0.12, 0.09, 0.9…\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 52, 52, 5, 7, 52, 52, 7, 7, 1,…\n$ availability_365               &lt;dbl&gt; 89, 89, 89, 275, 274, 89, 365, 365, 365…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 3, 0, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\nTable above shows the content of listing_sf. Notice that a new column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been dropped from the data frame."
  },
  {
    "objectID": "hands-on/hoe1.html#geoprocessing-with-sf-package",
    "href": "hands-on/hoe1.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "8 Geoprocessing with sf package",
    "text": "8 Geoprocessing with sf package\nBesides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions. In this section, you will learn how to perform two commonly used geoprocessing functions, namely buffering and point in polygon count.\n\nBufferingPoint-in-polygon count\n\n\nThe scenario: The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to\nThe solution: determine the extend of the land need to be acquired and their total area. This code calculates 5-meter buffers around cycling paths and stores the result in the ‘buffer_cycling’ dataset.\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, dist=5, nQuadSegs = 30)\n\ncalculate the area of buffers The code adds a new column, ‘AREA,’ to the ‘buffer_cycling’ dataset, containing the calculated area of each buffer.\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nderive the total land involved\n\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]\n\n\n\n\nThe scenario A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\n** The solution: The code counts the number of pre-schools within each Planning Subzone using the st_intersects() function and updates the ‘PreSch Count’ column in the ‘mpsz3414’ dataset. Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\nmpsz3414$'PreSch Count'&lt;- lengths(st_intersects(mpsz3414, preschool3414)) \n\nchecking the summary statistics\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nchecking the subzone with most number of pre-school To list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used as shown in the code chunk below.\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\ncalculating the density of pre-school by planning subzone This code calculates the area of each Planning Subzone and adds a new column, ‘Area,’ to the ‘mpsz3414’ dataset.\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\ncompute pre-schoold density The code computes the density of pre-schools per square kilometer for each Planning Subzone, providing a measure of the concentration of educational facilities in different areas.\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "hands-on/hoe1.html#exploratory-data-analysis-eda",
    "href": "hands-on/hoe1.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "9 Exploratory Data Analysis (EDA)",
    "text": "9 Exploratory Data Analysis (EDA)\nIn practice, many geospatial analytics start with Exploratory Data Analysis. In this section, you will learn how to use appropriate ggplot2 functions to create functional and yet truthful statistical graphs for EDA purposes.\n\nPlotting histogram for PreSch DensityPlot better histogram using GG PlotPlot a scatterplot using GGPlot\n\n\nThe histogram visualizes the distribution of pre-school density across different Planning Subzones, providing insights into the variation and concentration of pre-schools in Singapore.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\nThis GG Plot-generated histogram offers a more detailed view of pre-school density, allowing for a nuanced exploration of the distribution in Planning Subzones. The chart provides additional context on the prevalence of single pre-school areas versus those with higher concentrations.\n\n\nCode\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\nThis scatterplot employs GG Plot to illustrate the relationship between pre-school density and count in different Planning Subzones. It helps identify patterns, clusters, or outliers, facilitating a comprehensive understanding of the distribution and concentration of pre-schools. The chart is limited to a specific range for clarity in visualization.\n\n\nCode\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  },
  {
    "objectID": "data/geospatial/Retails.html",
    "href": "data/geospatial/Retails.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "data/geospatial/Liesure&Recreation.html",
    "href": "data/geospatial/Liesure&Recreation.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "data/geospatial/F&B.html",
    "href": "data/geospatial/F&B.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "data/geospatial/Business.html",
    "href": "data/geospatial/Business.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "data/geospatial/entertn.html",
    "href": "data/geospatial/entertn.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "data/geospatial/FinServ.html",
    "href": "data/geospatial/FinServ.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "data/geospatial/MPSZ-2019.html",
    "href": "data/geospatial/MPSZ-2019.html",
    "title": "ISSS624 - Applied Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "hands-on/hoe1-choropleth.html",
    "href": "hands-on/hoe1-choropleth.html",
    "title": "Hands-on Exercise 1: Choropleth Mapping",
    "section": "",
    "text": "Painting Choropleth Map Illustration"
  },
  {
    "objectID": "hands-on/hoe1-choropleth.html#overview",
    "href": "hands-on/hoe1-choropleth.html#overview",
    "title": "Hands-on Exercise 1: Choropleth Mapping",
    "section": "1 Overview",
    "text": "1 Overview\nIn this hands-on exercise, we will continue on Exploratory Data Analysis, specifically using Choropleth Mapping\nChoropleth mapping is a way to represent regions, like countries or states, by using patterns or colors to show different values. For instance, a social scientist might use a choropleth map to display where the older population is located in Singapore based on the Master Plan 2014 Subzone Boundary.\nIn this chapter, you’ll discover how to create accurate and meaningful choropleth maps using an R package called tmap."
  },
  {
    "objectID": "hands-on/hoe1-choropleth.html#import-the-libraries",
    "href": "hands-on/hoe1-choropleth.html#import-the-libraries",
    "title": "Hands-on Exercise 1: Choropleth Mapping",
    "section": "2 Import The Libraries",
    "text": "2 Import The Libraries\nThe code chunk below install and load sf, tidyverse and tmap packages into R environment.\n\npacman::p_load(sf, tidyverse, tmap)"
  },
  {
    "objectID": "hands-on/hoe1-choropleth.html#importing-the-data",
    "href": "hands-on/hoe1-choropleth.html#importing-the-data",
    "title": "Hands-on Exercise 1: Choropleth Mapping",
    "section": "3 Importing The Data",
    "text": "3 Importing The Data\nWe’ll use two sets of information to make the choropleth map:\n\nMaster Plan 2014 Subzone Boundary (Web): This is a map file that shows the shape of different areas in Singapore, specifically at the planning subzone level. The data can be downloaded from Singapore Government\nSingapore Residents Data (June 2011-2020): This is a list of information about people living in Singapore, like how many people are in different age groups, their gender, and the type of homes they live in. This data is in a CSV file (respopagesextod2011to2020.csv). The data can be downloaded from the Department of Statistics, Singapore. Even though it doesn’t have actual location coordinates, it has fields called PA and SZ that can help match it to the shapes in the MP14_SUBZONE_WEB_PL file.\n\n\nGeospatial Data (Subzone Boundary)Attribute Data\n\n\nThe code below does the following 1. uses the st_read() function from the sf package to bring in the MP14_SUBZONE_WEB_PL shapefile into R, and import it as a simple feature data frame named mpsz. 2. display the data frame by calling mpsz\n\nmpsz &lt;- st_read(dsn = \"../data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\ameernoor\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\nNote that only the first ten records are displayed. By default, R shows a summary of only the first few rows to minimize resource usage and avoid overwhelming the user. To see more rows, you can use functions like head() and specify the n parameter, e.g. head(mpsz, n = 20) to display the first 20 rows.\n\n\n\nNext, we’re going to bring in the respopagsex2011to2020.csv file into RStudio and store it in a data table named popdata. We’ll do this using the read_csv() function from the readr package, as you can see in the code snippet below.\n\npopdata &lt;- read_csv(\"../data/aspatial/respopagesextod2011to2020.csv.gz\")"
  },
  {
    "objectID": "hands-on/hoe1-choropleth.html#data-preparation",
    "href": "hands-on/hoe1-choropleth.html#data-preparation",
    "title": "Hands-on Exercise 1: Choropleth Mapping",
    "section": "4 Data Preparation",
    "text": "4 Data Preparation\nBefore making a special map, you need to create a table with data for the year 2020. This table should have information about different areas (PA, SZ) and various age groups like YOUNG (0-4 to 20-24), ECONOMY ACTIVE (25-29 to 60-64), AGED (65 and above), TOTAL (all age groups), and DEPENDENCY (the ratio of young and aged people to the economy-active group).\n\nData WranglingJoining the attribute data and geospatial data\n\n\nWe’ll be using some functions to shape our data the way we want: - pivot_wider() from tidyr package - mutate(), filter(), group_by(), and select() from dplyr package\nThe code will do the following steps in order: - Filter the data: It only keeps the rows where the Time column is 2020. - Group the data: It groups the data by PA (Planning Area), SZ (Subzone), and AG (Age Group). - Summarize the data: It calculates the sum of the Pop column for each group. - Reshape the data: It spreads the data wide, turning the Age Group values into separate columns. - Create new columns: It calculates the YOUNG, ECONOMY ACTIVE, AGED, TOTAL, and DEPENDENCY values based on the grouped and summarized data. - Select the columns: It picks the specific columns to be kept in the final data table.\n\n\nCode\n# Filter the 'popdata' dataset for the year 2020\npopdata2020 &lt;- popdata %&gt;%\n\n  # Keep only records where 'Time' is equal to 2020\n  filter(Time == 2020) %&gt;%\n\n  # Group the data by 'PA', 'SZ', and 'AG'\n  group_by(PA, SZ, AG) %&gt;%\n\n  # Summarize the data by calculating the sum of 'Pop' for each group\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n\n  # Ungroup the data to remove grouping constraints\n  ungroup() %&gt;%\n\n  # Reshape the data by widening it using 'AG' as column names and 'POP' as values\n  pivot_wider(names_from = AG, values_from = POP) %&gt;%\n\n  # Create a new column 'YOUNG' by summing specific columns\n  mutate(YOUNG = rowSums(.[3:6]) + rowSums(.[12])) %&gt;%\n\n  # Create a new column 'ECONOMY ACTIVE' by summing specific columns\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11]) + rowSums(.[13:15])) %&gt;%\n\n  # Create a new column 'AGED' by summing specific columns\n  mutate(`AGED` = rowSums(.[16:21])) %&gt;%\n\n  # Create a new column 'TOTAL' by summing specific columns\n  mutate(`TOTAL` = rowSums(.[3:21])) %&gt;%\n\n  # Create a new column 'DEPENDENCY' by calculating a ratio\n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`) / `ECONOMY ACTIVE`) %&gt;%\n\n  # Select specific columns for the final dataset\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)\n\n# Display a summary of the 'popdata2020' dataset\nglimpse(popdata2020)\n\n\nRows: 332\nColumns: 7\n$ PA               &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio…\n$ SZ               &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Cheng San\", \"Chong Boon\", …\n$ YOUNG            &lt;dbl&gt; 1440, 6640, 6150, 5540, 2100, 3960, 2220, 4690, 0, 12…\n$ `ECONOMY ACTIVE` &lt;dbl&gt; 2610, 15460, 13950, 12090, 3410, 8420, 4200, 11450, 0…\n$ AGED             &lt;dbl&gt; 760, 6050, 6470, 5120, 1310, 3610, 1530, 5100, 0, 750…\n$ TOTAL            &lt;dbl&gt; 4810, 28150, 26570, 22750, 6820, 15990, 7950, 21240, …\n$ DEPENDENCY       &lt;dbl&gt; 0.8429119, 0.8208279, 0.9046595, 0.8817204, 1.0000000…\n\n\nExport the Dataset\n\n\nCode\n# Install and load the 'writexl' package if not already installed\nif (!requireNamespace(\"writexl\", quietly = TRUE)) {\n  install.packages(\"writexl\")\n}\n\n# Load the 'writexl' package\nlibrary(writexl)\n\n# Export 'popdata2020' dataset to an Excel file named 'popdata2020.xlsx'\nwrite_xlsx(popdata2020, path = \"../data/aspatial/popdata2020.xlsx\")\n\n\n\n\nBefore we can combine our geographic and population data, we need to make sure the values in the PA and SZ fields are all in uppercase. This is because these values have a mix of upper- and lowercase, while SUBZONE_N and PLN_AREA_N are all in uppercase.\nthe following code will change the values in the PA and SZ columns to uppercase. After that, it will filters out rows where the ECONOMY ACTIVE column is greater than 0.\n\n\nCode\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\nglimpse(popdata2020)\n\n\nRows: 234\nColumns: 7\n$ PA               &lt;chr&gt; \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO…\n$ SZ               &lt;chr&gt; \"ANG MO KIO TOWN CENTRE\", \"CHENG SAN\", \"CHONG BOON\", …\n$ YOUNG            &lt;dbl&gt; 1440, 6640, 6150, 5540, 2100, 3960, 2220, 4690, 1220,…\n$ `ECONOMY ACTIVE` &lt;dbl&gt; 2610, 15460, 13950, 12090, 3410, 8420, 4200, 11450, 2…\n$ AGED             &lt;dbl&gt; 760, 6050, 6470, 5120, 1310, 3610, 1530, 5100, 750, 4…\n$ TOTAL            &lt;dbl&gt; 4810, 28150, 26570, 22750, 6820, 15990, 7950, 21240, …\n$ DEPENDENCY       &lt;dbl&gt; 0.8429119, 0.8208279, 0.9046595, 0.8817204, 1.0000000…\n\n\nNow, we’re using left_join() from the dplyr package to connect our geographical data and the population attribute table. This connection is made using planning subzone names, specifically SUBZONE_N in the geographical data and SZ in the attribute table, as the common identifier.\n\n\nCode\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\nglimpse(mpsz_pop2020)\n\n\nRows: 323\nColumns: 22\n$ OBJECTID         &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16…\n$ SUBZONE_NO       &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, …\n$ SUBZONE_N        &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERS…\n$ SUBZONE_C        &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BM…\n$ CA_IND           &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\"…\n$ PLN_AREA_N       &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT M…\n$ PLN_AREA_C       &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\",…\n$ REGION_N         &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\",…\n$ REGION_C         &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC          &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13…\n$ FMEL_UPD_D       &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014…\n$ X_ADDR           &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 253…\n$ Y_ADDR           &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 299…\n$ SHAPE_Leng       &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 442…\n$ SHAPE_Area       &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.4…\n$ PA               &lt;chr&gt; NA, \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\", \"BUKI…\n$ YOUNG            &lt;dbl&gt; NA, 1200, 0, 3150, 2900, 3340, 3130, 0, 1290, 50, NA,…\n$ `ECONOMY ACTIVE` &lt;dbl&gt; NA, 2860, 40, 6900, 6020, 6800, 7700, 50, 2600, 140, …\n$ AGED             &lt;dbl&gt; NA, 2120, 10, 3320, 1740, 3420, 3610, 10, 610, 60, NA…\n$ TOTAL            &lt;dbl&gt; NA, 6180, 50, 13370, 10660, 13560, 14440, 60, 4500, 2…\n$ DEPENDENCY       &lt;dbl&gt; NA, 1.1608392, 0.2500000, 0.9376812, 0.7707641, 0.994…\n$ geometry         &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOL…\n\n\n\nleft_join() is used with mpsz simple feature data frame as the left data table to ensure that the output will be a simple features data frame.\n\nLastly, the write_rds() function is used to save our combined data (stored in the mpsz_pop2020 data frame) into an RDS file.\n\nwrite_rds(mpsz_pop2020, \"../data/rds/mpszpop2020.rds\")\n\n\nAn RDS file is a binary file format used in R to store single R objects. It stands for R Data Store. This file format is efficient for saving and loading R objects because it preserves the object’s structure, including its data type, attributes, and metadata. Unlike other formats like CSV or Excel, RDS files are tailored for R-specific objects and are typically smaller in size. When you save an object as an RDS file, you can later load it back into R using the read_rds() function to retrieve the exact R object with all its properties intact. It’s a handy way to store and share R data without losing any of the specific characteristics of the objects."
  },
  {
    "objectID": "hands-on/hoe1-choropleth.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "hands-on/hoe1-choropleth.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 1: Choropleth Mapping",
    "section": "5 Choropleth Mapping Geospatial Data using tmap",
    "text": "5 Choropleth Mapping Geospatial Data using tmap\nThere are two ways to make a thematic map using tmap: - Quick Approach: Use qtm() to swiftly draw a choropleth map. - Customizable Approach: Create a highly customizable thematic map by using tmap elements.\n\n5.1 Plotting choropleth map using qtm\nThe fastest way to draw a choropleth map using tmap is with qtm(). It’s straightforward and produces a solid default visualization in many cases.\nThe following code snippet will generate a standard choropleth map.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, fill = \"DEPENDENCY\")\n\n\n\n\n\n\n5.2 Creating a choropleth map by using tmap’s elements\nDespite its quick and easy way of making a choropleth map, the limitation of using qtm() is that it makes it challenging to control the appearance of individual map layers. For a high-quality cartographic choropleth map, it’s better to use tmap’s drawing elements.\nThe next code will do the following steps: - tm_shape(): This sets the spatial object (mpsz_pop2020) to be used in the map.\n\ntm_fill(): It fills the polygons with colors based on the “DEPENDENCY” column, using the quantile method and a blue color palette.\ntm_layout(): Defines the layout elements, including the main title, legend settings, frame, and other stylistic elements.\ntm_borders(), tm_compass(), tm_scale_bar(), tm_grid(): These add map embellishments such as borders, compass, scale bar, and grid.\ntm_credits(): Adds a text credit at the bottom left of the map, mentioning the data sources.\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\neach of the tmap functions that are used to create the plot can be seen in the following panel.\n\nbase maptm_polygonstm_filltm_border\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\nThe default interval binning used to draw the choropleth map is called “pretty”.\nThe default colour scheme used is YlOrRd of ColorBrewer.\nBy default, Missing value will be shaded in grey.\n\n\n\n\nwithout setting the border, the planning subzones will not have any boundary if the dependency value is the same\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\nParameters of tm_border(): - alpha = transparency. the default value is 1 (not transparent) - col = border colour, - lwd = border line width. The default is 1, and - lty = border line type. The default is “solid”.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\n\n\n5.3 Data Classification methods of tmap\nChoropleth maps usually use different ways to group data, and the goal is to organize a bunch of observations into specific ranges or groups.\ntmap offers ten methods to classify data, including fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo pick a data classification method, you use the style argument in tm_fill() or tm_polygons().\n\n5.3.1 Plotting choropleth maps with built-in classification methods\nThe following panel will compare various choropleth maps with built-in classification methods and constant n = 5\n\njenksequalsdprettyquantilehclustfisherfisher\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nUsing equal range data classification, the map is not too informative as the data is skewed\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nVarious method of classification can give highly different result. One of the main contributor is due to skewness and presence of outliers in the data. Classification method which is insensitive to it will give monotonous map, where only a few region have different color, and vice versa. As an analyst, domain knowledge is required to decide which classification method is the most appropriate (i.e. whether small differences between the Dependency data matters). Ultimately, the method chosen should be able to support the best decision making.\n\nThe following panel will compare various choropleth maps with different number of classes\n\njenks 2 classesequal 6 classesequal 10 classesequal 20 classes\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nsimilar to classification method, number of classes could matter in showing differences between area. with n set as 2, even jenks method become monotonous, revealing the outlier area. on the other hand, with n set as high as 20, even the equal method start to show differences between region, albeit subtle (due to high degree of skewness/presence of extreme outliers)\n\n\n\n5.3.2 Plotting choropleth map with custom break\nthe automated break calculation in previous method can be overriden by explicitly set the break arguments.\nbefore starting, the following code will show descriptive statistics to be used for break reference.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nwith reference to the summary statistics result, the break point is set at 0.60, 0.70, 0.80, and 0.90. The arguments also requires to include minimum and maximum value.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n5.4 Colour Scheme\nThe color scheme in tmap can be customized using user-defined or predefined color ramps from the RColorBrewer package.\nTo use a ColorBrewer palette, you assign the desired color to the palette argument of tm_fill(). If you want to change the color, you can do so by specifying the palette in the code.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nThe above choropleth map is shaded in green. To reverse the color shade use “-” prefix.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nThe colour scheme also changed with the new setting.\n\n\n5.5 Map Layouts\nMap layouts refer to combining all map elements into a cohesive map, including objects, title, scale bar, compass, margins, aspect ratios, color settings, and data classification methods. In tmap, various legend options are available to change the placement, format, and appearance of the legend. You can use tm_fill() along with tm_layout() to customize the legend based on your preferences. To change the style of layout, use tmap_style(). The following panel show how the various options are used.\n\nAdding legendClassic Map StyleCartographic Furniture Map Style\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nreset the tmap setting to default style.\n\ntmap_style(\"white\")\n\n\n\n5.6 Drawing Small Multiple Choropleth Maps\nSmall multiple choropleth maps, or facet maps, display many maps side-by-side or stacked vertically. tmap allows you to create small multiples in different ways, such as assigning multiple values to aesthetic arguments or using tm_facets().\nYou can also create small multiples by defining a group-by variable in tm_facets() or by creating multiple stand-alone maps with tmap_arrange(). Each method offers flexibility in visualizing spatial relationships.\n\nassigning multiple values to one aesthetic argumentsassigning multiple values to more than one aesthetic argumentsdefining a group-by variable in tm_facetscreating multiple stand-alone maps with tmap_arrange\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"), style = c(\"equal\", \"quantile\"), palette = list(\"Blues\",\"Greens\")) + tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nCode\nyoungmap &lt;- tm_shape(mpsz_pop2020) + tm_polygons(\"YOUNG\", style = \"quantile\", palette = \"Blues\")\nagedmap &lt;- tm_shape(mpsz_pop2020) + tm_polygons(\"AGED\", style = \"quantile\", palette = \"Blues\")\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n5.7 Mapping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth maps, you can use selection functions to map spatial objects meeting specific criteria. This allows you to focus on specific regions or areas in the map based on your selection criterion. The following code choose Central Region as example\n\n\nCode\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "hands-on/hoe2-globalautocor.html",
    "href": "hands-on/hoe2-globalautocor.html",
    "title": "Hands-on Exercise 2: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "Spaces are Clustered - Global Spatial Autocorrelation Illustration"
  },
  {
    "objectID": "hands-on/hoe2-globalautocor.html#overview",
    "href": "hands-on/hoe2-globalautocor.html#overview",
    "title": "Hands-on Exercise 2: Global Measures of Spatial Autocorrelation",
    "section": "1 Overview",
    "text": "1 Overview\nIn this part, we’ll explore Global and Local Measures of Spatial Autocorrelation (GLSA) using the spdep package. Specifically, this 2B exercise will focus on Global Measures of Spatial Autocorrelation while the Local Spatial Autocorrelation will be explored in 2C exercise. The new learning objectives includes: - Compute Global Spatial Autocorrelation (GSA) statistics using spdep. - Plot Moran scatterplot. - Compute and plot spatial correlogram with spdep. - Visualize the analysis output using the tmap package.\n\nGlobal measures of spatial autocorrelation provide a single summary statistic for an entire dataset, reflecting the overall degree of geographical clustering or dispersion. A commonly used global measure is Moran’s I, which helps to determine whether attribute values in a dataset are clustered together or spread apart. However, it doesn’t specify where these clusters or outliers are located on the map. Essentially, these measures give a general idea of spatial patterns across the whole study area but don’t provide detailed insights into local variations or specific areas summarized from: Wu and Kemp, 2019\n\n\n1.1 The analytical question\nIn spatial policy, local governments aim for an even distribution of development within a region. This exercise focuses on applying spatial statistical methods to investigate if development is evenly distributed in a province. If not, the next questions are: Is there evidence of spatial clustering? And if yes, where are these clusters?\nThe case study and data being explored is the same as previous exercise (2A), which are GDP per capita (GDPPR) in Hunan Province , People’s Republic of China.\n\n\n1.2 Setting Up the Analytical Tools\nEnsure that spdep, sf, tmap, and tidyverse packages in R are installed. These packages are used for importing and handling geospatial data, wrangling attribute data, computing spatial weights, and visualizing the results. The code below checks for and installs missing packages:\n\n\nCode\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "hands-on/hoe2-globalautocor.html#import-and-visualize-the-data",
    "href": "hands-on/hoe2-globalautocor.html#import-and-visualize-the-data",
    "title": "Hands-on Exercise 2: Global Measures of Spatial Autocorrelation",
    "section": "2 Import and Visualize the Data",
    "text": "2 Import and Visualize the Data\nSimilar to previous exercise, firstly the data needs to be imported, joined, and visualized to get the big picture.\n\n\nCode\n#import geospatial data\nhunan &lt;- st_read(dsn = \"../data/geospatial\", \n                 layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source `C:\\ameernoor\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nCode\n# import aspatial data\nhunan2012 &lt;- read_csv(\"../data/aspatial/Hunan_2012.csv\")\n\n# perform relational join\nhunan &lt;- left_join(hunan, hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\n# visualize the data\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\", n = 5, style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\", main.title.size = 1,\n            main.title.position = \"center\", legend.outside = TRUE,\n            legend.outside.position = \"bottom\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\", n = 5, style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\", main.title.size = 1,\n            main.title.position = \"center\", legend.outside = TRUE,\n            legend.outside.position = \"bottom\")\n\ntmap_arrange(equal, quantile, asp=1, ncol=2)"
  },
  {
    "objectID": "hands-on/hoe2-globalautocor.html#global-spatial-autocorrelation",
    "href": "hands-on/hoe2-globalautocor.html#global-spatial-autocorrelation",
    "title": "Hands-on Exercise 2: Global Measures of Spatial Autocorrelation",
    "section": "3 Global Spatial Autocorrelation",
    "text": "3 Global Spatial Autocorrelation\nIn this section, we’ll explore how to calculate global spatial autocorrelation statistics and conduct a test for spatial randomness across the entire study area.\n\n3.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area which use queen method in this example. After that weights needs to be assigned to each neighboring polygon, which use row-standardized weights matrix. Details on the concept was discussed in previous exercise.\n\n\nCode\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nCode\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n3.2 Global Spatial Autocorrelation: Moran’s I\n\nMoran’s I testMonte Carlo Moran’s IVisualising Monte Carlo Moran’s I\n\n\nNow, let’s perform a test for Moran’s I statistic, which assesses spatial autocorrelation. The test is performed using moran.test() of spdep.\n\n\nCode\nmoran.test(hunan$GDPPC, listw=rswm_q, zero.policy = TRUE, na.action=na.omit)\n\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\nThe statistical output indicates a Moran’s I statistic of 0.30, which is a measure of spatial autocorrelation. The standard deviate is 4.7351, leading to a very low p-value of 1.095e-06. The alternative hypothesis suggests a “greater” spatial autocorrelation. Based on the output, we can conclude that there is a strong and significant positive spatial autocorrelation in the GDPPC of Hunan county. This means that counties with similar GDPPC tend to be close to each other on the map. In other words, there is a spatial pattern of high-income and low-income counties in Hunan.\n\n\n\nNext, perform a permutation test for Moran’s I using the moran.mc() function of spdep. This involves running 1000 simulations.\n\n\nCode\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nThe associated p-value is 0.001, indicating statistical significance. The alternative hypothesis of “greater” spatial autocorrelation aligns with the initial Moran’s I test. This Monte Carlo simulation provides additional evidence supporting the presence of positive spatial autocorrelation in the GDP per capita values across the study area.\n\n\n\nTo gain more insights, we plot the distribution of simulated Moran’s I values using a histogram. the code use hist() and abline() of R Graphics are used.\n\n\nCode\nmean(bperm$res[1:999])\n\n\n[1] -0.01504572\n\n\nCode\nvar(bperm$res[1:999])\n\n\n[1] 0.004371574\n\n\nCode\nsummary(bperm$res[1:999])\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\nCode\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\nThe histogram indicates that the simulated Moran’s I values follow a normal distribution with it’s bell-shaped characteristic\n\nthe next code chunk perform similar task, but using ggplot package\n\n\nCode\n# Extract the res column and convert it to a data frame\nres_df &lt;- data.frame(res = bperm$res)\n\n# Plot the histogram using ggplot2\nggplot(res_df, aes(x = res)) +\n  geom_histogram(bins = 20) +\n  geom_vline(xintercept = 0, color = \"red\") +\n  xlab(\"Simulated Moran's I\")\n\n\n\n\n\n\n\n\n\n\n3.3 Global Spatial Autocorrelation: Geary’s\nIn this part, we explore Geary’s C statistics to understand spatial autocorrelation in our data. Geary’s C test helps us determine if there’s any pattern of similarity or dissimilarity between neighboring areas.\n\nGeary’s C testComputing Monte Carlo Geary’s CVisualising the Monte Carlo Geary’s C\n\n\nThe provided R code conducts Geary’s C test using the geary.test() function from the spdep package. This test essentially examines if the values in one region are significantly different from the values in neighboring regions.\n\n\nCode\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\nThe Geary’s C test results in a significant p-value (less than the typical significance level of 0.05), indicating that the spatial autocorrelation observed in the data is unlikely due to random chance. The Geary C statistic (0.6907) being less than the expectation (1.0000) suggests a pattern of dissimilarity between neighboring regions. Additionally, the variance (0.0073) provides information about the variability of this dissimilarity. Overall, these results suggest a non-random spatial pattern of dissimilarity in the distribution of the GDP per capita in the study area.\n\n\n\nThis code snippet uses Monte Carlo simulation to test Geary’s C statistic for spatial autocorrelation, by using geary.mc() of spdep. By comparing the observed statistic to a distribution of simulated values, it helps us assess whether the observed pattern is statistically significant.\n\n\nCode\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nThe observed Geary’s C statistic is 0.69072, and it ranks first among the simulated values, with a p-value of 0.001. This suggests that there is a strong spatial autocorrelation in the distribution of GDPPC values, indicating a pattern of either spatial similarity or dissimilarity among neighboring regions. The alternative hypothesis of greater spatial autocorrelation is supported by the low p-value, signifying that the observed spatial pattern is unlikely to have occurred by random chance alone..\n\n\n\nThe next step involves creating a histogram to understand the distribution of simulated values and to see where our observed value falls on the spectrum.\n\n\nCode\nmean(bperm$res[1:999])\n\n\n[1] 1.004402\n\n\nCode\nvar(bperm$res[1:999])\n\n\n[1] 0.007436493\n\n\nCode\nsummary(bperm$res[1:999])\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\nCode\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\nSimilar to previous result, this histogram also indicates that the simulated Geary c values follow a normal distribution with it’s bell-shaped characteristic\n\n\n4 Spatial Correlogram\nSpatial correlograms offer insights into spatial autocorrelation patterns by plotting autocorrelation indices against increasing distances. They are useful for exploratory analysis.\n\n4.1 Compute Moran’s I correlogram\nIn this part, the sp.correlogram() of spdep package computes a Moran’s I correlogram for GDPPC. The resulting plot illustrates how Moran’s I values change as the distance between regions increases. In the code chunk below,\n\n\nCode\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\nIt’s important to inspect the full analysis report, which can be printed using the following code:\n\n\nCode\nprint(MI_corr)\n\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nThe spatial correlogram for hunan$GDPPC using Moran’s I method reveals that as the distance between regions increases, there is a statistically significant spatial autocorrelation. The estimate of Moran’s I indicates positive autocorrelation at various lag distances (1 to 6). The p-values associated with each lag distance are highly significant (indicated by the ***), suggesting that the observed spatial pattern is not due to random chance. This implies that regions with similar GDPPC values tend to cluster together, providing evidence for a non-random spatial distribution of economic development in Hunan province.\n\n\n\n4.2 Compute Geary’s C correlogram and plot\nSimilarly, we calculate a Geary’s C correlogram to understand how the spatial autocorrelation, measured by Geary’s C, changes with increasing distances.\n\n\nCode\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nPrint the analysis report for a more detailed understanding:\n\n\nCode\nprint(GC_corr)\n\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nThe Geary’s C correlogram for the GDPPC in Hunan Province indicates varying levels of spatial autocorrelation at different distance lags. The estimates at the first and second lags (distances) are significantly lower than the expected value, suggesting a pattern of positive spatial autocorrelation, meaning similar values tend to cluster together. However, as the distance increases, the autocorrelation becomes non-significant (lag 3), indicating a decrease in similarity between neighboring regions. Subsequently, at lags 4, 5, and 6, there is a mix of significant and non-significant autocorrelation, suggesting a complex spatial pattern with pockets of both similarity and dissimilarity at these distances."
  },
  {
    "objectID": "hands-on/hoe2-globalautocor.html#spatial-correlogram",
    "href": "hands-on/hoe2-globalautocor.html#spatial-correlogram",
    "title": "Hands-on Exercise 2: Global Measures of Spatial Autocorrelation",
    "section": "4 Spatial Correlogram",
    "text": "4 Spatial Correlogram\nSpatial correlograms offer insights into spatial autocorrelation patterns by plotting autocorrelation indices against increasing distances. They are useful for exploratory analysis.\n\n4.1 Compute Moran’s I correlogram\nIn this part, the sp.correlogram() of spdep package computes a Moran’s I correlogram for GDPPC. The resulting plot illustrates how Moran’s I values change as the distance between regions increases. In the code chunk below,\n\n\nCode\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\nIt’s important to inspect the full analysis report, which can be printed using the following code:\n\n\nCode\nprint(MI_corr)\n\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nThe spatial correlogram for hunan$GDPPC using Moran’s I method reveals that as the distance between regions increases, there is a statistically significant spatial autocorrelation. The estimate of Moran’s I indicates positive autocorrelation at various lag distances (1 to 6). The p-values associated with each lag distance are highly significant (indicated by the ***), suggesting that the observed spatial pattern is not due to random chance. This implies that regions with similar GDPPC values tend to cluster together, providing evidence for a non-random spatial distribution of economic development in Hunan province.\n\n\n\n4.2 Compute Geary’s C correlogram and plot\nSimilarly, we calculate a Geary’s C correlogram to understand how the spatial autocorrelation, measured by Geary’s C, changes with increasing distances.\n\n\nCode\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nPrint the analysis report for a more detailed understanding:\n\n\nCode\nprint(GC_corr)\n\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nThe Geary’s C correlogram for the GDPPC in Hunan Province indicates varying levels of spatial autocorrelation at different distance lags. The estimates at the first and second lags (distances) are significantly lower than the expected value, suggesting a pattern of positive spatial autocorrelation, meaning similar values tend to cluster together. However, as the distance increases, the autocorrelation becomes non-significant (lag 3), indicating a decrease in similarity between neighboring regions. Subsequently, at lags 4, 5, and 6, there is a mix of significant and non-significant autocorrelation, suggesting a complex spatial pattern with pockets of both similarity and dissimilarity at these distances."
  },
  {
    "objectID": "hands-on/hoe2-spatialweight.html",
    "href": "hands-on/hoe2-spatialweight.html",
    "title": "Hands-on Exercise 2: Spatial Weights and Application",
    "section": "",
    "text": "Weighing Space Illustration"
  },
  {
    "objectID": "hands-on/hoe2-spatialweight.html#overview",
    "href": "hands-on/hoe2-spatialweight.html#overview",
    "title": "Hands-on Exercise 2: Spatial Weights and Application",
    "section": "1 Overview",
    "text": "1 Overview\n\nSpatial analysis is a method used to understand the significance of spatial relationships between different objects. It’s like figuring out how different pieces on a chessboard influence each other’s moves. Spatial weights are concepts that help us measure and analyze how different locations or regions are related to each other based on their proximity, similarity, or interaction. Spatial weights are numerical values that represent the strength or intensity of the connection between two spatial units, such as points, polygons, or pixels. Applications of spatial weights include detecting patterns, clusters, outliers, hot spots, or cold spots in spatial data, and testing hypotheses about spatial processes or phenomena. summarized from: Getis, 2010\n\nThe data used for practice in this exercise includes a map outlining the boundaries of Hunan county, presented as a geospatial dataset in ESRI shapefile format, and a CSV file named “Hunan_2012.csv,” which includes specific local development indicators for Hunan in the year 2012.\nThis exercise will help to get familiar with importing geospatial data using functions from the sf package, reading CSV files with functions from the readr package, conducting relational joins through functions from the dplyr package, computing spatial weights calculating spatially lagged variables using functions from the spdep package."
  },
  {
    "objectID": "hands-on/hoe2-spatialweight.html#preparing-the-library-and-data",
    "href": "hands-on/hoe2-spatialweight.html#preparing-the-library-and-data",
    "title": "Hands-on Exercise 2: Spatial Weights and Application",
    "section": "2 Preparing the Library and Data",
    "text": "2 Preparing the Library and Data\nThe following code chunk will import the required library:\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\nThe following panel will show how the data is imported and joined\n\nImport ShapefileImport CSVJoin the Geospatial and Aspatial Data\n\n\nthe following code use st_read() from sf package to import Hunan shapefile into simple features Object\n\nhunan &lt;- st_read(dsn = \"../data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source `C:\\ameernoor\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nglimpse(hunan)\n\nRows: 88\nColumns: 8\n$ NAME_2     &lt;chr&gt; \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Cha…\n$ ID_3       &lt;int&gt; 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 211…\n$ NAME_3     &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"L…\n$ ENGTYPE_3  &lt;chr&gt; \"County\", \"County\", \"County City\", \"County\", \"County\", \"Cou…\n$ Shape_Leng &lt;dbl&gt; 1.869074, 2.360691, 1.425620, 3.474325, 2.289506, 4.171918,…\n$ Shape_Area &lt;dbl&gt; 0.10056190, 0.19978745, 0.05302413, 0.18908121, 0.11450357,…\n$ County     &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"L…\n$ geometry   &lt;POLYGON [°]&gt; POLYGON ((112.0625 29.75523..., POLYGON ((112.2288 …\n\n\n\n\nthe following code use read_csv() from readr package to import\n\nhunan2012 &lt;- read_csv(\"../data/aspatial/Hunan_2012.csv\")\nglimpse(hunan2012)\n\nRows: 88\nColumns: 29\n$ County      &lt;chr&gt; \"Anhua\", \"Anren\", \"Anxiang\", \"Baojing\", \"Chaling\", \"Changn…\n$ City        &lt;chr&gt; \"Yiyang\", \"Chenzhou\", \"Changde\", \"Hunan West\", \"Zhuzhou\", …\n$ avg_wage    &lt;dbl&gt; 30544, 28058, 31935, 30843, 31251, 28518, 54540, 28597, 33…\n$ deposite    &lt;dbl&gt; 10967.0, 4598.9, 5517.2, 2250.0, 8241.4, 10860.0, 24332.0,…\n$ FAI         &lt;dbl&gt; 6831.7, 6386.1, 3541.0, 1005.4, 6508.4, 7920.0, 33624.0, 1…\n$ Gov_Rev     &lt;dbl&gt; 456.72, 220.57, 243.64, 192.59, 620.19, 769.86, 5350.00, 1…\n$ Gov_Exp     &lt;dbl&gt; 2703.0, 1454.7, 1779.5, 1379.1, 1947.0, 2631.6, 7885.5, 11…\n$ GDP         &lt;dbl&gt; 13225.0, 4941.2, 12482.0, 4087.9, 11585.0, 19886.0, 88009.…\n$ GDPPC       &lt;dbl&gt; 14567, 12761, 23667, 14563, 20078, 24418, 88656, 10132, 17…\n$ GIO         &lt;dbl&gt; 9276.90, 4189.20, 5108.90, 3623.50, 9157.70, 37392.00, 513…\n$ Loan        &lt;dbl&gt; 3954.90, 2555.30, 2806.90, 1253.70, 4287.40, 4242.80, 4053…\n$ NIPCR       &lt;dbl&gt; 3528.3, 3271.8, 7693.7, 4191.3, 3887.7, 9528.0, 17070.0, 3…\n$ Bed         &lt;dbl&gt; 2718, 970, 1931, 927, 1449, 3605, 3310, 582, 2170, 2179, 1…\n$ Emp         &lt;dbl&gt; 494.310, 290.820, 336.390, 195.170, 330.290, 548.610, 670.…\n$ EmpR        &lt;dbl&gt; 441.4, 255.4, 270.5, 145.6, 299.0, 415.1, 452.0, 127.6, 21…\n$ EmpRT       &lt;dbl&gt; 338.0, 99.4, 205.9, 116.4, 154.0, 273.7, 219.4, 94.4, 174.…\n$ Pri_Stu     &lt;dbl&gt; 54.175, 33.171, 19.584, 19.249, 33.906, 81.831, 59.151, 18…\n$ Sec_Stu     &lt;dbl&gt; 32.830, 17.505, 17.819, 11.831, 20.548, 44.485, 39.685, 7.…\n$ Household   &lt;dbl&gt; 290.4, 104.6, 148.1, 73.2, 148.7, 211.2, 300.3, 76.1, 139.…\n$ Household_R &lt;dbl&gt; 234.5, 121.9, 135.4, 69.9, 139.4, 211.7, 248.4, 59.6, 110.…\n$ NOIP        &lt;dbl&gt; 101, 34, 53, 18, 106, 115, 214, 17, 55, 70, 44, 84, 74, 17…\n$ Pop_R       &lt;dbl&gt; 670.3, 243.2, 346.0, 184.1, 301.6, 448.2, 475.1, 189.6, 31…\n$ RSCG        &lt;dbl&gt; 5760.60, 2386.40, 3957.90, 768.04, 4009.50, 5220.40, 22604…\n$ Pop_T       &lt;dbl&gt; 910.8, 388.7, 528.3, 281.3, 578.4, 816.3, 998.6, 256.7, 45…\n$ Agri        &lt;dbl&gt; 4942.253, 2357.764, 4524.410, 1118.561, 3793.550, 6430.782…\n$ Service     &lt;dbl&gt; 5414.5, 3814.1, 14100.0, 541.8, 5444.0, 13074.6, 17726.6, …\n$ Disp_Inc    &lt;dbl&gt; 12373, 16072, 16610, 13455, 20461, 20868, 183252, 12379, 1…\n$ RORP        &lt;dbl&gt; 0.7359464, 0.6256753, 0.6549309, 0.6544614, 0.5214385, 0.5…\n$ ROREmp      &lt;dbl&gt; 0.8929619, 0.8782065, 0.8041262, 0.7460163, 0.9052651, 0.7…\n\n\n\n\nThe following code use left_join() from dplyr package to merge the aspatial data to the geospatial data\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\nhead(hunan, n = 10)\n\nSimple feature collection with 10 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 26.28322 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "hands-on/hoe2-spatialweight.html#visualizing-regional-development-indicator",
    "href": "hands-on/hoe2-spatialweight.html#visualizing-regional-development-indicator",
    "title": "Hands-on Exercise 2: Spatial Weights and Application",
    "section": "3 Visualizing Regional Development Indicator",
    "text": "3 Visualizing Regional Development Indicator\nthis section will explore distribution of Gross Domestic Product Per Capita (GDPPC) 2012 in Hunan by creating base map and build choropleth map. qtm() from tmap package is used to build the map.\n\n\nCode\n# Creating The Basemap\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size = 0.5) +\n  tm_layout(main.title = \"Basemap\", main.title.position = \"left\")  # Add title\n\n# Creating The Choropleth Map\ngdppc &lt;- qtm(hunan, \"GDPPC\") +\n  tm_layout(main.title = \"Choropleth Map\", main.title.position = \"left\",\n            legend.outside = TRUE, legend.outside.position = 'right')  # adjust the legend\n\n# show the map\ntmap_arrange(basemap, gdppc, asp=1, ncol=2, widths = c(0.4,0.6))"
  },
  {
    "objectID": "hands-on/hoe2-spatialweight.html#computing-contiguity-spatial-weights",
    "href": "hands-on/hoe2-spatialweight.html#computing-contiguity-spatial-weights",
    "title": "Hands-on Exercise 2: Spatial Weights and Application",
    "section": "4 Computing Contiguity Spatial Weights",
    "text": "4 Computing Contiguity Spatial Weights\n\nContiguity Spatial Weights are used in spatial data analysis to understand how close or connected different geographic areas are to each other. Simply put, if two areas, like counties or neighborhoods, share a border, they’re considered “contiguous” or neighbors. This concept is important for understanding patterns like how a phenomenon in one area might affect neighboring areas. Two main criteria are used to define contiguity: ‘rook’ and ‘queen’. Rook contiguity means areas are neighbors if they share a common edge. Queen contiguity is a bit broader, including areas that share either a common edge or a corner. This is akin to the movements of rook and queen pieces in chess Summarized from: Anselin\n\n\n\n\nQueen vs Rook Contiguity\n\n\nSource: Research Gate\nThis section explore poly2nb() from spdep package to compute contiguity weight matrices. The function builds a neighbours list based on regions with contiguous boundaries. Using “queen” parameter that takes TRUE or FALSE as options, if it is set to TRUE, the function will return a list of first order neighbours using the Queen criteria.\n\nQueenRookVisualising Contiguity Weights\n\n\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe output summarizes the spatial relationships in Hunan using Queen’s contiguity method. There are 88 regions, and the analysis reveals a total of 448 connections among them. The percentage of nonzero weights, indicating connected regions, is approximately 5.79%. On average, each region has around 5.09 links with other regions. The distribution of links shows that most regions have 4 or 5 connections, with the least connected regions being 30 and 65, each having only 1 link. The most connected region is labeled as 85, with 11 links.\nto list all neighboring polygons of a unit, use wm_q as shown in the following code, where 1 represent the polygon Unit ID being shown, and the output shows the 5 negiboring polygon Unit ID\n\n\nCode\nwm_q[[1]]\n\n\n[1]  2  3  4 57 85\n\n\nto retrieve the name of the county, use the following code\n\n\nCode\nhunan$County[1]\n\n\n[1] \"Anxiang\"\n\n\nto retrieve county names of more than one polygons, use the following example that display the neigbor of Anxiang\n\n\nCode\nhunan$NAME_3[c(2,3,4,57,85)]\n\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nadditionally the GDDPC data of multiple countries can also be displayed using the following code\n\n\nCode\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n\n[1] 20981 34592 24473 21311 22879\n\n\nto display the complete weight matrix which represent the neigbors of each region, use the following code\n\n\nCode\nstr(wm_q)\n\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nSimilar to the example of Queen method, Rook method can be executed by changing queen parameter to False\n\n\nCode\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nAs expected from the stricter condition of Rook compared to Queen, the regions will have less neighbor on average\n\n\nTo create a connectivity graph, we first need to represent polygons as points. In our case, we’re working with polygons, so we’ll use polygon centroids as points for our graph. The common approach is to calculate these centroids using the sf package. To achieve this, we employ the st_centroid function on the geometry column of our spatial object (in this case, hunan). Since we require the coordinates in a separate data frame, we utilize a mapping function. This function applies st_centroid to each element of the geometry column and returns a vector of the same length. We specifically use the map_dbl variation from the purrr package. For latitude and longitude values, we extract them using double bracket notation, [[1]] for longitude and [[2]] for latitude. Finally, we combine these coordinates into a single object using cbind(), and we verify the formatting by checking the first few observations using head().\n\n\nCode\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\ncoords &lt;- cbind(longitude, latitude)\n\nhead(coords)\n\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\nNext, the following code will be used to display and compare Queen and Rook contiguity neighbours maps\n\n\nCode\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "hands-on/hoe2-spatialweight.html#computing-distance-based-neighbours",
    "href": "hands-on/hoe2-spatialweight.html#computing-distance-based-neighbours",
    "title": "Hands-on Exercise 2: Spatial Weights and Application",
    "section": "5 Computing Distance Based Neighbours",
    "text": "5 Computing Distance Based Neighbours\nIn this part, we will explore how to figure out which areas are close to each other using distances, by utilizing dnearneigh() function from the spdep package.\nThis function looks at points on a map and finds their neighbors based on how far apart they are. Range of distances can be set using bounds argument, with a lower limit d1= and an upper limit d2=. If the locations are given in regular coordinates (like x and y on a typical map) and latitude and longitude argument set to true (longlat=TRUE), the function measures distances in kilometers. It does this as if by figuring out how far it is on the Earth’s surface, using something called the WGS84 reference ellipsoid.\n\nThe WGS84 reference ellipsoid is a mathematical model that approximates the shape of the Earth. It’s not a perfect sphere but more like a slightly squashed ball, wider at the equator than at the poles. When measuring distances using this model, it considers the Earth’s curvature. This method provides a more accurate way to measure real distances on the Earth’s surface, especially over long distances where the Earth’s curvature becomes significant. It’s like tracing a line along the surface of an orange, rather than cutting straight through it.\n\nThe following part will explore how to find the right distance cut-off, fixed distance calculation, and adaptive distance calculation.\n\n5.1 Determine the cut-off distance\nTo find the right distance for the analysis, execute the following steps:\n\nUse knearneigh() to get a list of indices representing the k nearest neighbors for each point.\nConvert this list into a neighbor list with knn2nb().\nFind the lengths of these neighbor relationships with nbdists(). Remove any complex structure with unlist().\n\n\n\nCode\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary shows that the maximum distance to the first nearest neighbor is 61.79 km. Use it as threshold to ensure each unit has at least one neighbor.\n\n\n5.2 Computing fixed distance weight matrix\nBased on the previous knowledge, create the distance weight matrix using the specified distance range (0 to 62 km).\n\n\nCode\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\nThe “Average number of links: 3.681818” means that, on average, each location is linked to approximately 3.68 other locations within the specified distance range.\n\nWe can inspect the structure of the weight matrix using str() or combining table() and card() of spdep.\n\n\nCode\nstr(wm_d62)\n\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nthe output shows for who are the neighbors of each county (shown in unit ID list per row)\n\n\nCode\ntable(hunan$County, card(wm_d62))\n\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\nCode\nn_comp &lt;- n.comp.nb(wm_d62)\ntable(n_comp$comp.id)\n\n\n\n 1 \n88 \n\n\nthe table shows, for each county, how many neighbors it has.\n\nOverlapping Visualization\nThe red lines represent 1st nearest neighbors, while the black lines are links within the 62 km cut-off distance.\n\n\nCode\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\nSide by Side Visualization\n\n\nCode\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\n5.3 Computing adaptive distance weight matrix\nUsing fixed distance, densely settled urban areas tend to have more neigbours compared to rural. Having many neighbours smoothes the neighbour relationship across more neighbours. Number of neighbors can be adapted by accepting asymmetric neighbours or imposing symmetry.\nThe following code chunk impose 6 neighbors in the argument, hence the average number of links is 6 as well.\n\n\nCode\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nVisualize the weight matrix.\n\n\nCode\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "hands-on/hoe2-spatialweight.html#weights-based-on-idw",
    "href": "hands-on/hoe2-spatialweight.html#weights-based-on-idw",
    "title": "Hands-on Exercise 2: Spatial Weights and Application",
    "section": "6 Weights based on IDW",
    "text": "6 Weights based on IDW\nAnother method to derive spatial weight matrix is based on Inversed Distance method (IDW).\nCompute distance of areas using nbdists() of spdep.\n\n\nCode\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\nAssign equal weights (style=“W”) to neighboring polygons. It’s calculated by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.\n\nOne downside of using this approach is that regions at the edges of the study area might rely on fewer neighboring regions. This could lead to either overestimating or underestimating the real spatial connections in the data.\nFor a stronger and more reliable choice, you can use “style=B.”\n\n\n\nCode\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nBe careful when setting zero.policy=TRUE because it lets you have lists of regions that are not neighbors. This can be risky because you might not notice if some neighbors are missing in your data. On the other hand, using zero.policy=FALSE would result in an error if there are missing neighbors.\n\nCheck the weight of the first polygon’s eight neighbors with the following code chunk.\n\n\nCode\nrswm_q$weights[10]\n\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor gets a share of 0.125 from the total weight. This implies that when R calculates the average income of neighboring areas, it multiplies each neighbor’s income by 0.2 before adding them up.\nWe can apply a similar approach to create a distance weight matrix that is standardized by rows.\n\n\nCode\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\n\nCode\nrswm_ids$weights[1]\n\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\n\nCode\nsummary(unlist(rswm_ids$weights))\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "hands-on/hoe2-spatialweight.html#application-of-spatial-weight-matrix",
    "href": "hands-on/hoe2-spatialweight.html#application-of-spatial-weight-matrix",
    "title": "Hands-on Exercise 2: Spatial Weights and Application",
    "section": "7 Application of Spatial Weight Matrix",
    "text": "7 Application of Spatial Weight Matrix\nThis part will explore how to create four types of spatial lagged variables as shown in the panel.\n\nrow-standardized weights The following code computes the average neighbor GDPPC. These values are called spatially lagged values.Spatial lag as a sum of neighboring valuesSpatial window averageSpatial window sum\n\n\n\n\nCode\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecalling the GDPPC values obtained earlier for these five counties\n\n\nCode\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n\n[1] 20981 34592 24473 21311 22879\n\n\n\nSpatial Lag with Row-Standardized Weights method measures how much an observation at one location is influenced by observations at neighboring locations. The spatial lag is calculated as a weighted average, where the weights are standardized so that they add up to one for each location. This means that each location’s value is influenced equally by its neighbors, creating a balanced representation of neighboring influence. summarized from: Anselin\n\nWe can add the spatially lagged GDPPC values to the hunan sf data frame using the following code:\n\n\nCode\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\n\nThe table below shows the average neighboring income values for each region.\n\n\nCode\nhead(hunan)\n\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, plot both GDPPC and spatially lagged GDPPC for comparison.\n\n\nCode\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nusing row-standardized weights, the distribution of lagged GDPPC on the right shows how neighboring countries becomes more similar. note that some region which was originally much richer than it’s neighbors, becomes poorer than its neighbors while it’s neighbor becomes richer. this indicates caution when using the row-standardized weights\n\n\n\nWe can calculate spatial lag as a sum of neighboring values using binary weights. This involves going back to the neighbors list, applying a function to assign binary weights, and explicitly assigning these weights in the nb2listw function.\nWe start by assigning a value of 1 to each neighbor using lapply:\n\n\nCode\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, compute the lag variable from our weights and GDPPC.\n\n\nCode\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nexamine the result:\n\n\nCode\nlag_sum\n\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\n\nThis method involves summing up the values of neighboring observations to calculate the spatial lag. Unlike the row-standardized method, this doesn’t involve any kind of averaging or standardization, so the total influence is simply the sum of the influences from each neighbor. This approach is particularly useful when dealing with binary data (like 0 or 1 values). summarized from: Anselin\n\nappend the lag_sum GDPPC field to the hunan sf data frame:\n\n\nCode\nhunan &lt;- left_join(hunan, lag.res)\n\n\nplot both GDPPC and Spatial Lag Sum GDPPC for comparison.\n\n\nCode\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nSpatial window average uses row-standardized weights and includes the diagonal element. To achieve this in R, we need to add the diagonal element to the neighbors’ structure before assigning weights.\nAdd the diagonal element using include.self() from spdep\n\n\nCode\nwm_qs &lt;- include.self(wm_q)\n\n\nobtain weights with nb2listw()\n\n\nCode\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\ncreate the lag variable from our weight structure and GDPPC variable:\n\n\nCode\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nconvert the lag variable listw object into a data.frame:\n\n\nCode\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\n\nappend lag_window_avg GDPPC values to hunan:\n\n\nCode\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\n\ncompare the values of lag GDPPC and Spatial window average by using kable()\n\n\nCode\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nuse qtm() to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison:\n\n\nCode\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nThis concept extends the idea of spatial lag by including the observation itself in the average calculation. It’s like creating a window that includes the value at a specific location and its neighbors, and then computing the average of all these values. This method is useful when you want to take into account both the value at a specific point and the influence of its surroundings. summarized from: Anselin\n\n\n\nSpatial window sum is similar to window average but without using row-standardized weights.\nLet’s add the diagonal element to the neighbor list:\n\n\nCode\nwm_qs &lt;- include.self(wm_q)\n\n\nNext, we assign binary weights:\n\n\nCode\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_qs, glist = b_weights, style = \"B\")\nb_weights2\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nNow, we can compute the lag variable with lag.listw():\n\n\nCode\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we convert the lag variable listw object into a data.frame:\n\n\nCode\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\n\nNow, we append w_sum GDPPC values to hunan:\n\n\nCode\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\n\nuse kable() To compare the values of lag GDPPC and Spatial window average\n\n\nCode\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nFinally, we’ll use qtm() to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison:\n\n\nCode\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nThis is similar to the spatial window average, but instead of averaging the values, it sums them up. This method calculates the total value by adding the value at a specific location to the sum of its neighboring values. It provides a more cumulative measure of spatial influence compared to the average. summarized from: Anselin"
  },
  {
    "objectID": "hands-on/hoe2-spatialweight.html#references",
    "href": "hands-on/hoe2-spatialweight.html#references",
    "title": "Hands-on Exercise 2: Spatial Weights and Application",
    "section": "8 References",
    "text": "8 References\n\nr4gdsa chapter 8\nAnselin - Weights Applications\nAnselin - Contiguity Weights\nGetis - Spatial Analysis Handbook"
  },
  {
    "objectID": "hands-on/hoe4.html",
    "href": "hands-on/hoe4.html",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "Geographically Weighted Regression Illustration"
  },
  {
    "objectID": "hands-on/hoe4.html#overview",
    "href": "hands-on/hoe4.html#overview",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "1 Overview",
    "text": "1 Overview\nGeographically Weighted Regression (GWR) is a statistical method that considers factors that vary from place to place (like climate, demographics, or physical environment) and models how these factors relate to a specific outcome (dependent variable). This hands-on session will teach you how to create hedonic pricing models using GWR. The focus is on resale prices of condominiums in 2015, with independent variables categorized as structural and locational."
  },
  {
    "objectID": "hands-on/hoe4.html#the-data",
    "href": "hands-on/hoe4.html#the-data",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "2 The Data",
    "text": "2 The Data\nTwo datasets will be used:\n\nURA Master Plan subzone boundaries in shapefile format (MP14_SUBZONE_WEB_PL)\nCondo resale data for 2015 in CSV format (condo_resale_2015.csv)"
  },
  {
    "objectID": "hands-on/hoe4.html#getting-started",
    "href": "hands-on/hoe4.html#getting-started",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "3 Getting Started",
    "text": "3 Getting Started\nBefore diving in, it’s crucial to install the required R packages and activate them in the R environment.\n\n\nCode\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)\n\n\n\n\n\n\n\n\nPackages Explanation\n\n\n\n\n\n\nolsrr: A package designed for tools that assist in the model building and exploratory analysis associated with ordinary least squares regression.\ncorrplot: A graphical display of a correlation matrix, confidence interval, or general matrix-like visualization to assist with interpretative analysis.\nggpubr: An ‘ggplot2’ extension that simplifies creating beautiful graphics for publication, offering an easy-to-use set of tools for descriptive statistics and a rich array of plots.\nsf: This package provides simple and straightforward ways to handle and manipulate spatial vector data in R, integrating tightly with the ‘tidyverse’ and ‘ggplot2’.\nspdep: Spatial dependence: weighting schemes, statistics, and models; a collection of functions to create spatial weights matrix objects from polygon contiguities, from point patterns by distance and tessellations, for summarizing these objects, and for permitting their use in spatial data models.\nGWmodel: An R package for fitting Geographically Weighted Models, which are spatial statistical models that allow local rather than global parameters to be estimated.\ntmap: An R library for creating thematic maps, which are designed to represent spatial variation of a subject using statistical data.\ntidyverse: An opinionated collection of R packages designed for data science tasks that make it easy to import, tidy, transform, and visualize data.\ngtsummary: This package provides an elegant and flexible way to create publication-ready analytical and summary tables using the ‘gt’ package, integrating with ‘broom’ and ‘tidyverse’ workflows."
  },
  {
    "objectID": "hands-on/hoe4.html#a-brief-note-on-gwmodel",
    "href": "hands-on/hoe4.html#a-brief-note-on-gwmodel",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "4 A Brief Note on GWmodel",
    "text": "4 A Brief Note on GWmodel\nThe GWmodel package offers a set of localized spatial statistical methods. These include GW summary statistics, GW principal components analysis, GW discriminant analysis, and various forms of GW regression, some of which are robust (resistant to outliers). Typically, the results or parameters from GWmodel are visually mapped, serving as an insightful exploration tool. This often comes before or guides more traditional or advanced statistical analyses."
  },
  {
    "objectID": "hands-on/hoe4.html#geospatial-data-wrangling",
    "href": "hands-on/hoe4.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "5 Geospatial Data Wrangling",
    "text": "5 Geospatial Data Wrangling\n\nImporting Geospatial Data\nIn this practical exercise, we’ll be using geospatial data named MP14_SUBZONE_WEB_PL. It’s in ESRI shapefile format and represents URA Master Plan 2014’s planning subzone boundaries. These geographic boundaries are depicted using polygon features, and the GIS data uses the svy21 projected coordinate system.\nThe code snippet below demonstrates how to import the MP14_SUBZONE_WEB_PL shapefile using the st_read() function from the sf package.\n\n\nCode\nmpsz = st_read(dsn = \"../data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\ameernoor\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe report above indicates that the R object containing the imported shapefile is named mpsz, and it’s a simple feature object with a geometry type of multipolygon. It’s important to note that the mpsz object lacks EPSG information.\n\n\nUpdating Coordinate System Information\nThe following code snippet ensures that the recently imported mpsz is updated with the correct ESPG code, which is 3414.\n\n\nCode\nmpsz_svy21 &lt;- st_transform(mpsz, 3414)\n\n\nOnce the projection metadata is transformed, you can check the projection of the updated mpsz_svy21 using st_crs() from the sf package.\nThe code below will be used to check the updated mpsz_svy21.\n\n\nCode\nst_crs(mpsz_svy21)\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNow, you’ll see that the EPSG code is listed as 3414.\nNext, to see the full extent of mpsz_svy21, you can use st_bbox() from the sf package.\n\n\nCode\nst_bbox(mpsz_svy21) #view extent\n\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nst_transform from sf package is used to transform the coordinate reference system (CRS) of a spatial object. In the code, mpsz is transformed to CRS 3414.\nst_crs from sf package retrieves the CRS information of a spatial object. Here, it is used to check the CRS of the transformed mpsz_svy21.\nst_bbox from sf package computes the bounding box of a spatial object. The code uses it to view the extent of mpsz_svy21.\nThe transformation to CRS 3414 and subsequent checking of CRS and bounding box provide important spatial information about the dataset, which is essential in geospatial analyses."
  },
  {
    "objectID": "hands-on/hoe4.html#aspatial-data-wrangling",
    "href": "hands-on/hoe4.html#aspatial-data-wrangling",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6 Aspatial Data Wrangling",
    "text": "6 Aspatial Data Wrangling\n\nImporting Aspatial Data\nThe condo_resale_2015 data comes in CSV format. The code below uses the read_csv() function from the readr package to bring condo_resale_2015 into R, and it becomes a tibble data frame named condo_resale.\n\n\nCode\ncondo_resale = read_csv(\"../data/aspatial/Condo_resale_2015.csv\")\n\n\nAfter importing the data, it’s essential to check if everything is in order. The code snippets below, using glimpse(), help you understand the structure of the data.\n\n\nCode\nglimpse(condo_resale)\n\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\n\nCode\nhead(condo_resale$LONGITUDE) #view data in XCOORD column\n\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\nCode\nhead(condo_resale$LATITUDE) #view data in YCOORD column\n\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\nNext, using the base R function summary(), you can get summary statistics for the cond_resale tibble data frame.\n\n\nCode\nsummary(condo_resale)\n\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\nTransforming Aspatial Data into a Spatial Format\nCurrently, condo_resale is a tibble data frame without spatial information. Let’s convert it into a sf object. The code below transforms condo_resale into a simple feature data frame using st_as_sf() from the sf package.\n\n\nCode\ncondo_resale.sf &lt;- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\n\nNote that st_transform() from the sf package is used to change the coordinates from wgs84 (i.e., crs:4326) to svy21 (i.e., crs=3414).\nNext, using head(), you can check the content of condo_resale.sf.\n\n\nCode\nhead(condo_resale.sf)\n\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLING_PRICE AREA_SQM   AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n     &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n1   118635       3000000      309    30     7.94          0.166            2.52 \n2   288420       3880000      290    32     6.61          0.280            1.93 \n3   267833       3325000      248    33     6.90          0.429            0.502\n4   258380       4250000      127     7     4.04          0.395            1.99 \n5   467169       1400000      145    28    11.8           0.119            1.12 \n6   466472       1320000      139    22    10.3           0.125            0.789\n# ℹ 15 more variables: PROX_URA_GROWTH_AREA &lt;dbl&gt;, PROX_HAWKER_MARKET &lt;dbl&gt;,\n#   PROX_KINDERGARTEN &lt;dbl&gt;, PROX_MRT &lt;dbl&gt;, PROX_PARK &lt;dbl&gt;,\n#   PROX_PRIMARY_SCH &lt;dbl&gt;, PROX_TOP_PRIMARY_SCH &lt;dbl&gt;,\n#   PROX_SHOPPING_MALL &lt;dbl&gt;, PROX_SUPERMARKET &lt;dbl&gt;, PROX_BUS_STOP &lt;dbl&gt;,\n#   NO_Of_UNITS &lt;dbl&gt;, FAMILY_FRIENDLY &lt;dbl&gt;, FREEHOLD &lt;dbl&gt;,\n#   LEASEHOLD_99YR &lt;dbl&gt;, geometry &lt;POINT [m]&gt;\n\n\nThe output now represents a point feature data frame."
  },
  {
    "objectID": "hands-on/hoe4.html#exploratory-data-analysis",
    "href": "hands-on/hoe4.html#exploratory-data-analysis",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "7 Exploratory Data Analysis",
    "text": "7 Exploratory Data Analysis\nIn this part, you’ll discover how to use visual tools from the ggplot2 package for Exploratory Data Analysis (EDA).\n\nSelling Price DistributionLog Selling Price DistributionMultiple Histogram Plots for Variable DistributionCreating an Interactive Map\n\n\nTo understand the distribution of SELLING_PRICE, check out the code below. It generates a histogram:\n\n\nCode\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\nThe graph above shows a right-skewed distribution, indicating more condos were sold at relatively lower prices.\n\n\nStatistically, we can normalize the skewed distribution by applying a log transformation. The following code creates a new variable, LOG_SELLING_PRICE, using the log transformation on SELLING_PRICE with mutate() from the dplyr package.\n\n\nCode\ncondo_resale.sf &lt;- condo_resale.sf %&gt;%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\n\nNow, you can plot LOG_SELLING_PRICE using the code below.\n\n\nCode\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\nNotice that the distribution is less skewed after the transformation.\n\n\nIn this part, you’ll learn to create a set of small multiple histograms (also called trellis plots) using ggarrange() from the ggpubr package.\nThe code below generates 12 histograms and organizes them into a 3-column by 4-row layout using ggarrange().\n\n\nCode\nAREA_SQM &lt;- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE &lt;- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\n\nFinally, let’s visualize the geographic distribution of condominium resale prices in Singapore. We’ll use the tmap package for this.\n\n\nCode\n# activate interactive mode\ntmap_mode(\"view\")\n\n# correct the invalid geometry\nfixed_geom &lt;- sf::st_make_valid(mpsz_svy21[mpsz_svy21$REGION_N == \"CENTRAL REGION\", ])\n\n# create the map\ntm_shape(fixed_geom)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\nNote that we’re using tm_dots() instead of tm_bubbles().\nThe set.zoom.limits parameter in tm_view() sets the minimum and maximum zoom level to 11 and 14, respectively.\nBefore moving on to the next section, switch R display back to plot mode using the code below:\n\n\nCode\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "hands-on/hoe4.html#building-hedonic-pricing-models-for-condos-in-r",
    "href": "hands-on/hoe4.html#building-hedonic-pricing-models-for-condos-in-r",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "8 Building Hedonic Pricing Models for Condos in R",
    "text": "8 Building Hedonic Pricing Models for Condos in R\nIn this part, you’ll understand how to create hedonic pricing models for resale condominiums using the lm() function in the R base.\n\nUsing Simple Linear Regression\nFirst, we’ll make a simple linear regression model. We’ll use SELLING_PRICE as the result we want to predict and AREA_SQM as the factor we think influences it.\n\n\nCode\ncondo.slr &lt;- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\n\nThe lm() function gives us a result object, and we can get more details using functions like summary():\n\n\nCode\nsummary(condo.slr)\n\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: &lt; 2.2e-16\n\n\nThe report shows that the SELLING_PRICE can be estimated using the formula:\n      *y = -258121.1 + 14719x1*\nAn R-squared value of 0.4518 indicates that our model explains about 45% of resale prices.\nWith a p-value much smaller than 0.0001, we reject the idea that the average is a good estimate of SELLING_PRICE. This lets us conclude that our simple linear regression model is a good estimator.\nIn the Coefficients: section, both Intercept and AREA_SQM have p-values smaller than 0.001, suggesting we reject the null hypothesis for B0 and B1. Thus, we can infer that B0 and B1 are good parameter estimates.\nTo visualize the best-fit line on a scatterplot, we can use lm() as a method function in ggplot’s geometry:\n\n\nCode\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\n\nThis figure reveals some statistical outliers with relatively high selling prices.\n\n\nUsing Multiple Linear Regression\n\nVisualizing Independent Variable Relationships\nBefore creating a multiple regression model, it’s crucial to check that independent variables aren’t highly correlated. If they are, it can compromise the model quality, a phenomenon known as multicollinearity in statistics.\nA correlation matrix is commonly used to visualize relationships between independent variables. The corrplot package can help with this. The code below generates a scatterplot matrix for the independent variables in the condo_resale data.frame.\n\n\nCode\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\n\nMatrix reorder is crucial for mining hidden structures and patterns. Four methods in corrplot (parameter order) are available: “AOE”, “FPC”, “hclust”, “alphabet”. In the above code, AOE order is used, ordering variables using the angular order of the eigenvectors method suggested by Michael Friendly.\nThe scatterplot matrix reveals that Freehold is highly correlated with LEASE_99YEAR. To avoid multicollinearity, it’s wise to include only one of them in the subsequent model. As a result, LEASE_99YEAR is excluded in the next model.\n\n\nBuilding a Hedonic Pricing Model with Multiple Linear Regression\nThe code below uses lm() to build the multiple linear regression model.\n\n\nCode\ncondo.mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  &lt; 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  &lt; 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  &lt; 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: &lt; 2.2e-16\n\n\n\n\nPreparing a Publication-Quality Table: olsrr Method\nFrom the report, not all independent variables are statistically significant. We’ll refine the model by removing those variables that aren’t statistically significant. The code below recalibrates the model.\n\n\nCode\ncondo.mlr1 &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\nPreparing a Publication-Quality Table: gtsummary Method\nThe gtsummary package offers an elegant way to create publication-ready summary tables in R.\nIn the code below, tbl_regression() creates a well-formatted regression report.\n\n\nCode\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nWith gtsummary, model statistics can be included using add_glance_table() or as a table source note using add_glance_source_note(), as shown below.\n\n\nCode\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %&gt;% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = &lt;0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nFor more customization options, refer to Tutorial: tbl_regression\n\n\nStatistical Assumption Tests\nIn this section, we’ll introduce a powerful R package designed for OLS regression - olsrr. It offers valuable methods for enhancing multiple linear regression models:\n\nComprehensive regression output\nResidual diagnostics\nMeasures of influence\nHeteroskedasticity tests\nCollinearity diagnostics\nModel fit assessment\nVariable contribution assessment\nVariable selection procedures\n\n\nMulticollinearityNon-LinearityNormalitySpatial Autocorrelation\n\n\nThe code chunk below uses the ols_vif_tol() function of the olsrr package to test for signs of multicollinearity.\n\n\nCode\nols_vif_tol(condo.mlr1)\n\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nSince the VIF of the independent variables is less than 10, we can conclude that there are no signs of multicollinearity among the independent variables.\n\n\nIt’s essential to test the assumption of linearity and additivity of the relationship between dependent and independent variables in multiple linear regression.\nIn the code chunk below, the ols_plot_resid_fit() function of the olsrr package is used to perform a linearity assumption test.\n\n\nCode\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\n\nThe figure above reveals that most data points scatter around the 0 line, suggesting that the relationships between the dependent variable and independent variables are linear.\n\n\nFinally, the code chunk below uses ols_plot_resid_hist() of the olsrr package to perform a normality assumption test.\n\n\nCode\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\n\nThe figure indicates that the residual of the multiple linear regression model (i.e., condo.mlr1) resembles a normal distribution.\nIf you prefer formal statistical tests, the ols_test_normality() of the olsrr package can be used, as shown in the code chunk below.\n\n\nCode\nols_test_normality(condo.mlr1)\n\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table above shows that the p-values of the four tests are much smaller than the alpha value of 0.05. Therefore, we reject the null hypothesis, indicating there is statistical evidence that the residuals are not normally distributed.\n\n\nSince our hedonic model uses geographically referenced attributes, visualizing the residuals is crucial.\nTo perform a spatial autocorrelation test, we’ll convert condo_resale.sf from an sf data frame into a SpatialPointsDataFrame.\nFirst, export the residuals of the hedonic pricing model and save them as a data frame.\n\n\nCode\nmlr.output &lt;- as.data.frame(condo.mlr1$residuals)\n\n\nNext, join the newly created data frame with condo_resale.sf.\n\n\nCode\ncondo_resale.res.sf &lt;- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %&gt;%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\n\nNow, convert condo_resale.res.sf from a simple feature object into a SpatialPointsDataFrame since the spdep package processes sp-conformed spatial data objects.\nThe code chunk below performs the data conversion process.\n\n\nCode\ncondo_resale.sp &lt;- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nNext, use the tmap package to display the distribution of residuals on an interactive map.\nThe code churn below turns on the interactive mode of tmap.\n\n\nCode\ntmap_mode(\"view\")\n\n\nThe code chunks below create an interactive point symbol map.\n\n\nCode\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\nRemember to switch back to “plot” mode before continuing.\n\n\nCode\ntmap_mode(\"plot\")\n\n\nThe figure above reveals signs of spatial autocorrelation.\nTo verify our observation, the Moran’s I test will be performed.\nFirst, compute the distance-based weight matrix using dnearneigh() function of the spdep package.\n\n\nCode\nnb &lt;- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nNext, use nb2listw() of the spdep package to convert the output neighbors lists (i.e., nb) into spatial weights.\n\n\nCode\nnb_lw &lt;- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nNow, use lm.morantest() of the spdep package to perform Moran’s I test for residual spatial autocor\nrelation.\n\n\nCode\nlm.morantest(condo.mlr1, nb_lw)\n\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that its p-value is less than 0.00000000000000022, which is less than the alpha value of 0.05. Hence, we reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418, which is greater than 0, we can infer that the residuals resemble a cluster distribution."
  },
  {
    "objectID": "hands-on/hoe4.html#building-hedonic-pricing-models-using-gwmodel",
    "href": "hands-on/hoe4.html#building-hedonic-pricing-models-using-gwmodel",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "9 Building Hedonic Pricing Models using GWmodel",
    "text": "9 Building Hedonic Pricing Models using GWmodel\nIn this section, you’ll learn how to model hedonic pricing using both fixed and adaptive bandwidth schemes.\n\nBuilding Fixed Bandwidth GWR Model\n\nComputing fixed bandwidth\nIn the code chunk below, the bw.gwr() function of the GWModel package is used to determine the optimal fixed bandwidth for the model. The argument adaptive set to FALSE indicates that we want to compute the fixed bandwidth.\nThere are two possible approaches to determine the stopping rule: CV cross-validation and AIC corrected (AICc). The stopping rule is defined using the approach argument.\n\n\nCode\nbw.fixed &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\nThe result shows that the recommended bandwidth is 971.3405 meters. (Quiz: Do you know why it is in meters?)\n\n\nGWModel method - fixed bandwidth\nNow we can calibrate the gwr model using the fixed bandwidth and a Gaussian kernel, as shown in the code chunk below.\n\n\nCode\ngwr.fixed &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\n\nThe output is saved in a list of class “gwrm”. The code below can be used to display the model output.\n\n\nCode\ngwr.fixed\n\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-12-14 18:40:47.303601 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2023-12-14 18:40:48.144148 \n\n\nThe report shows that the AICc of the gwr is 42263.61, which is significantly smaller than the global multiple linear regression model of 42967.1.\n\n\n\nBuilding Adaptive Bandwidth GWR Model\nIn this section, we will calibrate the gwr-based hedonic pricing model using the adaptive bandwidth approach.\n\nComputing the adaptive bandwidth\nSimilar to the earlier section, we will first use bw.gwr() to determine the recommended data points to use.\nThe code chunk looks very similar to the one used to compute the fixed bandwidth, except the adaptive argument has changed to TRUE.\n\n\nCode\nbw.adaptive &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nThe result shows that 30 is the recommended data points to be used.\n\n\nConstructing the adaptive bandwidth gwr model\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model using adaptive bandwidth and a Gaussian kernel, as shown in the code chunk below.\n\n\nCode\ngwr.adaptive &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\n\nThe code below can be used to display the model output.\n\n\nCode\ngwr.adaptive\n\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-12-14 18:40:54.515634 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2023-12-14 18:40:55.50972 \n\n\nThe report shows that the AICc of the adaptive distance gwr is 41982.22, which is even smaller than the AICc of the fixed distance gwr of 42263.61.\n\n\n\nVisualizing GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In\n\nthe presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30 may be unreliable. - Local R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model. - Predicted: these are the estimated (or fitted) y values computed by GWR. - Residuals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produced by using these values. - Coefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates is higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors, and t-values in its “data” slot in an object called SDF of the output list.\n\n\nConverting SDF into sf data.frame\nTo visualize the fields in SDF, we need to first convert it into an sf data.frame using the code chunk below.\n\n\nCode\ncondo_resale.sf.adaptive &lt;- st_as_sf(gwr.adaptive$SDF) %&gt;%\n  st_transform(crs=3414)\n\n\n\n\nCode\ncondo_resale.sf.adaptive.svy21 &lt;- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\n\n\n\nCode\ngwr.adaptive.output &lt;- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive &lt;- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\n\nNext, glimpse() is used to display the content of condo_resale.sf.adaptive sf data frame.\n\n\nCode\nglimpse(condo_resale.sf.adaptive)\n\n\nRows: 1,436\nColumns: 52\n$ Intercept               &lt;dbl&gt; 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM                &lt;dbl&gt; 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE                     &lt;dbl&gt; -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD                &lt;dbl&gt; -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE          &lt;dbl&gt; 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE        &lt;dbl&gt; -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA    &lt;dbl&gt; -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT                &lt;dbl&gt; -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK               &lt;dbl&gt; -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH        &lt;dbl&gt; 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL      &lt;dbl&gt; 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP           &lt;dbl&gt; 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS             &lt;dbl&gt; 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY         &lt;dbl&gt; -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD                &lt;dbl&gt; 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    &lt;dbl&gt; 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                &lt;dbl&gt; 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           &lt;dbl&gt; 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            &lt;dbl&gt; 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             &lt;dbl&gt; 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  &lt;dbl&gt; 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             &lt;dbl&gt; 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       &lt;dbl&gt; 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     &lt;dbl&gt; 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE &lt;dbl&gt; 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             &lt;dbl&gt; 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            &lt;dbl&gt; 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     &lt;dbl&gt; 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   &lt;dbl&gt; 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        &lt;dbl&gt; 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          &lt;dbl&gt; 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      &lt;dbl&gt; 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             &lt;dbl&gt; 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            &lt;dbl&gt; 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             &lt;dbl&gt; 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  &lt;dbl&gt; -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             &lt;dbl&gt; -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       &lt;dbl&gt; 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     &lt;dbl&gt; -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV &lt;dbl&gt; -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             &lt;dbl&gt; -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            &lt;dbl&gt; -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     &lt;dbl&gt; 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   &lt;dbl&gt; 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        &lt;dbl&gt; 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          &lt;dbl&gt; 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      &lt;dbl&gt; -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             &lt;dbl&gt; 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                &lt;dbl&gt; 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ geometry                &lt;POINT [m]&gt; POINT (22085.12 29951.54), POINT (25656.…\n\n\n\n\nCode\nsummary(gwr.adaptive$SDF$yhat)\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901 \n\n\n\n\nVisualising local R2\nThe code chunks below are used to create an interactive point symbol map.\n\n\nCode\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\n\n\nCode\ntmap_mode(\"plot\")\n\n\n\n\nVisualising coefficient estimates\nThe code chunks below are used to create an interactive point symbol map.\n\n\nCode\ntmap_mode(\"view\")\nAREA_SQM_SE &lt;- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV &lt;- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntmap_mode(\"plot\")\n\n\n\nBy URA Planning Region\n\n\nCode\n# correct the invalid geometry\nfixed_geom &lt;- sf::st_make_valid(mpsz_svy21[mpsz_svy21$REGION_N == \"CENTRAL REGION\", ])\n\ntm_shape(fixed_geom[fixed_geom$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)"
  },
  {
    "objectID": "hands-on/hoe4.html#reference",
    "href": "hands-on/hoe4.html#reference",
    "title": "Hands-on Exercise 4: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "10 Reference",
    "text": "10 Reference\nGollini I, Lu B, Charlton M, Brunsdon C, Harris P (2015) “GWmodel: an R Package for exploring Spatial Heterogeneity using Geographically Weighted Models”. Journal of Statistical Software, 63(17):1-50, http://www.jstatsoft.org/v63/i17/\nLu B, Harris P, Charlton M, Brunsdon C (2014) “The GWmodel R Package: further topics for exploring Spatial Heterogeneity using Geographically Weighted Models”. Geo-spatial Information Science 17(2): 85-101, http://www.tandfonline.com/doi/abs/10.1080/1009502.2014.917453"
  },
  {
    "objectID": "in-class/ice2.html",
    "href": "in-class/ice2.html",
    "title": "In-class Exercise 2 - sfdep for Spatial Weights, GLSA & EHSA",
    "section": "",
    "text": "Illustration"
  },
  {
    "objectID": "in-class/ice2.html#calculating-spatial-weights",
    "href": "in-class/ice2.html#calculating-spatial-weights",
    "title": "In-class Exercise 2 - sfdep for Spatial Weights, GLSA & EHSA",
    "section": "2.1 Calculating Spatial Weights",
    "text": "2.1 Calculating Spatial Weights\n\nTwo types of Spatial Weights: 1) Contiguity Weights considers how neighboring areas are connected or share a common border, emphasizing spatial adjacency; 2) Distance-based Weights: This type takes into account the distance between locations, giving more weight to closer locations and less weight to those farther away, capturing spatial relationships based on proximity.\n\n\n2.1.1 Contiguity Weights\nThis part of exercise will use contiguity spatial weights using sfdep package. To derive the weights, the following steps is required:\n\nidentify contiguity neighbour list by using st_contiguity() from sfdep package.\nderive the spatial weights by using st_weights() from sfdep package\n\n\nThe advantage of sfdep over spdep is that its output is in the form of an sf tibble data frame. This is beneficial because sf tibble data frames are part of the tidyverse ecosystem, making it easier to work with and integrate into tidy data workflows in R.\n\n\nIdentifying Contiguity Neighbours\nthe following panel will show how to identify contiguity neighbours using various methods.\n\nQueen’s MethodRook’s MethodHigher Order Neighbors\n\n\n\n\nCode\n# Create neighbor dataframe using Queen Method from the original 'hunan_GDPPC' dataframe\nnb_queen &lt;- hunan_GDPPC %&gt;%\n\n  # Add a new column 'nb' (neighbors) representing contiguity relationships using spatial geometries\n  mutate(nb = st_contiguity(geometry),\n\n         # Insert the newly created columns at the beginning of the dataset\n         .before=1)\n\n# summarize the neighbors column\nsummary(nb_queen$nb)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\n\n\nCode\n# Create neighbor dataframe using Rook Method from the original 'hunan_GDPPC' dataframe\nnb_rook &lt;- hunan_GDPPC %&gt;%\n\n  # Add a new column 'nb' (neighbors) representing contiguity relationships using spatial geometries\n  mutate(nb = st_contiguity(geometry, queen = FALSE),\n\n         # Add another column 'wt' calculating weights based on contiguity relationships\n         wt = st_weights(nb, style = 'W'),\n\n         # Insert the newly created columns at the beginning of the dataset\n         .before=1)\n\n# summarize the neighbors column\nsummary(nb_rook$nb)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\n\n\nSpatial relationships may extend beyond immediate neighbors when we’re dealing with complex geographical patterns or phenomena that involve interactions across multiple layers or scales. In such cases, high-order contiguity becomes relevant because it allows us to capture and analyze more distant spatial connections. This is particularly important when studying phenomena with a broader reach or influence that goes beyond the traditional notion of adjacent neighbors, providing a more comprehensive understanding of spatial dependencies in the data.\n\nThe following code chunk give example of using st_nb_lag_cumul() to derive contiguity neighbour list using lag 2 Queen’s method. It set the lag order to 2, so the result contains both 1st and 2nd order neighbors.\n\n\nCode\nnb2_queen &lt;-  hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry),\n          # Add another new column 'nb2' calculating cumulative second-order contiguity relationships\n         nb2 = st_nb_lag_cumul(nb, 2),\n         .before = 1)\n\n# Check the output\nsummary(nb2_queen$nb2)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 1324 \nPercentage nonzero weights: 17.09711 \nAverage number of links: 15.04545 \nLink number distribution:\n\n 5  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 26 28 33 \n 2  1  6  4  5  4  8  5 10  4  4  8  4  8  5  2  2  1  2  1  1  1 \n2 least connected regions:\n30 88 with 5 links\n1 most connected region:\n56 with 33 links\n\n\n\n\n\nthe following code check the whole output using the 2 orders contiguity as example\n\n\nCode\nkable(head(nb2_queen, n=10))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnb\nnb2\nNAME_2\nID_3\nNAME_3\nENGTYPE_3\nCounty\nGDPPC\ngeometry\n\n\n\n\n2, 3, 4, 57, 85\n2, 3, 4, 5, 6, 32, 56, 57, 58, 64, 69, 75, 76, 78, 85\nChangde\n21098\nAnxiang\nCounty\nAnxiang\n23667\nPOLYGON ((112.0625 29.75523…\n\n\n1, 57, 58, 78, 85\n1, 3, 4, 5, 6, 8, 9, 32, 56, 57, 58, 64, 68, 69, 75, 76, 78, 85\nChangde\n21100\nHanshou\nCounty\nHanshou\n20981\nPOLYGON ((112.2288 29.11684…\n\n\n1, 4, 5, 85\n1, 2, 4, 5, 6, 32, 56, 57, 69, 75, 78, 85\nChangde\n21101\nJinshi\nCounty City\nJinshi\n34592\nPOLYGON ((111.8927 29.6013,…\n\n\n1, 3, 5, 6\n1, 2, 3, 5, 6, 57, 69, 75, 85\nChangde\n21102\nLi\nCounty\nLi\n24473\nPOLYGON ((111.3731 29.94649…\n\n\n3, 4, 6, 85\n1, 2, 3, 4, 6, 32, 56, 57, 69, 75, 78, 85\nChangde\n21103\nLinli\nCounty\nLinli\n25554\nPOLYGON ((111.6324 29.76288…\n\n\n4, 5, 69, 75, 85\n1, 2, 3, 4, 5, 32, 53, 55, 56, 57, 69, 75, 78, 85\nChangde\n21104\nShimen\nCounty\nShimen\n27137\nPOLYGON ((110.8825 30.11675…\n\n\n67, 71, 74, 84\n9, 19, 66, 67, 71, 73, 74, 76, 84, 86\nChangsha\n21109\nLiuyang\nCounty City\nLiuyang\n63118\nPOLYGON ((113.9905 28.5682,…\n\n\n9, 46, 47, 56, 78, 80, 86\n2, 9, 19, 21, 31, 32, 34, 35, 36, 41, 45, 46, 47, 56, 58, 66, 68, 74, 78, 80, 84, 85, 86\nChangsha\n21110\nNingxiang\nCounty\nNingxiang\n62202\nPOLYGON ((112.7181 28.38299…\n\n\n8, 66, 68, 78, 84, 86\n2, 7, 8, 19, 21, 35, 46, 47, 56, 58, 66, 67, 68, 74, 76, 78, 80, 84, 85, 86\nChangsha\n21111\nWangcheng\nCounty\nWangcheng\n70666\nPOLYGON ((112.7914 28.52688…\n\n\n16, 17, 19, 20, 22, 70, 72, 73\n11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 70, 71, 72, 73, 74, 82, 83, 86\nChenzhou\n21112\nAnren\nCounty\nAnren\n12761\nPOLYGON ((113.1757 26.82734…\n\n\n\n\n\n\n\nDeriving contiguity weights\nThe following panel shows how to use st_weights() of sfdep package to derive contiguity weights. the function provides three arguments which includes: - nb: a neighbor list object as created by st_neighbors() - style: Default “W” for row standardized weights. The value can also be “B”, “C”, “U”, “minmax”, and “S”. B is the basic binary coding, W is row standardises (sums over all links to n), C is globally standardised(sums over all links to n). U is equal to C divided by number of neighbours (sums over all links to unity, while S is a variance-stabilizing coding scheme (sums over all links to n). - allow_zero: If TRUE, assigns zero as lagged value to zone without neighbors.\n\nQueen - WHigher Order Queen - W\n\n\nThe following code will use queen method to derive contiguity weights (it’s the default method when the argument is not specified)\n\n\nCode\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         # add the weight column\n         wt = st_weights(nb, style = \"W\"),\n         .before = 1) \n# check the output\nwm_q\n\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\n\n\n\n\nCode\nwm2_q &lt;-  hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb, style = \"W\"),\n         nb2 = st_nb_lag_cumul(nb, 2),\n         wt2 = st_weights(nb2, style = \"W\"),\n                  .before = 1)\n\n# Check the output\nwm2_q\n\n\nSimple feature collection with 88 features and 10 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n                                                                                        nb2\n1                                     2, 3, 4, 5, 6, 32, 56, 57, 58, 64, 69, 75, 76, 78, 85\n2                           1, 3, 4, 5, 6, 8, 9, 32, 56, 57, 58, 64, 68, 69, 75, 76, 78, 85\n3                                                 1, 2, 4, 5, 6, 32, 56, 57, 69, 75, 78, 85\n4                                                             1, 2, 3, 5, 6, 57, 69, 75, 85\n5                                                 1, 2, 3, 4, 6, 32, 56, 57, 69, 75, 78, 85\n6                                         1, 2, 3, 4, 5, 32, 53, 55, 56, 57, 69, 75, 78, 85\n7                                                     9, 19, 66, 67, 71, 73, 74, 76, 84, 86\n8  2, 9, 19, 21, 31, 32, 34, 35, 36, 41, 45, 46, 47, 56, 58, 66, 68, 74, 78, 80, 84, 85, 86\n9               2, 7, 8, 19, 21, 35, 46, 47, 56, 58, 66, 67, 68, 74, 76, 78, 80, 84, 85, 86\n10               11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 70, 71, 72, 73, 74, 82, 83, 86\n                                                                                                                                                                                                                                                                                  wt2\n1                                                                                                  0.06666667, 0.06666667, 0.06666667, 0.06666667, 0.06666667, 0.06666667, 0.06666667, 0.06666667, 0.06666667, 0.06666667, 0.06666667, 0.06666667, 0.06666667, 0.06666667, 0.06666667\n2                                                              0.05555556, 0.05555556, 0.05555556, 0.05555556, 0.05555556, 0.05555556, 0.05555556, 0.05555556, 0.05555556, 0.05555556, 0.05555556, 0.05555556, 0.05555556, 0.05555556, 0.05555556, 0.05555556, 0.05555556, 0.05555556\n3                                                                                                                                      0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333\n4                                                                                                                                                                                   0.1111111, 0.1111111, 0.1111111, 0.1111111, 0.1111111, 0.1111111, 0.1111111, 0.1111111, 0.1111111\n5                                                                                                                                      0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333\n6                                                                                                              0.07142857, 0.07142857, 0.07142857, 0.07142857, 0.07142857, 0.07142857, 0.07142857, 0.07142857, 0.07142857, 0.07142857, 0.07142857, 0.07142857, 0.07142857, 0.07142857\n7                                                                                                                                                                                                                                    0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1\n8  0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826, 0.04347826\n9                                                                                                                                                              0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05\n10                                                 0.05263158, 0.05263158, 0.05263158, 0.05263158, 0.05263158, 0.05263158, 0.05263158, 0.05263158, 0.05263158, 0.05263158, 0.05263158, 0.05263158, 0.05263158, 0.05263158, 0.05263158, 0.05263158, 0.05263158, 0.05263158, 0.05263158\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\n\n\n\n\n\n\n2.1.2 Distance-based Weights\nThe following panel display examples of how to use various method of deriving distance-based spatial weights. Important functions used includes: - st_nb_dists() of sfdep to calculate the nearest neighbour distance, generating a list of distances for each feature’s neighbors. - unlist() of Base R to convert output into a vector form to enable summary statistics. - st_dists_band() of sfdep is used to identify neighbors based on a distance band, by specifiying upper and lower arguments. The output is a list of neighbours (i.e. nb). - st_weights() is used to calculate spatial weights of the nb list. - st_knn() of sfdep is used to identify specified number of neighbors (default is k=1, one nearest neighbour). - st_contiguity() of sfdep is used to identify the neighbours using contiguity criteria. - st_inverse_distance() is used to calculate inverse distance weights of neighbours on the nb list.\n\nfixed distance weightsadaptive distance weightsinverse distance weights\n\n\nfind maximum distance in knn with 1 neighbor\n\n\nCode\n# Extract the geometry (spatial information) from the 'hunan_GDPPC' dataset\ngeo &lt;- sf::st_geometry(hunan_GDPPC)\n\n# Create a spatial weights matrix using k-nearest neighbors (KNN) for the extracted geometry\nnb &lt;- st_knn(geo, longlat = TRUE)\n\n# Calculate the distances between each feature's centroid and its k-nearest neighbors\ndists &lt;- unlist(st_nb_dists(geo, nb))\n\n# show the result\nsummary(dists)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.56   29.11   36.89   37.34   43.21   65.80 \n\n\nuse the maximum distance to set threshold value in the following fixed distance weights calculation code:\n\n\nCode\n# Create a new variable wm_fd using the hunan_GDPPC data frame\nwm_fd &lt;- hunan_GDPPC %&gt;%\n  \n  # Add a new column 'nb' to the data frame\n  mutate(\n    nb = st_dist_band(geometry, upper = 66),  # Calculate a distance band based on geometry\n    \n    # Add a new column 'wt' to the data frame\n    wt = st_weights(nb),  # Calculate weights based on the distance band\n    \n    # Place the new columns 'nb' and 'wt' before the existing columns in the data frame\n    .before = 1\n  )\n\n# check the output\nprint(summary(wm_fd$nb))\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 400 \nPercentage nonzero weights: 5.165289 \nAverage number of links: 4.545455 \nLink number distribution:\n\n 1  2  3  4  5  6  7 \n 4  7 10 16 23 23  5 \n4 least connected regions:\n30 32 65 75 with 1 link\n5 most connected regions:\n41 52 58 63 80 with 7 links\n\n\nCode\nprint(glimpse(wm_fd))\n\n\nRows: 88\nColumns: 9\n$ nb        &lt;nb&gt; &lt;2, 3, 4, 5, 57, 64&gt;, &lt;1, 57, 58, 78, 85&gt;, &lt;1, 4, 5, 57&gt;, &lt;1,…\n$ wt        &lt;list&gt; &lt;0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1…\n$ NAME_2    &lt;chr&gt; \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Chan…\n$ ID_3      &lt;int&gt; 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 2111…\n$ NAME_3    &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"Li…\n$ ENGTYPE_3 &lt;chr&gt; \"County\", \"County\", \"County City\", \"County\", \"County\", \"Coun…\n$ County    &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"Li…\n$ GDPPC     &lt;dbl&gt; 23667, 20981, 34592, 24473, 25554, 27137, 63118, 62202, 7066…\n$ geometry  &lt;POLYGON [°]&gt; POLYGON ((112.0625 29.75523..., POLYGON ((112.2288 2…\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                       nb\n1      2, 3, 4, 5, 57, 64\n2       1, 57, 58, 78, 85\n3             1, 4, 5, 57\n4              1, 3, 5, 6\n5          1, 3, 4, 6, 69\n6                4, 5, 69\n7              67, 71, 84\n8       9, 46, 47, 78, 80\n9   8, 46, 66, 68, 84, 86\n10 16, 20, 22, 70, 72, 73\n                                                                 wt   NAME_2\n1  0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667  Changde\n2                                           0.2, 0.2, 0.2, 0.2, 0.2  Changde\n3                                            0.25, 0.25, 0.25, 0.25  Changde\n4                                            0.25, 0.25, 0.25, 0.25  Changde\n5                                           0.2, 0.2, 0.2, 0.2, 0.2  Changde\n6                                   0.3333333, 0.3333333, 0.3333333  Changde\n7                                   0.3333333, 0.3333333, 0.3333333 Changsha\n8                                           0.2, 0.2, 0.2, 0.2, 0.2 Changsha\n9  0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667 Changsha\n10 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667 Chenzhou\n    ID_3    NAME_3   ENGTYPE_3    County GDPPC                       geometry\n1  21098   Anxiang      County   Anxiang 23667 POLYGON ((112.0625 29.75523...\n2  21100   Hanshou      County   Hanshou 20981 POLYGON ((112.2288 29.11684...\n3  21101    Jinshi County City    Jinshi 34592 POLYGON ((111.8927 29.6013,...\n4  21102        Li      County        Li 24473 POLYGON ((111.3731 29.94649...\n5  21103     Linli      County     Linli 25554 POLYGON ((111.6324 29.76288...\n6  21104    Shimen      County    Shimen 27137 POLYGON ((110.8825 30.11675...\n7  21109   Liuyang County City   Liuyang 63118 POLYGON ((113.9905 28.5682,...\n8  21110 Ningxiang      County Ningxiang 62202 POLYGON ((112.7181 28.38299...\n9  21111 Wangcheng      County Wangcheng 70666 POLYGON ((112.7914 28.52688...\n10 21112     Anren      County     Anren 12761 POLYGON ((113.1757 26.82734...\n\n\n\n\nusing st_knn with number of neighbors (k) fixed to 8, it will find 8 nearest neighbours for each feature, without being limited by maximum distance (adaptive).\n\n\nCode\nwm_ad &lt;- hunan_GDPPC %&gt;% \n  mutate(nb = st_knn(geometry,\n                     k=8),\n         wt = st_weights(nb),\n               .before = 1)\n\n# check the output\nprint(summary(wm_ad$nb))\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\n\nCode\nprint(glimpse(wm_ad))\n\n\nRows: 88\nColumns: 9\n$ nb        &lt;nb&gt; &lt;2, 3, 4, 5, 57, 58, 64, 76&gt;, &lt;1, 3, 8, 57, 58, 68, 78, 85&gt;, …\n$ wt        &lt;list&gt; &lt;0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125&gt;, &lt;…\n$ NAME_2    &lt;chr&gt; \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Chan…\n$ ID_3      &lt;int&gt; 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 2111…\n$ NAME_3    &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"Li…\n$ ENGTYPE_3 &lt;chr&gt; \"County\", \"County\", \"County City\", \"County\", \"County\", \"Coun…\n$ County    &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"Li…\n$ GDPPC     &lt;dbl&gt; 23667, 20981, 34592, 24473, 25554, 27137, 63118, 62202, 7066…\n$ geometry  &lt;POLYGON [°]&gt; POLYGON ((112.0625 29.75523..., POLYGON ((112.2288 2…\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1      2, 3, 4, 5, 57, 58, 64, 76\n2     1, 3, 8, 57, 58, 68, 78, 85\n3       1, 2, 4, 5, 6, 57, 64, 85\n4       1, 2, 3, 5, 6, 57, 64, 69\n5       1, 2, 3, 4, 6, 57, 69, 85\n6       1, 2, 3, 4, 5, 69, 75, 85\n7   9, 66, 67, 68, 71, 74, 84, 86\n8    2, 9, 35, 46, 47, 78, 80, 86\n9   8, 46, 47, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                       wt   NAME_2  ID_3\n1  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21098\n2  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21100\n3  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21101\n4  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21102\n5  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21103\n6  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21104\n7  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125 Changsha 21109\n8  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125 Changsha 21110\n9  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125 Changsha 21111\n10 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125 Chenzhou 21112\n      NAME_3   ENGTYPE_3    County GDPPC                       geometry\n1    Anxiang      County   Anxiang 23667 POLYGON ((112.0625 29.75523...\n2    Hanshou      County   Hanshou 20981 POLYGON ((112.2288 29.11684...\n3     Jinshi County City    Jinshi 34592 POLYGON ((111.8927 29.6013,...\n4         Li      County        Li 24473 POLYGON ((111.3731 29.94649...\n5      Linli      County     Linli 25554 POLYGON ((111.6324 29.76288...\n6     Shimen      County    Shimen 27137 POLYGON ((110.8825 30.11675...\n7    Liuyang County City   Liuyang 63118 POLYGON ((113.9905 28.5682,...\n8  Ningxiang      County Ningxiang 62202 POLYGON ((112.7181 28.38299...\n9  Wangcheng      County Wangcheng 70666 POLYGON ((112.7914 28.52688...\n10     Anren      County     Anren 12761 POLYGON ((113.1757 26.82734...\n\n\n\n\ncalculate the weight based on inverse distance (the farther from the feature, the less weight).\n\n\nCode\nwm_idw &lt;- hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry), # set the neighbours based on contiguity\n         wts = st_inverse_distance(nb, geometry,  # Create a new variable 'wts' representing inverse distance weights by using the 'st_inverse_distance' function.\n                                   scale = 1,  # Set the scale parameter to 1, meaning distances will be used as they are.\n                                   alpha = 1),  # Set the alpha parameter to 1, indicating a linear decrease in influence with distance.\n         .before = 1)\n\n# check the output\nprint(summary(wm_idw$nb))\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nCode\nprint(glimpse(wm_idw))\n\n\nRows: 88\nColumns: 9\n$ nb        &lt;nb&gt; &lt;2, 3, 4, 57, 85&gt;, &lt;1, 57, 58, 78, 85&gt;, &lt;1, 4, 5, 85&gt;, &lt;1, 3,…\n$ wts       &lt;list&gt; &lt;0.01526149, 0.03515537, 0.02176677, 0.02836978, 0.01029857…\n$ NAME_2    &lt;chr&gt; \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Chan…\n$ ID_3      &lt;int&gt; 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 2111…\n$ NAME_3    &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"Li…\n$ ENGTYPE_3 &lt;chr&gt; \"County\", \"County\", \"County City\", \"County\", \"County\", \"Coun…\n$ County    &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"Li…\n$ GDPPC     &lt;dbl&gt; 23667, 20981, 34592, 24473, 25554, 27137, 63118, 62202, 7066…\n$ geometry  &lt;POLYGON [°]&gt; POLYGON ((112.0625 29.75523..., POLYGON ((112.2288 2…\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                                              wts\n1                                      0.01526149, 0.03515537, 0.02176677, 0.02836978, 0.01029857\n2                                      0.01526149, 0.01601100, 0.01911052, 0.02327058, 0.01591694\n3                                                  0.03515537, 0.04581089, 0.04116397, 0.01208437\n4                                                  0.02176677, 0.04581089, 0.04637578, 0.01585302\n5                                                  0.04116397, 0.04637578, 0.01896212, 0.01351099\n6                                      0.01585302, 0.01896212, 0.02710909, 0.01140718, 0.01080890\n7                                                  0.01621067, 0.01536702, 0.01133628, 0.01836488\n8              0.01930410, 0.02675555, 0.02151751, 0.01076895, 0.02608065, 0.01519804, 0.01337412\n9                          0.01930410, 0.01651371, 0.01798519, 0.01473155, 0.03015561, 0.01612293\n10 0.02737233, 0.01390810, 0.01458881, 0.02156771, 0.02419268, 0.02350470, 0.01784174, 0.01621545\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "in-class/ice2.html#global-measures-of-spatial-association",
    "href": "in-class/ice2.html#global-measures-of-spatial-association",
    "title": "In-class Exercise 2 - sfdep for Spatial Weights, GLSA & EHSA",
    "section": "3.1 Global Measures of Spatial Association",
    "text": "3.1 Global Measures of Spatial Association\nThe global spatial association here is measured using Moran’s I statistics in sfdep package. Specifically global_moran, and global_moran_test(), globel_moran_perm() and functions are used.\nThe following panel show step by step of how its done.\n\n1 Derive contiguity weights2 Computing Global Moran’s I3a Global Moran’s I test3b Global Moran’s I permutation test\n\n\n\n\nCode\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1)\n# check the output\nglimpse(wm_q)\n\n\nRows: 88\nColumns: 9\n$ nb        &lt;nb&gt; &lt;2, 3, 4, 57, 85&gt;, &lt;1, 57, 58, 78, 85&gt;, &lt;1, 4, 5, 85&gt;, &lt;1, 3,…\n$ wt        &lt;list&gt; &lt;0.2, 0.2, 0.2, 0.2, 0.2&gt;, &lt;0.2, 0.2, 0.2, 0.2, 0.2&gt;, &lt;0.25…\n$ NAME_2    &lt;chr&gt; \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Chan…\n$ ID_3      &lt;int&gt; 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 2111…\n$ NAME_3    &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"Li…\n$ ENGTYPE_3 &lt;chr&gt; \"County\", \"County\", \"County City\", \"County\", \"County\", \"Coun…\n$ County    &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"Li…\n$ GDPPC     &lt;dbl&gt; 23667, 20981, 34592, 24473, 25554, 27137, 63118, 62202, 7066…\n$ geometry  &lt;POLYGON [°]&gt; POLYGON ((112.0625 29.75523..., POLYGON ((112.2288 2…\n\n\n\n\n\n\nCode\nmoranI &lt;- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n# check the output\nglimpse(moranI)\n\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n\n\n\nThe Moran’s I value of 0.301 indicates that there is a moderate positive spatial autocorrelation in the distribution of GDP per capita (GDPPC). Spatial autocorrelation means that similar values tend to be clustered together in geographic space. In this context, areas with similar economic conditions are somewhat grouped or clustered on the map. The value of K, which is 7.64 in this case, provides a reference point for what we might expect under the assumption of spatial randomness. If the observed Moran’s I value is significantly different from the expected value of K, it suggests that the spatial pattern is not random. In simpler terms, the Moran’s I value of 0.301 is telling us that the distribution of GDP per capita in the geographic areas being studied is not random – there is a discernible pattern where neighboring areas tend to have similar economic conditions.\n\n\n\n\n\nCode\nglobal_moran_test(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\nThe Global Moran’s I test was conducted to assess whether the spatial pattern of GDP per capita (GDPPC) is random or exhibits clustering. The Moran I statistic standard deviate, which is 4.7351, indicates a strong positive spatial autocorrelation, reaffirming our earlier finding of a moderate positive spatial autocorrelation (Moran’s I value of 0.301). The p-value, being very small (1.095e-06), suggests that the observed spatial pattern is highly unlikely to occur by random chance. In simpler terms, this indicates a significant spatial clustering of similar economic conditions in neighboring areas on the map.\n\n\n\n\n\nCode\nset.seed(1234) # set seed to ensure computation is reproducible\nglobal_moran_perm(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt,\n                  nsim = 99) # number of simulation is nsim + 1, which means in this current setting, 100 simulation will be performed.\n\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\np-value is smaller than alpha value of 0.05. Hence, reject the null hypothesis that the spatial patterns spatial independent. Because the Moran’s I statistics is greater than 0. We can infer the spatial distribution shows sign of clustering.\n\n\n\n\nThe use of Monte Carlo simulation global_moran_perm(), is preferred over the normal global Moran test global_moran_test() when assessing spatial patterns because it provides a more reliable statistical test. Monte Carlo simulation generates many random scenarios to estimate the distribution of Moran’s I under the assumption of spatial randomness, allowing for a non-parametric evaluation of statistical significance. This approach is robust, especially when the assumptions of normality may not hold, making it a more flexible and accurate method for detecting spatial patterns in real-world data.\n\n\nInterpreting Global Moran’s I Value: 1) Positive Value Indicates positive spatial autocorrelation, meaning similar values are clustered together; 2) Negative Value Indicates negative spatial autocorrelation, meaning dissimilar values are clustered together; 3) Magnitude, The closer the value is to 1 (positively) or -1 (negatively), the stronger the spatial autocorrelation.\n\n\nInterpreting P-value of GLobal Moran’s I test: P-Value &lt; α Suggests that the observed spatial pattern is unlikely to be due to random chance, and vice versa. Positive Moran’s I and significant P Indicates a significant spatial clustering of similar values in neighboring areas. Negative Moran’s I and significant P Suggests a significant spatial dispersion or segregation of dissimilar values."
  },
  {
    "objectID": "in-class/ice2.html#local-measure-of-spatial-autocorrelation",
    "href": "in-class/ice2.html#local-measure-of-spatial-autocorrelation",
    "title": "In-class Exercise 2 - sfdep for Spatial Weights, GLSA & EHSA",
    "section": "3.2 Local Measure of Spatial Autocorrelation",
    "text": "3.2 Local Measure of Spatial Autocorrelation\n\n3.2.1 Computing local Moran’s I\nThis section will compute Local Moran’s I of GDPPC at county level by using local_moran() of sfdep package. unnest() of tidyr package is used to expand a list-column containing data frames into rows and columns.\n\n\nCode\n# LISA (Local Indicator of Spatial Autocorrelation)\nlisa &lt;- wm_q %&gt;%\n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran) # unnest is to add local_moran into individual columns. without it, it will be a list\n\n# check the output\nglimpse(lisa)\n\n\nRows: 88\nColumns: 21\n$ ii           &lt;dbl&gt; -1.468468e-03, 2.587817e-02, -1.198765e-02, 1.022468e-03,…\n$ eii          &lt;dbl&gt; 0.0017692414, 0.0064149158, -0.0374068734, -0.0000348833,…\n$ var_ii       &lt;dbl&gt; 4.179959e-04, 1.051040e-02, 1.020555e-01, 4.367565e-06, 1…\n$ z_ii         &lt;dbl&gt; -0.15836231, 0.18984794, 0.07956903, 0.50594053, 0.448752…\n$ p_ii         &lt;dbl&gt; 0.874171311, 0.849428289, 0.936580031, 0.612898396, 0.653…\n$ p_ii_sim     &lt;dbl&gt; 0.82, 0.96, 0.76, 0.64, 0.50, 0.82, 0.08, 0.08, 0.02, 0.2…\n$ p_folded_sim &lt;dbl&gt; 0.41, 0.48, 0.38, 0.32, 0.25, 0.41, 0.04, 0.04, 0.01, 0.1…\n$ skewness     &lt;dbl&gt; -0.8122108, -1.0905447, 0.8239085, 1.0401038, 1.6357304, …\n$ kurtosis     &lt;dbl&gt; 0.651875433, 1.889177462, 0.046095140, 1.613439800, 3.960…\n$ mean         &lt;fct&gt; Low-High, Low-Low, High-Low, High-High, High-High, High-L…\n$ median       &lt;fct&gt; High-High, High-High, High-High, High-High, High-High, Hi…\n$ pysal        &lt;fct&gt; Low-High, Low-Low, High-Low, High-High, High-High, High-L…\n$ nb           &lt;nb&gt; &lt;2, 3, 4, 57, 85&gt;, &lt;1, 57, 58, 78, 85&gt;, &lt;1, 4, 5, 85&gt;, &lt;1,…\n$ wt           &lt;list&gt; &lt;0.2, 0.2, 0.2, 0.2, 0.2&gt;, &lt;0.2, 0.2, 0.2, 0.2, 0.2&gt;, &lt;0…\n$ NAME_2       &lt;chr&gt; \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"C…\n$ ID_3         &lt;int&gt; 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 2…\n$ NAME_3       &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", …\n$ ENGTYPE_3    &lt;chr&gt; \"County\", \"County\", \"County City\", \"County\", \"County\", \"C…\n$ County       &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", …\n$ GDPPC        &lt;dbl&gt; 23667, 20981, 34592, 24473, 25554, 27137, 63118, 62202, 7…\n$ geometry     &lt;POLYGON [°]&gt; POLYGON ((112.0625 29.75523..., POLYGON ((112.228…\n\n\n\nNote that there are 88 rows in the output which represent the number of County in Hunan. This implied that each county have its own statistical value, which highlight that this is a Local Moran for measuring Local Spatial Autocorrelation.\n\nOutput of local_moran: - ii: local moran statistic - eii: expectation of local moran statistic; for local_moran_perm, its the permutation sample means - var_ii: variance of local moran statistic; for local_moran_perm, its the permutation sample standard deviations - z_ii: standard deviation of local moran statistic; for local_moran_perm, its based on permutation sample means and standard deviations - p_ii: p-value of local moran statistic using pnorm(); for local_moran_perm, its using standard deviation based on permutation sample means and standard deviations - p_ii_sim: For local_moran_perm(), rank() and punif() of observed statistic rank for [0, 1] p-values using alternative= - p_folded_sim: the simulation folded [0, 0.5] range ranked p-value source - skewness: For local_moran_perm, the output of e1071::skewness() for the permutation samples underlying the standard deviates - kurtosis: For local_moran_perm, the output of e1071::kurtosis() for the permutation samples underlying the standard deviates.\n\n\n3.2.2 Visualizing The Moran’s I Result\n::: panel-tabset #### ii\n\n\nCode\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\n\n\n\n\n\np-value\nThe following plot customize the map using common statistically significant alpha value threshold.\n\n\nCode\ntmap_mode(\"plot\")\n\n# Specify breaks and labels for classification\nbreaks &lt;- c(0, 0.01, 0.05, 0.1, 1.01)\nlabels &lt;- c(\"Significant at 1%\", \"Significant at 5%\", \"Significant at 10%\", \"Not Significant\")\n\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\", breaks = breaks, labels = labels) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8, legend.outside = TRUE,\n            legend.outside.position = 'right')\n\n\n\n\n\n\n\nii and p-value\n\n\nCode\ntmap_mode(\"plot\")\nmap1 &lt;- tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\n\n\n\n\n\n\nLISA map\nLocal Indicators of Spatial Association (LISA) map is a categorical map showing outliers and clusters. There are two types of outliers namely: High-Low and Low-High outliers. Likewise, there are two type of clusters namely: High-High and Low-Low clusters. In fact, LISA map is an interpreted map by combining local Moran’s I of geographical areas and their respective p-values.\nIn lisa sf data.frame, we can find three fields contain the LISA categories. They are mean, median and pysal. In general, classification in mean will be used as shown in the code chunk below.\n\n\n\nCode\n# Filter the 'lisa' data frame to include only observations where the p-value ('p_ii') is less than 0.05.\nlisa_sig &lt;- lisa  %&gt;%\n  filter(p_ii &lt; 0.05)\n# Set tmap mode to \"plot\" for plotting maps.\ntmap_mode(\"plot\") \n# Create a map using the 'lisa' data frame.\ntm_shape(lisa) +\n  tm_polygons() + # Add polygon (geographical shape) layer to the map.\n  tm_borders(alpha = 0.5) + # Add borders to the polygons with a specified level of transparency.\n# Create another layer on the map using the filtered 'lisa_sig' data frame.\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") +  # Fill the polygons with color based on the 'mean' variable.\n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "in-class/ice2.html#creating-a-time-series-cube",
    "href": "in-class/ice2.html#creating-a-time-series-cube",
    "title": "In-class Exercise 2 - sfdep for Spatial Weights, GLSA & EHSA",
    "section": "5.1 Creating a Time Series Cube",
    "text": "5.1 Creating a Time Series Cube\nA spacetime cube, in the context of geospatial analytics, is a data structure where each location has a value for every time index, essentially representing a regular time-series for each location. In ESRI’s terminology, the fundamental component of a spacetime cube is a “bin,” which is a unique combination of a location and time index. Collections of these locations for each time index are termed “time slices,” and the set of bins at each time index for a location form a “bin time-series”. For more details on using sfdep package to create spatio-temporal cube visit this link\nin the following code chunks, these function is used: - spacetime() of sfdep to create an spacetime cube. - is_spacetime_cube() of sfdep package to verify if GDPPC_st is indeed an space-time cube object.\n\n\nCode\n# Create a spacetime object named GDPPC_st using the spacetime function\nGDPPC_st &lt;- spacetime(GDPPC, hunan,\n                      .loc_col = \"County\",\n                      .time_col = \"Year\")\n\n# verify that it is space time cube\nprint(is_spacetime_cube(GDPPC_st))\n\n\n[1] TRUE\n\n\nCode\n# Display a summary of the spacetime object\nprint(glimpse(GDPPC_st))\n\n\nRows: 1,496\nColumns: 3\n$ Year   &lt;dbl&gt; 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 200…\n$ County &lt;chr&gt; \"Longshan\", \"Changsha\", \"Wangcheng\", \"Ningxiang\", \"Liuyang\", \"Z…\n$ GDPPC  &lt;dbl&gt; 3469, 24612, 14659, 11687, 13406, 8546, 10944, 8040, 7383, 1168…\n# A tibble: 1,496 × 3\n    Year County    GDPPC\n * &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;\n 1  2005 Longshan   3469\n 2  2005 Changsha  24612\n 3  2005 Wangcheng 14659\n 4  2005 Ningxiang 11687\n 5  2005 Liuyang   13406\n 6  2005 Zhuzhou    8546\n 7  2005 You       10944\n 8  2005 Chaling    8040\n 9  2005 Yanling    7383\n10  2005 Liling    11688\n# ℹ 1,486 more rows\n\n\nThe TRUE return confirms that GDPPC_st object is indeed an time-space cube."
  },
  {
    "objectID": "in-class/ice2.html#computing-gi",
    "href": "in-class/ice2.html#computing-gi",
    "title": "In-class Exercise 2 - sfdep for Spatial Weights, GLSA & EHSA",
    "section": "5.2 Computing Gi*",
    "text": "5.2 Computing Gi*\nNext, compute the local Gi* statistics. To do it, derive inverse distance weights first.\n\n\nCode\n# Create a neighbors and weights object named DPPC_nb using the GDPPC_st spacetime object\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  # Activate the spatial geometry component of the spacetime object, allowing spatial operations to be performed\n  activate(\"geometry\") %&gt;%\n  # Add a new variable 'nb' representing neighbors and 'wt' representing weights\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n  # Set the neighbors using the 'nb' variable\n  set_nbs(\"nb\") %&gt;%\n  # Set the weights using the 'wt' variable\n  set_wts(\"wt\")\n\n# Display a summary of the neighbors and weights object\nglimpse(GDPPC_nb)\n\n\nRows: 1,496\nColumns: 5\n$ Year   &lt;dbl&gt; 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 200…\n$ County &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"Liuya…\n$ GDPPC  &lt;dbl&gt; 8184, 6560, 9956, 8394, 8850, 9244, 13406, 11687, 14659, 7423, …\n$ nb     &lt;list&gt; &lt;1, 2, 3, 4, 57, 85&gt;, &lt;1, 2, 57, 58, 78, 85&gt;, &lt;1, 3, 4, 5, 85&gt;…\n$ wt     &lt;list&gt; &lt;0.00000000, 0.01526149, 0.03515537, 0.02176677, 0.02836978, 0…\n\n\n\n\nCode\nGDPPC_st\n\n\n# A tibble: 1,496 × 3\n    Year County    GDPPC\n * &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;\n 1  2005 Longshan   3469\n 2  2005 Changsha  24612\n 3  2005 Wangcheng 14659\n 4  2005 Ningxiang 11687\n 5  2005 Liuyang   13406\n 6  2005 Zhuzhou    8546\n 7  2005 You       10944\n 8  2005 Chaling    8040\n 9  2005 Yanling    7383\n10  2005 Liling    11688\n# ℹ 1,486 more rows\n\n\nCompute Gi* using the following code\n\n\nCode\ngi_stars &lt;- GDPPC_nb %&gt;% \n  group_by(Year) %&gt;% \n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %&gt;% \n  tidyr::unnest(gi_star)\n\n# check the output\nglimpse(gi_stars)\n\n\nRows: 1,496\nColumns: 13\nGroups: Year [17]\n$ Year         &lt;dbl&gt; 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 200…\n$ County       &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", …\n$ GDPPC        &lt;dbl&gt; 8184, 6560, 9956, 8394, 8850, 9244, 13406, 11687, 14659, …\n$ nb           &lt;list&gt; &lt;1, 2, 3, 4, 57, 85&gt;, &lt;1, 2, 57, 58, 78, 85&gt;, &lt;1, 3, 4, …\n$ wt           &lt;list&gt; &lt;0.00000000, 0.01526149, 0.03515537, 0.02176677, 0.02836…\n$ gi_star      &lt;dbl&gt; 0.39812392, -0.23690950, 1.05308649, 0.96565566, 1.047539…\n$ e_gi         &lt;dbl&gt; 0.011503828, 0.010904067, 0.012643127, 0.011729795, 0.011…\n$ var_gi       &lt;dbl&gt; 2.689913e-06, 2.640805e-06, 3.327364e-06, 3.235001e-06, 3…\n$ p_value      &lt;dbl&gt; 0.382095046, 0.001990885, 0.507080740, 0.920309942, 0.884…\n$ p_sim        &lt;dbl&gt; 0.7023908659, 0.9984115046, 0.6120981684, 0.3574108152, 0…\n$ p_folded_sim &lt;dbl&gt; 0.608, 0.892, 0.528, 0.308, 0.352, 0.920, 0.008, 0.396, 0…\n$ skewness     &lt;dbl&gt; 0.304, 0.446, 0.264, 0.154, 0.176, 0.460, 0.004, 0.198, 0…\n$ kurtosis     &lt;dbl&gt; 0.8925173, 0.8204179, 0.9285558, 1.1852446, 0.8742758, 0.…"
  },
  {
    "objectID": "in-class/ice2.html#mann-kendall-test",
    "href": "in-class/ice2.html#mann-kendall-test",
    "title": "In-class Exercise 2 - sfdep for Spatial Weights, GLSA & EHSA",
    "section": "5.3 Mann-Kendall Test",
    "text": "5.3 Mann-Kendall Test\nUsing Gi* measures, Mann-Kendall test can be run to valuate each location for a trend\n\n\nCode\ncbg &lt;- gi_stars %&gt;% \n  ungroup() %&gt;% \n  filter(County == \"Changsha\") |&gt; \n  select(County, Year, gi_star)\n\n# check the output\nglimpse(cbg)\n\n\nRows: 17\nColumns: 3\n$ County  &lt;chr&gt; \"Changsha\", \"Changsha\", \"Changsha\", \"Changsha\", \"Changsha\", \"C…\n$ Year    &lt;dbl&gt; 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 20…\n$ gi_star &lt;dbl&gt; 5.028300, 5.169201, 5.295889, 5.603954, 6.278886, 5.935746, 5.…\n\n\nplot the result\n\n\nCode\nggplot(data = cbg, \n       aes(x = Year, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\n\n\nThe graph shows a time series of the standardized Gi* statistic (gi_star) for Changsha county in Hunan, which is a measure of local spatial association for GDP per capita over time. The trend indicates fluctuations with peaks and troughs, suggesting periods of relatively high and low localized economic performance when compared to the overall spatial-temporal dataset.\n\nAlternatively, create an interactive plot using ggplotly() of plotly package.\n\n\nCode\np &lt;- ggplot(data = cbg, \n       aes(x = Year, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p)\n\n\n\n\n\n\n\n\nCode\ncbg %&gt;%\n  # Summarize the data using the Mann-Kendall test and store the results in a list named 'mk'\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;% \n  # Unnest the 'mk' list and widen it to create separate columns for each element\n  tidyr::unnest_wider(mk)\n\n\n# A tibble: 1 × 5\n    tau      sl     S     D  varS\n  &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 0.485 0.00742    66  136.  589.\n\n\nIn the above result, sl is the p-value. This result tells us that there is a slight upward but insignificant trend.\nWe can replicate this for each location by using group_by() of dplyr package.\n\n\nCode\nehsa &lt;- gi_stars %&gt;%\n  # Group the data by 'County'\n  group_by(County) %&gt;%\n  # Summarize the data within each group using the Mann-Kendall test and store the results in a list named 'mk'\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  # Unnest the 'mk' list and widen it to create separate columns for each element\n  tidyr::unnest_wider(mk)\n\n# check the output\nglimpse(ehsa)\n\n\nRows: 88\nColumns: 6\n$ County &lt;chr&gt; \"Anhua\", \"Anren\", \"Anxiang\", \"Baojing\", \"Chaling\", \"Changning\",…\n$ tau    &lt;dbl&gt; 0.19117649, -0.29411769, 0.00000000, -0.69117653, -0.08823530, …\n$ sl     &lt;dbl&gt; 3.030965e-01, 1.081613e-01, 1.000000e+00, 1.276678e-04, 6.50463…\n$ S      &lt;dbl&gt; 26, -40, 0, -94, -12, -102, 66, -112, -16, 14, -6, -112, -104, …\n$ D      &lt;dbl&gt; 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136…\n$ varS   &lt;dbl&gt; 589.3333, 589.3333, 589.3333, 589.3333, 589.3333, 589.3333, 589…"
  },
  {
    "objectID": "in-class/ice2.html#arrange-to-show-significant-emerging-hotcold-spots",
    "href": "in-class/ice2.html#arrange-to-show-significant-emerging-hotcold-spots",
    "title": "In-class Exercise 2 - sfdep for Spatial Weights, GLSA & EHSA",
    "section": "5.4 Arrange to show significant emerging hot/cold spots",
    "text": "5.4 Arrange to show significant emerging hot/cold spots\n\n\nCode\nemerging &lt;- ehsa %&gt;% \n  # Arrange the data in ascending order based on the 'sl' column and the absolute value of 'tau' column\n  arrange(sl, abs(tau)) %&gt;%\n  # Extract the top 5 rows after sorting\n  slice(1:5)\n\n# check the output\nglimpse(emerging)\n\n\nRows: 5\nColumns: 6\n$ County &lt;chr&gt; \"Shuangfeng\", \"Xiangtan\", \"Xiangxiang\", \"Chengbu\", \"Dongan\"\n$ tau    &lt;dbl&gt; 0.8676472, 0.8676472, 0.8676472, -0.8235295, -0.8235295\n$ sl     &lt;dbl&gt; 1.430511e-06, 1.430511e-06, 1.430511e-06, 4.822108e-06, 4.82210…\n$ S      &lt;dbl&gt; 118, 118, 118, -112, -112\n$ D      &lt;dbl&gt; 136, 136, 136, 136, 136\n$ varS   &lt;dbl&gt; 589.3333, 589.3333, 589.3333, 589.3333, 589.3333"
  },
  {
    "objectID": "in-class/ice2.html#performing-emerging-hotspot-analysis",
    "href": "in-class/ice2.html#performing-emerging-hotspot-analysis",
    "title": "In-class Exercise 2 - sfdep for Spatial Weights, GLSA & EHSA",
    "section": "5.5 Performing Emerging Hotspot Analysis",
    "text": "5.5 Performing Emerging Hotspot Analysis\nLastly, we will perform EHSA analysis by using emerging_hotspot_analysis() of sfdep package. It takes a spacetime object x (i.e. GDPPC_st), and the quoted name of the variable of interest (i.e. GDPPC) for .var argument. The k argument is used to specify the number of time lags which is set to 1 by default. Lastly, nsim map numbers of simulation to be performed.\n\n\nCode\nehsa &lt;- emerging_hotspot_analysis(\n  x = GDPPC_st,     # Input data: Spacetime object representing data with spatial and temporal dimensions\n  .var = \"GDPPC\",   # Variable of interest for the analysis is \"GDPPC\"\n  k = 1,             # number of time lags to include in the neighborhood for calculating the local Gi*\n  nsim = 99         # determining the number of simulations to calculate simulated p-value for logal Gi*\n)\n\n# check the output\nglimpse(ehsa)\n\n\nRows: 88\nColumns: 4\n$ location       &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\"…\n$ tau            &lt;dbl&gt; 0.22058827, 0.14705884, 0.44117653, -0.82352948, 0.1176…\n$ p_value        &lt;dbl&gt; 2.322488e-01, 4.338268e-01, 1.508367e-02, 4.822108e-06,…\n$ classification &lt;chr&gt; \"sporadic coldspot\", \"sporadic hotspot\", \"oscilating ho…\n\n\nClassifications:\n\nConsecutive Hotspot: A consecutive hotspot in EHSA refers to a spatial and temporal pattern where a specific area consistently exhibits high values over consecutive time periods.\nNo Pattern Detected: When EHSA identifies “no pattern detected,” it indicates that there is no discernible consistent spatial or temporal trend in the analyzed data.\nOscillating Coldspot: An oscillating coldspot in EHSA describes a location that alternates between periods of exhibiting lower values and periods of relative inactivity.\nOscillating Hotspot: An oscillating hotspot in EHSA characterizes a location that alternates between periods of exhibiting higher values and periods of relative inactivity.\nSporadic Coldspot: A sporadic coldspot in EHSA refers to a location that irregularly experiences periods of lower values without a clear, sustained pattern.\nSporadic Hotspot: A sporadic hotspot in EHSA describes a location that irregularly experiences periods of higher values without a clear, sustained pattern.\n\nthe next panel will visualise the result:\n\nDistribution of EHSA classesGeographic EHSA classes distribution\n\n\n\n\nCode\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\n\nFigure above shows that sporadic cold spots class has the highest numbers of county.\n\n\n\n\nCode\n# join the dataset\nhunan_ehsa &lt;- hunan %&gt;%\n  left_join(ehsa,\n            by = join_by(County == location))\n\n# plot the map\nehsa_sig &lt;- hunan_ehsa  %&gt;%\n  filter(p_value &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(hunan_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "in-class/ice4.html",
    "href": "in-class/ice4.html",
    "title": "In-class Exercise 4 - Geospatial Data Science and Spatial Interaction Model with R",
    "section": "",
    "text": "Illustration"
  },
  {
    "objectID": "in-class/ice4.html#overview",
    "href": "in-class/ice4.html#overview",
    "title": "In-class Exercise 4 - Geospatial Data Science and Spatial Interaction Model with R",
    "section": "1.1 Overview",
    "text": "1.1 Overview\nIn this exercise, we are going to do the following: - Performing geocoding using data downloaded from data.gov.sg - Calibrating Geographically Weighted Poisson Regression - perform point-in-polygon count analysis - append the propulsiveness and attractiveness variables onto a flow data."
  },
  {
    "objectID": "in-class/ice4.html#getting-started",
    "href": "in-class/ice4.html#getting-started",
    "title": "In-class Exercise 4 - Geospatial Data Science and Spatial Interaction Model with R",
    "section": "1.2 Getting Started",
    "text": "1.2 Getting Started\n\n\nCode\npacman::p_load(tidyverse, sf, httr, tmap, dplyr)\n\n\n\n\n\n\n\n\nPackages Explanations\n\n\n\n\n\n\ntidyverse: A collection of R packages designed for data science that makes it easier to import, tidy, transform, visualize, and model data.\nsf: An R package that simplifies handling and manipulating geospatial data, providing simple features access for geographic data operations.\nhttr: A user-friendly package to make working with HTTP requests easier, providing useful tools for interacting with APIs and web services directly from R.\ntmap: An R package for creating thematic maps that can be static or interactive, offering a structured and comprehensive approach to visualizing spatial data.\n\n\n\n\n\n1.2.1 Geocoding using SLA API\nGeocoding is the conversion of an address or postal code into geographic coordinates, typically latitude and longitude. The Singapore Land Authority offers the OneMap API, specifically the Search API, which retrieves latitude, longitude, and x,y coordinates for a given address or postal code.\nTo perform geocoding using the SLA OneMap API, the provided code, written in R, reads input data from a CSV file using the read_csv function from the readr package. The httr package’s HTTP call functions are then used to send individual records to the OneMap geocoding server.\nThe geocoding process creates two data frames: found for successfully geocoded records and not_found for those that failed. The found data table is joined with the initial CSV data table using a unique identifier (POSTAL) and saved as a new CSV file named found.\n\n\nCode\nurl &lt;- \"https://www.onemap.gov.sg/api/common/elastic/search\"\n\ncsv &lt;- read_csv(\"../data/aspatial/Generalinformationofschools.csv\")\npostcodes &lt;- csv$postal_code\n\nfound &lt;- data.frame()\nnot_found &lt;- data.frame()\n\nfor(postcode in postcodes){\n  query &lt;-list('searchVal' = postcode, 'returnGeom'='Y', 'getAddrDetails'='Y', 'pageNum' = '1')\n  res  &lt;- GET(url, query=query)\n  \n  if((content(res)$found)!=0)\n    found&lt;-rbind(found, data.frame(content(res))[4:13])\n  else {\n  not_found = data.frame(postcode)\n  }\n} \n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nread_csv from readr package reads a CSV file into R, creating a data frame.\nA for loop in base R iterates over each postcode in postcodes.\nGET from httr package sends an HTTP GET request to a specified URL. Here, it is used to query a web API with specific parameters for each postcode.\ncontent from httr package extracts content from a response object returned by GET. It’s used to extract data from the API response.\nrbind from base R combines data frames by rows. In this code, it’s used to append new rows to found or not_found.\nThe code checks if each postcode has corresponding data in the API response (found) or not (not_found), and constructs two separate data frames accordingly.\n\n\n\n\nFirst, let’s check the Resulting Variables ::: panel-tabset #### url\n\n\nCode\nurl\n\n\n[1] \"https://www.onemap.gov.sg/api/common/elastic/search\"\n\n\n\ncsv\n\n\nCode\nglimpse(csv)\n\n\nRows: 346\nColumns: 31\n$ school_name        &lt;chr&gt; \"ADMIRALTY PRIMARY SCHOOL\", \"ADMIRALTY SECONDARY SC…\n$ url_address        &lt;chr&gt; \"https://admiraltypri.moe.edu.sg/\", \"http://www.adm…\n$ address            &lt;chr&gt; \"11   WOODLANDS CIRCLE\", \"31   WOODLANDS CRESCENT\",…\n$ postal_code        &lt;chr&gt; \"738907\", \"737916\", \"768643\", \"768928\", \"579646\", \"…\n$ telephone_no       &lt;chr&gt; \"63620598\", \"63651733\", \"67592906\", \"67585384\", \"64…\n$ telephone_no_2     &lt;chr&gt; \"na\", \"63654596\", \"na\", \"na\", \"na\", \"na\", \"na\", \"na…\n$ fax_no             &lt;chr&gt; \"63627512\", \"63652774\", \"67592927\", \"67557778\", \"64…\n$ fax_no_2           &lt;chr&gt; \"na\", \"na\", \"na\", \"na\", \"na\", \"na\", \"na\", \"na\", \"na…\n$ email_address      &lt;chr&gt; \"ADMIRALTY_PS@MOE.EDU.SG\", \"Admiralty_SS@moe.edu.sg…\n$ mrt_desc           &lt;chr&gt; \"Admiralty Station\", \"ADMIRALTY MRT\", \"Yishun\", \"CA…\n$ bus_desc           &lt;chr&gt; \"TIBS 965, 964, 913\", \"904\", \"Yishun Ring Road - 81…\n$ principal_name     &lt;chr&gt; \"MR PEK WEE HAUR\", \"MR LAM YUI- P'NG\", \"MISS ONG LE…\n$ first_vp_name      &lt;chr&gt; \"MDM CHUA MUI LING\", \"MR NG SONG LIM STEVEN\", \"MADA…\n$ second_vp_name     &lt;chr&gt; \"MDM NUR SABARIAH BTE MOHD IBRAHIM\", \"MR SHEIK ALAU…\n$ third_vp_name      &lt;chr&gt; \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NU…\n$ fourth_vp_name     &lt;chr&gt; \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NU…\n$ fifth_vp_name      &lt;chr&gt; \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NU…\n$ sixth_vp_name      &lt;chr&gt; \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NU…\n$ dgp_code           &lt;chr&gt; \"WOODLANDS\", \"WOODLANDS\", \"YISHUN\", \"YISHUN\", \"BISH…\n$ zone_code          &lt;chr&gt; \"NORTH\", \"NORTH\", \"NORTH\", \"NORTH\", \"SOUTH\", \"SOUTH…\n$ type_code          &lt;chr&gt; \"GOVERNMENT SCHOOL\", \"GOVERNMENT SCHOOL\", \"GOVERNME…\n$ nature_code        &lt;chr&gt; \"CO-ED SCHOOL\", \"CO-ED SCHOOL\", \"CO-ED SCHOOL\", \"CO…\n$ session_code       &lt;chr&gt; \"FULL DAY\", \"SINGLE SESSION\", \"SINGLE SESSION\", \"SI…\n$ mainlevel_code     &lt;chr&gt; \"PRIMARY\", \"SECONDARY\", \"PRIMARY\", \"SECONDARY\", \"PR…\n$ sap_ind            &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"N…\n$ autonomous_ind     &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Ye…\n$ gifted_ind         &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No…\n$ ip_ind             &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No…\n$ mothertongue1_code &lt;chr&gt; \"Chinese\", \"Chinese\", \"Chinese\", \"Chinese\", \"Chines…\n$ mothertongue2_code &lt;chr&gt; \"Malay\", \"Malay\", \"Malay\", \"Malay\", \"na\", \"Malay\", …\n$ mothertongue3_code &lt;chr&gt; \"Tamil\", \"Tamil\", \"Tamil\", \"Tamil\", \"na\", \"Tamil\", …\n\n\n\n\npostcodes\n\n\nCode\nglimpse(postcodes)\n\n\n chr [1:346] \"738907\" \"737916\" \"768643\" \"768928\" \"579646\" \"159016\" \"544969\" ...\n\n\n\n\nfound\n\n\nCode\nglimpse(found)\n\n\nRows: 345\nColumns: 10\n$ results.SEARCHVAL &lt;chr&gt; \"THE LEARNING HARBOUR @ ADMIRALTY PRIMARY SCHOOL\", \"…\n$ results.BLK_NO    &lt;chr&gt; \"11\", \"31\", \"10\", \"751\", \"100\", \"2A\", \"31\", \"19\", \"1…\n$ results.ROAD_NAME &lt;chr&gt; \"WOODLANDS CIRCLE\", \"WOODLANDS CRESCENT\", \"YISHUN ST…\n$ results.BUILDING  &lt;chr&gt; \"THE LEARNING HARBOUR @ ADMIRALTY PRIMARY SCHOOL\", \"…\n$ results.ADDRESS   &lt;chr&gt; \"11 WOODLANDS CIRCLE THE LEARNING HARBOUR @ ADMIRALT…\n$ results.POSTAL    &lt;chr&gt; \"738907\", \"737916\", \"768643\", \"768928\", \"579646\", \"1…\n$ results.X         &lt;chr&gt; \"24315.9398124339\", \"24559.0472937012\", \"27958.13714…\n$ results.Y         &lt;chr&gt; \"47135.3542042952\", \"47504.7873554379\", \"46096.26276…\n$ results.LATITUDE  &lt;chr&gt; \"1.44254963931583\", \"1.44589068910993\", \"1.433152715…\n$ results.LONGITUDE &lt;chr&gt; \"103.800213682734\", \"103.802398196596\", \"103.8329424…\n\n\n\n\nnot_found\n\n\nCode\nglimpse(not_found)\n\n\nRows: 1\nColumns: 1\n$ postcode &lt;chr&gt; \"677741\"\n\n\n:::\nNext, we combine both found and not_found into a single tibble dataframe.\n\n\nCode\nmerged = merge(csv, found, by.x = 'postal_code', by.y = 'results.POSTAL', all = TRUE)\n\n# manually add the Zhenghua Secondary School data\nmerged[merged$school_name == \"ZHENGHUA SECONDARY SCHOOL\", \"results.LATITUDE\"] &lt;- 1.3887\nmerged[merged$school_name == \"ZHENGHUA SECONDARY SCHOOL\", \"results.LONGITUDE\"] &lt;- 103.7652\n\nwrite.csv(merged, file = \"../data/aspatial/schools.csv\")\nwrite.csv(not_found, file = \"../data/aspatial/not_found.csv\")\n\n# check the output\nglimpse(merged)\n\n\nRows: 350\nColumns: 40\n$ postal_code        &lt;chr&gt; \"088256\", \"099138\", \"099757\", \"099840\", \"109100\", \"…\n$ school_name        &lt;chr&gt; \"CANTONMENT PRIMARY SCHOOL\", \"CHIJ ST. THERESA'S CO…\n$ url_address        &lt;chr&gt; \"http://www.cantonmentpri.moe.edu.sg\", \"http://www.…\n$ address            &lt;chr&gt; \"1    Cantonment Close\", \"160  LOWER DELTA ROAD\", \"…\n$ telephone_no       &lt;chr&gt; \"65119555\", \"64775777\", \"62730096\", \"62733937\", \"62…\n$ telephone_no_2     &lt;chr&gt; \"na\", \"na\", \"na\", \"na\", \"na\", \"na\", \"na\", \"na\", \"na…\n$ fax_no             &lt;chr&gt; \"65119556\", \"64775700\", \"62731710\", \"62763083\", \"62…\n$ fax_no_2           &lt;chr&gt; \"na\", \"na\", \"na\", \"na\", \"na\", \"na\", \"na\", \"na\", \"na…\n$ email_address      &lt;chr&gt; \"cantonment_ps@moe.edu.sg\", \"CHIJSTCS@MOE.EDU.SG\", …\n$ mrt_desc           &lt;chr&gt; \"Tanjong Pagar Outram Park\", \"HARBOURFRONT MRT, TIO…\n$ bus_desc           &lt;chr&gt; \"75, 167, 196\", \"65, 121, 123, 123M, 124, 131, 131M…\n$ principal_name     &lt;chr&gt; \"MRS MANOKARA SUGUNAVATHI\", \"MDM TAN MEI MEI JENNY\"…\n$ first_vp_name      &lt;chr&gt; \"MRS AUDREA CHIN\", \"MDM ONG LEE LEE\", \"MS NG CHIOU …\n$ second_vp_name     &lt;chr&gt; \"MISS CHENG SHIN MIIN\", \"MISS KUO ZHAOYAN, FELICIA\"…\n$ third_vp_name      &lt;chr&gt; \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NU…\n$ fourth_vp_name     &lt;chr&gt; \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NU…\n$ fifth_vp_name      &lt;chr&gt; \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NU…\n$ sixth_vp_name      &lt;chr&gt; \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NU…\n$ dgp_code           &lt;chr&gt; \"BUKIT MERAH\", \"BUKIT MERAH\", \"BUKIT MERAH\", \"BUKIT…\n$ zone_code          &lt;chr&gt; \"SOUTH\", \"SOUTH\", \"SOUTH\", \"SOUTH\", \"SOUTH\", \"SOUTH…\n$ type_code          &lt;chr&gt; \"GOVERNMENT SCHOOL\", \"GOVERNMENT-AIDED SCH\", \"GOVER…\n$ nature_code        &lt;chr&gt; \"CO-ED SCHOOL\", \"GIRLS' SCHOOL\", \"GIRLS' SCHOOL\", \"…\n$ session_code       &lt;chr&gt; \"SINGLE SESSION\", \"SINGLE SESSION\", \"SINGLE SESSION…\n$ mainlevel_code     &lt;chr&gt; \"PRIMARY\", \"SECONDARY\", \"PRIMARY\", \"PRIMARY\", \"PRIM…\n$ sap_ind            &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Ye…\n$ autonomous_ind     &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No…\n$ gifted_ind         &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Ye…\n$ ip_ind             &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No…\n$ mothertongue1_code &lt;chr&gt; \"Chinese\", \"Chinese\", \"Chinese\", \"Chinese\", \"Chines…\n$ mothertongue2_code &lt;chr&gt; \"Malay\", \"Malay\", \"Malay\", \"Malay\", \"Malay\", \"Malay…\n$ mothertongue3_code &lt;chr&gt; \"Tamil\", \"Tamil\", \"Tamil\", \"Tamil\", \"Tamil\", \"na\", …\n$ results.SEARCHVAL  &lt;chr&gt; \"KIDZ TREEHOUSE @ CANTONMENT\", \"CHIJ SAINT THERESA'…\n$ results.BLK_NO     &lt;chr&gt; \"1\", \"160\", \"1\", \"1\", \"91\", \"147\", \"301\", \"50\", \"30…\n$ results.ROAD_NAME  &lt;chr&gt; \"CANTONMENT CLOSE\", \"LOWER DELTA ROAD\", \"BUKIT TERE…\n$ results.BUILDING   &lt;chr&gt; \"KIDZ TREEHOUSE @ CANTONMENT\", \"CHIJ SAINT THERESA'…\n$ results.ADDRESS    &lt;chr&gt; \"1 CANTONMENT CLOSE KIDZ TREEHOUSE @ CANTONMENT SIN…\n$ results.X          &lt;chr&gt; \"28748.1620587641\", \"26789.3781491434\", \"27402.9654…\n$ results.Y          &lt;chr&gt; \"28659.9995642845\", \"28647.4426490944\", \"28579.8478…\n$ results.LATITUDE   &lt;chr&gt; \"1.27546534984202\", \"1.27535177510054\", \"1.27474048…\n$ results.LONGITUDE  &lt;chr&gt; \"103.840041087946\", \"103.822440701642\", \"103.827954…\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nmerge from base R combines two data frames by matching rows based on specified columns. In this code, csv and found are merged using postal_code from csv and results.POSTAL from found, with the all = TRUE option to include all rows from both data frames.\nThe manual addition of data for “ZHENGHUA SECONDARY SCHOOL” is performed using base R’s subsetting and assignment operations.\nwrite.csv from base R writes a data frame to a CSV file.\nglimpse from dplyr package provides a transposed summary of the data frame, offering a quick look at its structure and contents.\n\n\n\n\n\n\n\n1.2.2 Importing and tidying schools data\nIn this sub-section, you will import schools.csv into R environment and at the same time tidying the data by selecting only the necessary fields as well as rename some fields.\n\n\nCode\n# re-import the correct dataset as schools\nschools &lt;- read_csv(\"../data/aspatial/schools.csv\")\n\nschools &lt;- schools %&gt;%\n  rename(latitude = \"results.LATITUDE\",\n         longitude = \"results.LONGITUDE\")\n\nschools &lt;- schools %&gt;%\n    select(`postal_code`, `school_name`, `latitude`, `longitude`)\n\n# check the output\nglimpse(schools)\n\n\nRows: 350\nColumns: 4\n$ postal_code &lt;chr&gt; \"088256\", \"099138\", \"099757\", \"099840\", \"109100\", \"127368\"…\n$ school_name &lt;chr&gt; \"CANTONMENT PRIMARY SCHOOL\", \"CHIJ ST. THERESA'S CONVENT\",…\n$ latitude    &lt;dbl&gt; 1.275465, 1.275352, 1.274740, 1.274958, 1.276128, 1.301228…\n$ longitude   &lt;dbl&gt; 103.8400, 103.8224, 103.8280, 103.8242, 103.8086, 103.7649…\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nread_csv from readr package reads a CSV file into R, creating a data frame.\nrename from dplyr package changes the names of specific columns in a data frame for clarity or convenience. Here, it renames results.LATITUDE to latitude and results.LONGITUDE to longitude.\nselect from dplyr package is used to subset specific columns from the data frame, retaining only the postal_code, school_name, latitude, and longitude columns.\nglimpse from dplyr package provides a quick overview of the data frame’s structure, including column types and the first few entries in each column.\n\n\n\n\n\n\n1.2.3 Converting an aspatial data into sf tibble data.frame\nNext, you will convert schools tibble data.frame data into a simple feature tibble data.frame called schools_sf by using values in latitude and longitude fields.\n\n\nCode\nschools_sf &lt;- st_as_sf(schools,\n                       coords = c(\"longitude\", \"latitude\"),\n                       crs = 4326) %&gt;%\n  st_transform(crs = 3414)\n\n# check the output\nglimpse(schools_sf)\n\n\nRows: 350\nColumns: 3\n$ postal_code &lt;chr&gt; \"088256\", \"099138\", \"099757\", \"099840\", \"109100\", \"127368\"…\n$ school_name &lt;chr&gt; \"CANTONMENT PRIMARY SCHOOL\", \"CHIJ ST. THERESA'S CONVENT\",…\n$ geometry    &lt;POINT [m]&gt; POINT (28748.16 28660), POINT (26789.38 28647.44), P…\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nst_as_sf from sf package converts a data frame to a simple features (sf) object, specifying the coordinates for spatial data. In this code, longitude and latitude columns are used for coordinates.\nst_transform from sf package transforms the coordinate reference system (CRS) of the sf object. Here, it converts CRS to 3414.\nglimpse from dplyr package provides a transposed summary of the sf object, giving a quick look at its structure, including geometry type and the first few entries in each column.\n\n\n\n\n\n\n1.2.4 Plotting a point simple feature layer\nTo ensure that schools sf tibble data.frame has been projected and converted correctly, you can plot the schools point data for visual inspection.\nFirst, import MPSZ-2019 shapefile into R as sf tibble data.frame and name it mpsz.\n\n\nCode\nmpsz &lt;- st_read(dsn = \"../data/geospatial/\",\n                layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\n\nReading layer `MPSZ-2019' from data source `C:\\ameernoor\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nCode\n# check the output\nmpsz\n\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\nNext, create a point symbol map showing the location of schools with OSM as the background map.\n\n\nCode\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(schools_sf) +\n  tm_dots()\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\ntmap_options from tmap package sets options for tmap functions. In this case, it’s set to automatically check and fix invalid polygons in spatial data.\ntm_shape from tmap package prepares spatial data for plotting. It is used twice in this code: first for the mpsz dataset and then for schools_sf.\ntm_polygons from tmap package adds a layer of polygons to the map, in this case, for the mpsz data.\ntm_dots from tmap package adds a layer of dots to the map, here representing the schools_sf data.\nThis code snippet creates a thematic map that combines polygons from mpsz and dots representing schools from schools_sf.\n\n\n\n\n\n\n1.2.5 Create Interactive Map\n\n\nCode\ntmap_mode(\"view\")\ntm_shape(schools_sf) +\n  tm_dots() +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\nCode\n# turn off the interactive layer setting for next codes\ntmap_mode(\"plot\")\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\ntmap_mode from tmap package sets the mode for creating maps. Initially, it’s set to \"view\" for interactive maps.\ntm_shape from tmap package prepares the spatial data (here schools_sf) for plotting.\ntm_dots from tmap package adds a layer of dots to represent spatial points on the map.\ntm_view from tmap package customizes the interactive map view, including setting zoom limits.\nThe code snippet creates an interactive map displaying schools as dots.\nFinally, tmap_mode(\"plot\") switches back to static plotting mode, stopping the interactive layer.\n\n\n\n\n\n\n1.2.6 Performing point-in-polygon count process\nNext, we will count the number of schools located inside the planning subzones.\n\n\nCode\nmpsz$`SCHOOL_COUNT`&lt;- lengths(\n  st_intersects(\n    mpsz, schools_sf))\n\n# check the summary statistics of the derived variabled\nsummary(mpsz$`SCHOOL_COUNT`)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   1.054   2.000  12.000 \n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nst_intersects from sf package is used to find the intersection between two spatial objects, here mpsz and schools_sf. It returns a list indicating which geometries from schools_sf intersect with each geometry in mpsz.\nlengths from base R calculates the lengths of the elements in a list, in this case, the number of schools intersecting with each polygon in mpsz.\nThe assignment operation (mpsz$SCHOOL_COUNT &lt;-) creates a new column in the mpsz data frame, storing the count of schools intersecting with each area.\nsummary from base R provides a summary of the SCHOOL_COUNT variable, typically giving minimum, maximum, mean, and other useful statistics.\n\n\n\n\n\nThe summary statistics above reveals that there are excessive 0 values in SCHOOL_COUNT field. If log() is going to use to transform this field, additional step is required to ensure that all 0 will be replaced with a value between 0 and 1 but not 0 neither 1."
  },
  {
    "objectID": "in-class/ice4.html#data-integration-and-final-touch-up",
    "href": "in-class/ice4.html#data-integration-and-final-touch-up",
    "title": "In-class Exercise 4 - Geospatial Data Science and Spatial Interaction Model with R",
    "section": "1.3 Data Integration and Final Touch-up",
    "text": "1.3 Data Integration and Final Touch-up\n\n1.3.1 Count Number of Business Points in each Planning Subzone.\n\n\nCode\nbusiness_sf &lt;- st_read(dsn = \"../data/geospatial\",\n                      layer = \"Business\")\n\n\nReading layer `Business' from data source `C:\\ameernoor\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nst_read from sf package is used for reading spatial vector data into R. It imports data from a specified data source (dsn) and layer (layer). In this code, the function is reading the “Business” layer from the data source located at \"../data/geospatial\", converting it into an sf (simple features) object suitable for spatial analysis in R.\n\n\n\n\n\n\nCode\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(business_sf) +\n  tm_dots()\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\ntmap_options from tmap package sets options for tmap functions. Here, it’s configured to automatically check and fix invalid polygons in spatial data.\ntm_shape from tmap package prepares spatial data for plotting. It’s used twice in this code: first for the mpsz dataset and then for business_sf.\ntm_polygons from tmap package adds a layer of polygons to the map, representing the mpsz data.\ntm_dots from tmap package adds a layer of dots to the map, here representing the business_sf data.\nThis code snippet creates a thematic map that combines polygonal representations of mpsz and dots representing business locations from business_sf.\n\n\n\n\n\nnote that for plotting layers of map, the polygons must always come first\n\n\n\nCode\nmpsz$`BUSINESS_COUNT`&lt;- lengths(\n  st_intersects(\n    mpsz, business_sf))\n\n# check the summary statistics of the new variable\nsummary(mpsz$`BUSINESS_COUNT`)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    2.00   19.73   13.00  307.00 \n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nst_intersects from sf package is used to find the intersections between two spatial objects, in this case, mpsz and business_sf. It determines which geometries from business_sf intersect with each geometry in mpsz and returns a list indicating these intersections.\nlengths from base R calculates the lengths of the elements in a list. Here, it’s used to count the number of business locations intersecting with each area in mpsz.\nThe assignment operation (mpsz$BUSINESS_COUNT &lt;-) adds a new column to the mpsz data frame, which stores the count of business locations intersecting with each area.\nsummary from base R provides a summary of the BUSINESS_COUNT variable, giving a statistical overview including minimum, maximum, mean, and other useful metrics.\n\n\n\n\n\n\n1.3.2 Append School and Business Counts\nNext, import the flow_data.rds from Hands-on Exercise 3.\n\n\nCode\nflow_data &lt;- read_rds(\"../data/rds/flow_data_tidy.rds\")\n\n# check the output\nglimpse(flow_data)\n\n\nRows: 14,734\nColumns: 13\n$ ORIGIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMS…\n$ DESTIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMS…\n$ MORNING_PEAK    &lt;dbl&gt; 1998, 8289, 8971, 2252, 6136, 2148, 1620, 1925, 1773, …\n$ dist            &lt;dbl&gt; 50.0000, 810.4491, 1360.9294, 840.4432, 1076.7916, 805…\n$ ORIGIN_AGE7_12  &lt;dbl&gt; 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310,…\n$ ORIGIN_AGE13_24 &lt;dbl&gt; 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710,…\n$ ORIGIN_AGE25_64 &lt;dbl&gt; 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, …\n$ DESTIN_AGE7_12  &lt;dbl&gt; 310.00, 1140.00, 1010.00, 980.00, 810.00, 1050.00, 420…\n$ DESTIN_AGE13_24 &lt;dbl&gt; 710.00, 2770.00, 2650.00, 2000.00, 1920.00, 2390.00, 1…\n$ DESTIN_AGE25_64 &lt;dbl&gt; 2780.00, 15700.00, 14240.00, 11320.00, 9650.00, 12460.…\n$ SCHOOL_COUNT    &lt;dbl&gt; 0.99, 2.00, 2.00, 1.00, 3.00, 2.00, 0.99, 0.99, 3.00, …\n$ RETAIL_COUNT    &lt;dbl&gt; 1.00, 0.99, 6.00, 0.99, 0.99, 0.99, 1.00, 117.00, 0.99…\n$ geometry        &lt;LINESTRING [m]&gt; LINESTRING (29501.77 39419...., LINESTRING …\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nread_rds from base R reads an R object stored in RDS format and restores it. In this code, it’s used to load the flow_data object from an RDS file located at \"../data/rds/flow_data_tidy.rds\".\nglimpse from dplyr package provides a transposed summary of the data frame, offering a quick look at its structure, including the types of columns and the first few entries in each column.\n\n\n\n\nThis is an sf tibble data.frame and the features are polylines linking the centroid of origins and destination planning subzone.\nNext, append SCHOOL_COUNT and BUSINESS_COUNT into flow_data sf tibble data.frame.\n\n\nCode\nmpsz_tidy &lt;- mpsz %&gt;%\n  select(SUBZONE_C, SCHOOL_COUNT, BUSINESS_COUNT) %&gt;%\n  st_drop_geometry()\n\n# check the output\nglimpse(mpsz_tidy)\n\n\nRows: 332\nColumns: 3\n$ SUBZONE_C      &lt;chr&gt; \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPSZ…\n$ SCHOOL_COUNT   &lt;int&gt; 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0…\n$ BUSINESS_COUNT &lt;int&gt; 0, 6, 4, 5, 7, 0, 0, 0, 0, 1, 11, 15, 1, 10, 1, 17, 6, …\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nst_drop_geometry from sf package is used to remove the geometry column from a spatial object, converting it into a regular data frame.\nselect from dplyr package subsets specific columns in a data frame. In this case, it retains SUBZONE_C, SCHOOL_COUNT, and BUSINESS_COUNT.\nglimpse from dplyr package provides a quick overview of the data frame’s structure, including column types and the first few entries in each column.\n\n\n\n\nNext, append SCHOOL_COUNT and BUSINESS_COUNT fields from mpsz_tidy data.frame into flow_data sf tibble data.frame\n\n\nCode\nflow_data &lt;- flow_data %&gt;%\n  left_join(mpsz_tidy,\n            by = c(\"DESTIN_SZ\" = \"SUBZONE_C\")) %&gt;%\n  rename(TRIPS = MORNING_PEAK, DIST = dist)\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nleft_join from dplyr package merges two data frames based on matching values in their columns. Here, flow_data is joined with mpsz_tidy using the DESTIN_SZ column from flow_data and SUBZONE_C from mpsz_tidy. This function retains all rows from flow_data and adds matching rows from mpsz_tidy.\nrename from dplyr package changes the names of specific columns in a data frame for clarity or convenience. In this code, MORNING_PEAK is renamed to TRIPS and dist to DIST.\n\n\n\n\n\nNote that unique join field is DESTIN_SZ and SUBZONE_C. Destination is chosen as the unique field as it represents the attracting zone in a morning peak trips.\n\n\n\n1.3.3 Checking for variables with zero values\nSince Poisson Regression is based of log and log 0 is undefined, it is important for us to ensure that no 0 values in the explanatory variables. Summary() of Base R is used to compute the summary statistics of all variables in wd_od data frame.\n\n\nCode\nsummary(flow_data)\n\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS             DIST      \n Length:14734       Length:14734       Min.   :     1   Min.   :   50  \n Class :character   Class :character   1st Qu.:    14   1st Qu.: 3346  \n Mode  :character   Mode  :character   Median :    76   Median : 6067  \n                                       Mean   :  1021   Mean   : 6880  \n                                       3rd Qu.:   426   3rd Qu.: 9729  \n                                       Max.   :232187   Max.   :26136  \n ORIGIN_AGE7_12    ORIGIN_AGE13_24    ORIGIN_AGE25_64    DESTIN_AGE7_12   \n Min.   :   0.99   Min.   :    0.99   Min.   :    0.99   Min.   :   0.99  \n 1st Qu.: 240.00   1st Qu.:  440.00   1st Qu.: 2200.00   1st Qu.: 240.00  \n Median : 700.00   Median : 1350.00   Median : 6810.00   Median : 720.00  \n Mean   :1031.86   Mean   : 2268.84   Mean   :10487.62   Mean   :1033.40  \n 3rd Qu.:1480.00   3rd Qu.: 3260.00   3rd Qu.:15770.00   3rd Qu.:1500.00  \n Max.   :6340.00   Max.   :16380.00   Max.   :74610.00   Max.   :6340.00  \n DESTIN_AGE13_24    DESTIN_AGE25_64    SCHOOL_COUNT.x    RETAIL_COUNT   \n Min.   :    0.99   Min.   :    0.99   Min.   : 0.990   Min.   :  0.99  \n 1st Qu.:  460.00   1st Qu.: 2200.00   1st Qu.: 0.990   1st Qu.:  0.99  \n Median : 1420.00   Median : 7030.00   Median : 1.000   Median :  3.00  \n Mean   : 2290.35   Mean   :10574.46   Mean   : 1.987   Mean   : 16.47  \n 3rd Qu.: 3260.00   3rd Qu.:15830.00   3rd Qu.: 2.000   3rd Qu.: 12.00  \n Max.   :16380.00   Max.   :74610.00   Max.   :12.000   Max.   :307.00  \n SCHOOL_COUNT.y   BUSINESS_COUNT            geometry    \n Min.   : 0.000   Min.   :  0.00   LINESTRING   :14734  \n 1st Qu.: 0.000   1st Qu.:  0.00   epsg:3414    :    0  \n Median : 1.000   Median :  3.00   +proj=tmer...:    0  \n Mean   : 1.583   Mean   : 16.17                        \n 3rd Qu.: 2.000   3rd Qu.: 12.00                        \n Max.   :12.000   Max.   :307.00                        \n\n\nThe print report above reveals that variables ORIGIN_AGE7_12, ORIGIN_AGE13_24, ORIGIN_AGE25_64, DESTIN_AGE7_12, DESTIN_AGE13_24, DESTIN_AGE25_64 consist of 0 values. To prepare the data for poisson regression, replae zero values to 0.99\n\n\nCode\n# Check if there are any zero values in SCHOOL_COUNT and BUSINESS_COUNT\nif (any(flow_data$SCHOOL_COUNT == 0)) {\n  flow_data$SCHOOL_COUNT &lt;- ifelse(flow_data$SCHOOL_COUNT == 0, 0.99, flow_data$SCHOOL_COUNT)\n}\n\nif (any(flow_data$BUSINESS_COUNT == 0)) {\n  flow_data$BUSINESS_COUNT &lt;- ifelse(flow_data$BUSINESS_COUNT == 0, 0.99, flow_data$BUSINESS_COUNT)\n}\n\n# run summary to check:\nsummary(flow_data)\n\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS             DIST      \n Length:14734       Length:14734       Min.   :     1   Min.   :   50  \n Class :character   Class :character   1st Qu.:    14   1st Qu.: 3346  \n Mode  :character   Mode  :character   Median :    76   Median : 6067  \n                                       Mean   :  1021   Mean   : 6880  \n                                       3rd Qu.:   426   3rd Qu.: 9729  \n                                       Max.   :232187   Max.   :26136  \n ORIGIN_AGE7_12    ORIGIN_AGE13_24    ORIGIN_AGE25_64    DESTIN_AGE7_12   \n Min.   :   0.99   Min.   :    0.99   Min.   :    0.99   Min.   :   0.99  \n 1st Qu.: 240.00   1st Qu.:  440.00   1st Qu.: 2200.00   1st Qu.: 240.00  \n Median : 700.00   Median : 1350.00   Median : 6810.00   Median : 720.00  \n Mean   :1031.86   Mean   : 2268.84   Mean   :10487.62   Mean   :1033.40  \n 3rd Qu.:1480.00   3rd Qu.: 3260.00   3rd Qu.:15770.00   3rd Qu.:1500.00  \n Max.   :6340.00   Max.   :16380.00   Max.   :74610.00   Max.   :6340.00  \n DESTIN_AGE13_24    DESTIN_AGE25_64    SCHOOL_COUNT.x    RETAIL_COUNT   \n Min.   :    0.99   Min.   :    0.99   Min.   : 0.990   Min.   :  0.99  \n 1st Qu.:  460.00   1st Qu.: 2200.00   1st Qu.: 0.990   1st Qu.:  0.99  \n Median : 1420.00   Median : 7030.00   Median : 1.000   Median :  3.00  \n Mean   : 2290.35   Mean   :10574.46   Mean   : 1.987   Mean   : 16.47  \n 3rd Qu.: 3260.00   3rd Qu.:15830.00   3rd Qu.: 2.000   3rd Qu.: 12.00  \n Max.   :16380.00   Max.   :74610.00   Max.   :12.000   Max.   :307.00  \n SCHOOL_COUNT.y   BUSINESS_COUNT            geometry    \n Min.   : 0.000   Min.   :  0.99   LINESTRING   :14734  \n 1st Qu.: 0.000   1st Qu.:  0.99   epsg:3414    :    0  \n Median : 1.000   Median :  3.00   +proj=tmer...:    0  \n Mean   : 1.583   Mean   : 16.47                        \n 3rd Qu.: 2.000   3rd Qu.: 12.00                        \n Max.   :12.000   Max.   :307.00                        \n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nany from base R checks if any of the values in a given vector meet a specified condition, here checking for zero values in SCHOOL_COUNT and BUSINESS_COUNT.\nifelse from base R applies a conditional test to each element of a vector, returning one value if the condition is true and another if it’s false. In this code, it’s used to replace zero values in SCHOOL_COUNT and BUSINESS_COUNT with 0.99.\nsummary from base R provides a summary of an object’s contents, typically offering minimum, maximum, median, mean, and other useful statistics. Here, it’s used to check the updated values in flow_data.\n\n\n\n\nexport the data as rds for future usage.\n\n\nCode\nwrite_rds(flow_data, \"../data/rds/flow_data_tidy_update.rds\")"
  },
  {
    "objectID": "in-class/ice4.html#overview-1",
    "href": "in-class/ice4.html#overview-1",
    "title": "In-class Exercise 4 - Geospatial Data Science and Spatial Interaction Model with R",
    "section": "2.1 Overview",
    "text": "2.1 Overview\nWe will continue our journey of calibrating Spatial Interaction Models by using propulsiveness and attractiveness variables prepared in earlier in-class exercise."
  },
  {
    "objectID": "in-class/ice4.html#getting-started-1",
    "href": "in-class/ice4.html#getting-started-1",
    "title": "In-class Exercise 4 - Geospatial Data Science and Spatial Interaction Model with R",
    "section": "2.2 Getting Started",
    "text": "2.2 Getting Started\nfirstly, import the libraries\n\n\nCode\npacman::p_load(tmap, sf, performance, AER, MASS, ggpubr, tidyverse, DT, knitr)\n\n\n\n\n\n\n\n\nPackages Explanations\n\n\n\n\n\n\ntmap: This package is used for creating thematic maps in R. It allows for the visualization of spatial data and supports both static and interactive mapping.\nsf: Stands for “simple features” and is an R package that provides standardized support for spatial data manipulation. It integrates well with the tidyverse suite of data science tools.\nperformance: Provides tools for checking and assessing the quality and performance of statistical models, including regression models and mixed-effect models.\nAER: Short for “Applied Econometrics with R”, this package includes functions and data sets for the book of the same name, which is useful for econometric analysis.\nMASS: The package supplies functions and datasets to support the book “Modern Applied Statistics with S” by Venables and Ripley, including a variety of statistical methods such as linear and quadratic discriminant function analysis, and robust multivariate statistics.\nggpubr: Provides a simple interface for creating publication-ready plots using an extension of ggplot2, with additional functions for commonly needed statistics and plots.\ntidyverse: A collection of R packages designed for data science tasks that make it easy to import, tidy, transform, and visualize data in a coherent data analysis workflow.\nknitr for creating html tables"
  },
  {
    "objectID": "in-class/ice4.html#the-data",
    "href": "in-class/ice4.html#the-data",
    "title": "In-class Exercise 4 - Geospatial Data Science and Spatial Interaction Model with R",
    "section": "2.3 The Data",
    "text": "2.3 The Data\nimport the data from previous processes.\n\n\nCode\nflow_data &lt;- read_rds(\"../data/rds/flow_data_tidy_update.rds\")\n# check the output\nglimpse(flow_data)\n\n\nRows: 14,734\nColumns: 15\n$ ORIGIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMS…\n$ DESTIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMS…\n$ TRIPS           &lt;dbl&gt; 1998, 8289, 8971, 2252, 6136, 2148, 1620, 1925, 1773, …\n$ DIST            &lt;dbl&gt; 50.0000, 810.4491, 1360.9294, 840.4432, 1076.7916, 805…\n$ ORIGIN_AGE7_12  &lt;dbl&gt; 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310,…\n$ ORIGIN_AGE13_24 &lt;dbl&gt; 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710,…\n$ ORIGIN_AGE25_64 &lt;dbl&gt; 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, …\n$ DESTIN_AGE7_12  &lt;dbl&gt; 310.00, 1140.00, 1010.00, 980.00, 810.00, 1050.00, 420…\n$ DESTIN_AGE13_24 &lt;dbl&gt; 710.00, 2770.00, 2650.00, 2000.00, 1920.00, 2390.00, 1…\n$ DESTIN_AGE25_64 &lt;dbl&gt; 2780.00, 15700.00, 14240.00, 11320.00, 9650.00, 12460.…\n$ SCHOOL_COUNT.x  &lt;dbl&gt; 0.99, 2.00, 2.00, 1.00, 3.00, 2.00, 0.99, 0.99, 3.00, …\n$ RETAIL_COUNT    &lt;dbl&gt; 1.00, 0.99, 6.00, 0.99, 0.99, 0.99, 1.00, 117.00, 0.99…\n$ SCHOOL_COUNT.y  &lt;int&gt; 0, 2, 2, 1, 3, 2, 0, 0, 3, 1, 0, 0, 1, 1, 7, 4, 5, 1, …\n$ BUSINESS_COUNT  &lt;dbl&gt; 1.00, 0.99, 6.00, 0.99, 0.99, 0.99, 1.00, 117.00, 0.99…\n$ geometry        &lt;LINESTRING [m]&gt; LINESTRING (29501.77 39419...., LINESTRING …\n\n\n\nthis sf tibble data.frame includes two additional fields namely: SCHOOL_COUNT and BUSINESS_COUNT. Both of them will be used as attractiveness variables when calibrating origin constrained SIM.\n\ncheck first five columns and rows of flow_data\n\n\nCode\nkable(head(flow_data[, 1:5], n = 5))\n\n\n\n\n\n\n\n\n\n\n\n\n\nORIGIN_SZ\nDESTIN_SZ\nTRIPS\nDIST\nORIGIN_AGE7_12\ngeometry\n\n\n\n\nAMSZ01\nAMSZ01\n1998\n50.0000\n310\nLINESTRING (29501.77 39419….\n\n\nAMSZ01\nAMSZ02\n8289\n810.4491\n310\nLINESTRING (29501.77 39419….\n\n\nAMSZ01\nAMSZ03\n8971\n1360.9294\n310\nLINESTRING (29501.77 39419….\n\n\nAMSZ01\nAMSZ04\n2252\n840.4432\n310\nLINESTRING (29501.77 39419….\n\n\nAMSZ01\nAMSZ05\n6136\n1076.7916\n310\nLINESTRING (29501.77 39419….\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nhead from base R retrieves the first n rows of a data frame or matrix. Here, it’s used to get the first 5 rows of flow_data, considering only the first 5 columns.\nkable from the knitr package creates a simple table from a data frame or matrix. This function is used to display the selected subset of flow_data as a markdown table.\n\n\n\n\n\nNotice that this data.frame include intra-zonal flow. The next part will remove it\n\n\n2.3.1 Preparing inter-zonal flow data\nIn general, we will calibrate separate Spatial Interaction Models for inter- and intra-zonal flows. In this hands-on exercise, we will focus our attention on inter-zonal flow. Hence, we need to exclude the intra-zonal flow from flow_data.\nFirst, two new columns called FlowNoIntra and offset will be created by using the code chunk below. All intra-zonal flow will be given a value of 0 or else the original flow values will be inserted. Then, inter-zonal flow will be selected from flow_data and save into a new output data.frame called inter_zonal_flow\n\n\nCode\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0, flow_data$TRIPS)\nflow_data$offset &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0.000001, 1)\n\ninter_zonal_flow &lt;- flow_data %&gt;%\n  filter(FlowNoIntra &gt; 0)\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nifelse from base R applies a conditional test to each element of a vector. In this code, it is used twice: firstly, to create the FlowNoIntra column in flow_data, where the value is set to 0 if the origin and destination subzones are the same, otherwise it’s set to the value of TRIPS; secondly, to create the offset column, assigning a very small number (0.000001) if the origin and destination subzones are the same, otherwise 1.\nfilter from dplyr package is used to retain rows based on a specified condition. Here, it filters flow_data to keep rows where FlowNoIntra is greater than 0, effectively selecting rows where the flow is not within the same subzone (inter-zonal flow)."
  },
  {
    "objectID": "in-class/ice4.html#calibrating-spatial-interaction-models",
    "href": "in-class/ice4.html#calibrating-spatial-interaction-models",
    "title": "In-class Exercise 4 - Geospatial Data Science and Spatial Interaction Model with R",
    "section": "2.4 Calibrating Spatial Interaction Models",
    "text": "2.4 Calibrating Spatial Interaction Models\nIn this section, we will focus on calibrating an origin constrained SIM and a doubly constrained by using flow_data prepared. It will complement materials from Hands-on Exercise 3.\n\n2.4.1 Origin- (Production-) constrained Model\nCode chunk below shows the calibration of the model by using glm() of R and flow_data.\n\n\nCode\norcSIM_Poisson &lt;- glm(formula = TRIPS ~ \n                ORIGIN_SZ +\n                log(SCHOOL_COUNT.x) +\n                log(BUSINESS_COUNT) +\n                log(DIST) - 1,\n              family = poisson(link = \"log\"),\n              data = inter_zonal_flow,\n              na.action = na.exclude)\nsummary(orcSIM_Poisson)\n\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(SCHOOL_COUNT.x) + log(BUSINESS_COUNT) + \n    log(DIST) - 1, family = poisson(link = \"log\"), data = inter_zonal_flow, \n    na.action = na.exclude)\n\nCoefficients:\n                      Estimate Std. Error  z value Pr(&gt;|z|)    \nORIGIN_SZAMSZ01     19.8739840  0.0047627  4172.84   &lt;2e-16 ***\nORIGIN_SZAMSZ02     20.5902203  0.0042786  4812.33   &lt;2e-16 ***\nORIGIN_SZAMSZ03     20.2327026  0.0045531  4443.70   &lt;2e-16 ***\nORIGIN_SZAMSZ04     19.7744438  0.0049837  3967.79   &lt;2e-16 ***\nORIGIN_SZAMSZ05     19.6574529  0.0056396  3485.61   &lt;2e-16 ***\nORIGIN_SZAMSZ06     19.9659115  0.0048946  4079.16   &lt;2e-16 ***\nORIGIN_SZAMSZ07     18.6746164  0.0096316  1938.90   &lt;2e-16 ***\nORIGIN_SZAMSZ08     19.2701601  0.0090776  2122.82   &lt;2e-16 ***\nORIGIN_SZAMSZ09     19.9889467  0.0052858  3781.64   &lt;2e-16 ***\nORIGIN_SZAMSZ10     20.3422035  0.0045778  4443.62   &lt;2e-16 ***\nORIGIN_SZAMSZ11     18.3944113  0.0129212  1423.58   &lt;2e-16 ***\nORIGIN_SZAMSZ12     18.3484209  0.0109652  1673.33   &lt;2e-16 ***\nORIGIN_SZBDSZ01     20.9668587  0.0043388  4832.36   &lt;2e-16 ***\nORIGIN_SZBDSZ02     20.4059518  0.0050601  4032.75   &lt;2e-16 ***\nORIGIN_SZBDSZ03     20.6725514  0.0045276  4565.93   &lt;2e-16 ***\nORIGIN_SZBDSZ04     21.6703853  0.0038930  5566.44   &lt;2e-16 ***\nORIGIN_SZBDSZ05     20.7497445  0.0046085  4502.46   &lt;2e-16 ***\nORIGIN_SZBDSZ06     20.9119361  0.0046432  4503.77   &lt;2e-16 ***\nORIGIN_SZBDSZ07     18.9749815  0.0097896  1938.28   &lt;2e-16 ***\nORIGIN_SZBDSZ08     19.1933901  0.0091312  2101.95   &lt;2e-16 ***\nORIGIN_SZBKSZ01     19.5422606  0.0064732  3018.96   &lt;2e-16 ***\nORIGIN_SZBKSZ02     20.1748913  0.0050076  4028.89   &lt;2e-16 ***\nORIGIN_SZBKSZ03     20.3984624  0.0047226  4319.35   &lt;2e-16 ***\nORIGIN_SZBKSZ04     19.6182212  0.0059652  3288.76   &lt;2e-16 ***\nORIGIN_SZBKSZ05     19.6033818  0.0063181  3102.74   &lt;2e-16 ***\nORIGIN_SZBKSZ06     19.7145224  0.0056372  3497.20   &lt;2e-16 ***\nORIGIN_SZBKSZ07     20.4237448  0.0041912  4873.03   &lt;2e-16 ***\nORIGIN_SZBKSZ08     19.7992538  0.0050405  3928.02   &lt;2e-16 ***\nORIGIN_SZBKSZ09     19.7821586  0.0055558  3560.66   &lt;2e-16 ***\nORIGIN_SZBLSZ01     17.7977276  0.0149058  1194.01   &lt;2e-16 ***\nORIGIN_SZBLSZ02     17.4287491  0.0192364   906.03   &lt;2e-16 ***\nORIGIN_SZBLSZ03     16.5884288  0.0459848   360.74   &lt;2e-16 ***\nORIGIN_SZBLSZ04     17.7851626  0.0232823   763.89   &lt;2e-16 ***\nORIGIN_SZBMSZ01     20.0751840  0.0052887  3795.89   &lt;2e-16 ***\nORIGIN_SZBMSZ02     18.6956140  0.0066656  2804.80   &lt;2e-16 ***\nORIGIN_SZBMSZ03     19.3204425  0.0054755  3528.56   &lt;2e-16 ***\nORIGIN_SZBMSZ04     19.4724220  0.0049390  3942.59   &lt;2e-16 ***\nORIGIN_SZBMSZ05     16.9581801  0.0168804  1004.61   &lt;2e-16 ***\nORIGIN_SZBMSZ06     16.9898638  0.0181852   934.27   &lt;2e-16 ***\nORIGIN_SZBMSZ07     19.2868403  0.0056231  3429.91   &lt;2e-16 ***\nORIGIN_SZBMSZ08     19.1477543  0.0055918  3424.28   &lt;2e-16 ***\nORIGIN_SZBMSZ09     18.7564539  0.0086298  2173.46   &lt;2e-16 ***\nORIGIN_SZBMSZ10     18.3617854  0.0089250  2057.35   &lt;2e-16 ***\nORIGIN_SZBMSZ11     18.9167941  0.0063340  2986.54   &lt;2e-16 ***\nORIGIN_SZBMSZ12     18.7874661  0.0093024  2019.63   &lt;2e-16 ***\nORIGIN_SZBMSZ13     19.5654046  0.0057517  3401.70   &lt;2e-16 ***\nORIGIN_SZBMSZ14     19.0685619  0.0063346  3010.24   &lt;2e-16 ***\nORIGIN_SZBMSZ15     19.4403124  0.0058147  3343.30   &lt;2e-16 ***\nORIGIN_SZBMSZ16     18.4469203  0.0092638  1991.28   &lt;2e-16 ***\nORIGIN_SZBMSZ17     18.3430175  0.0157692  1163.22   &lt;2e-16 ***\nORIGIN_SZBPSZ01     20.1806714  0.0053660  3760.81   &lt;2e-16 ***\nORIGIN_SZBPSZ02     19.8116707  0.0061485  3222.19   &lt;2e-16 ***\nORIGIN_SZBPSZ03     19.8467602  0.0059769  3320.57   &lt;2e-16 ***\nORIGIN_SZBPSZ04     20.4613200  0.0048398  4227.72   &lt;2e-16 ***\nORIGIN_SZBPSZ05     20.5379711  0.0043769  4692.39   &lt;2e-16 ***\nORIGIN_SZBPSZ06     18.8948034  0.0093668  2017.21   &lt;2e-16 ***\nORIGIN_SZBPSZ07     19.4104568  0.0087961  2206.70   &lt;2e-16 ***\nORIGIN_SZBSSZ01     20.0139503  0.0056561  3538.45   &lt;2e-16 ***\nORIGIN_SZBSSZ02     20.2543885  0.0047198  4291.38   &lt;2e-16 ***\nORIGIN_SZBSSZ03     19.5428803  0.0052713  3707.41   &lt;2e-16 ***\nORIGIN_SZBTSZ01     20.0198045  0.0058541  3419.77   &lt;2e-16 ***\nORIGIN_SZBTSZ02     19.3618525  0.0081472  2376.51   &lt;2e-16 ***\nORIGIN_SZBTSZ03     19.5883853  0.0068935  2841.59   &lt;2e-16 ***\nORIGIN_SZBTSZ04     18.7720238  0.0103909  1806.58   &lt;2e-16 ***\nORIGIN_SZBTSZ05     18.8069026  0.0120628  1559.08   &lt;2e-16 ***\nORIGIN_SZBTSZ06     18.7068633  0.0094575  1978.00   &lt;2e-16 ***\nORIGIN_SZBTSZ07     17.6292257  0.0141551  1245.43   &lt;2e-16 ***\nORIGIN_SZBTSZ08     18.6989374  0.0109610  1705.94   &lt;2e-16 ***\nORIGIN_SZCBSZ01     18.2189868  0.0548317   332.27   &lt;2e-16 ***\nORIGIN_SZCCSZ01     18.9734563  0.0139450  1360.59   &lt;2e-16 ***\nORIGIN_SZCHSZ01     19.5955119  0.0121035  1619.00   &lt;2e-16 ***\nORIGIN_SZCHSZ02     19.3320960  0.0081620  2368.55   &lt;2e-16 ***\nORIGIN_SZCHSZ03     21.2164518  0.0063552  3338.43   &lt;2e-16 ***\nORIGIN_SZCKSZ01     20.1046845  0.0049333  4075.29   &lt;2e-16 ***\nORIGIN_SZCKSZ02     20.5371946  0.0050256  4086.53   &lt;2e-16 ***\nORIGIN_SZCKSZ03     20.7210560  0.0042184  4912.07   &lt;2e-16 ***\nORIGIN_SZCKSZ04     21.4013886  0.0042524  5032.80   &lt;2e-16 ***\nORIGIN_SZCKSZ05     20.9413146  0.0049434  4236.18   &lt;2e-16 ***\nORIGIN_SZCKSZ06     20.2557727  0.0071832  2819.88   &lt;2e-16 ***\nORIGIN_SZCLSZ01     19.3383703  0.0076634  2523.46   &lt;2e-16 ***\nORIGIN_SZCLSZ02     18.5226956  0.0135522  1366.77   &lt;2e-16 ***\nORIGIN_SZCLSZ03     19.0225512  0.0080145  2373.51   &lt;2e-16 ***\nORIGIN_SZCLSZ04     20.7981505  0.0042400  4905.22   &lt;2e-16 ***\nORIGIN_SZCLSZ05     18.3015625  0.0146815  1246.58   &lt;2e-16 ***\nORIGIN_SZCLSZ06     20.8207386  0.0039567  5262.09   &lt;2e-16 ***\nORIGIN_SZCLSZ07     19.6728958  0.0054199  3629.76   &lt;2e-16 ***\nORIGIN_SZCLSZ08     20.0851929  0.0056956  3526.43   &lt;2e-16 ***\nORIGIN_SZCLSZ09     18.5749589  0.0165415  1122.93   &lt;2e-16 ***\nORIGIN_SZDTSZ02     15.8276209  0.0833992   189.78   &lt;2e-16 ***\nORIGIN_SZDTSZ03     16.2512838  0.0737972   220.22   &lt;2e-16 ***\nORIGIN_SZDTSZ13     16.7744385  0.0312450   536.87   &lt;2e-16 ***\nORIGIN_SZGLSZ01     18.2368248  0.0096104  1897.62   &lt;2e-16 ***\nORIGIN_SZGLSZ02     19.8705255  0.0049014  4054.06   &lt;2e-16 ***\nORIGIN_SZGLSZ03     19.8249435  0.0053109  3732.85   &lt;2e-16 ***\nORIGIN_SZGLSZ04     20.7800335  0.0041261  5036.20   &lt;2e-16 ***\nORIGIN_SZGLSZ05     20.6040494  0.0043049  4786.23   &lt;2e-16 ***\nORIGIN_SZHGSZ01     20.0273475  0.0044824  4468.04   &lt;2e-16 ***\nORIGIN_SZHGSZ02     20.2480656  0.0044575  4542.47   &lt;2e-16 ***\nORIGIN_SZHGSZ03     20.0756442  0.0049003  4096.81   &lt;2e-16 ***\nORIGIN_SZHGSZ04     20.7577748  0.0040465  5129.84   &lt;2e-16 ***\nORIGIN_SZHGSZ05     20.9779992  0.0040123  5228.42   &lt;2e-16 ***\nORIGIN_SZHGSZ06     19.7403058  0.0054229  3640.20   &lt;2e-16 ***\nORIGIN_SZHGSZ07     20.1896268  0.0046051  4384.22   &lt;2e-16 ***\nORIGIN_SZHGSZ08     19.8646492  0.0052403  3790.72   &lt;2e-16 ***\nORIGIN_SZHGSZ09     18.3647736  0.0069196  2654.04   &lt;2e-16 ***\nORIGIN_SZHGSZ10     16.8720475  0.0421046   400.72   &lt;2e-16 ***\nORIGIN_SZJESZ01     20.2673794  0.0046723  4337.79   &lt;2e-16 ***\nORIGIN_SZJESZ02     20.0595982  0.0046503  4313.61   &lt;2e-16 ***\nORIGIN_SZJESZ03     19.9128778  0.0049848  3994.75   &lt;2e-16 ***\nORIGIN_SZJESZ04     18.5053667  0.0099227  1864.94   &lt;2e-16 ***\nORIGIN_SZJESZ05     17.8172930  0.0138840  1283.29   &lt;2e-16 ***\nORIGIN_SZJESZ06     20.0124157  0.0045009  4446.36   &lt;2e-16 ***\nORIGIN_SZJESZ07     18.1821423  0.0117267  1550.49   &lt;2e-16 ***\nORIGIN_SZJESZ08     18.8713046  0.0116456  1620.46   &lt;2e-16 ***\nORIGIN_SZJESZ09     20.5535527  0.0048456  4241.72   &lt;2e-16 ***\nORIGIN_SZJESZ10     18.4922322  0.0191243   966.95   &lt;2e-16 ***\nORIGIN_SZJESZ11     18.2891211  0.0197114   927.85   &lt;2e-16 ***\nORIGIN_SZJWSZ01     20.4912737  0.0063102  3247.35   &lt;2e-16 ***\nORIGIN_SZJWSZ02     20.8236694  0.0042249  4928.82   &lt;2e-16 ***\nORIGIN_SZJWSZ03     21.2587613  0.0039733  5350.40   &lt;2e-16 ***\nORIGIN_SZJWSZ04     20.3816464  0.0046199  4411.67   &lt;2e-16 ***\nORIGIN_SZJWSZ05     18.0607448  0.0128857  1401.61   &lt;2e-16 ***\nORIGIN_SZJWSZ06     18.7015202  0.0107614  1737.83   &lt;2e-16 ***\nORIGIN_SZJWSZ07     17.3991822  0.0277096   627.91   &lt;2e-16 ***\nORIGIN_SZJWSZ08     21.8044465  0.0037356  5836.95   &lt;2e-16 ***\nORIGIN_SZJWSZ09     21.5414930  0.0036033  5978.19   &lt;2e-16 ***\nORIGIN_SZKLSZ01     20.0307712  0.0047868  4184.59   &lt;2e-16 ***\nORIGIN_SZKLSZ02     19.0634769  0.0062318  3059.05   &lt;2e-16 ***\nORIGIN_SZKLSZ03     19.2685700  0.0057172  3370.25   &lt;2e-16 ***\nORIGIN_SZKLSZ04     17.7085067  0.0119809  1478.06   &lt;2e-16 ***\nORIGIN_SZKLSZ05     18.6384471  0.0107596  1732.26   &lt;2e-16 ***\nORIGIN_SZKLSZ06     13.7280296  0.1857160    73.92   &lt;2e-16 ***\nORIGIN_SZKLSZ07     18.6425146  0.0084952  2194.47   &lt;2e-16 ***\nORIGIN_SZKLSZ08     18.0928506  0.0101567  1781.37   &lt;2e-16 ***\nORIGIN_SZLKSZ01     17.8907138  0.0397083   450.55   &lt;2e-16 ***\nORIGIN_SZMDSZ01     18.7605188  0.0285455   657.22   &lt;2e-16 ***\nORIGIN_SZMDSZ02     19.1533927  0.0102815  1862.90   &lt;2e-16 ***\nORIGIN_SZMDSZ03     17.8404982  0.0169690  1051.36   &lt;2e-16 ***\nORIGIN_SZMPSZ01     19.0765941  0.0083937  2272.74   &lt;2e-16 ***\nORIGIN_SZMPSZ02     19.2162527  0.0068331  2812.24   &lt;2e-16 ***\nORIGIN_SZMPSZ03     19.9965344  0.0054569  3664.44   &lt;2e-16 ***\nORIGIN_SZMUSZ02     15.9130765  0.1037472   153.38   &lt;2e-16 ***\nORIGIN_SZNTSZ01     17.0840999  0.0352513   484.64   &lt;2e-16 ***\nORIGIN_SZNTSZ02     16.5792122  0.0233186   710.99   &lt;2e-16 ***\nORIGIN_SZNTSZ03     18.9506415  0.0075957  2494.93   &lt;2e-16 ***\nORIGIN_SZNTSZ05     15.8770261  0.0495825   320.21   &lt;2e-16 ***\nORIGIN_SZNTSZ06     15.3997415  0.0557029   276.46   &lt;2e-16 ***\nORIGIN_SZNVSZ01     20.2241694  0.0043487  4650.65   &lt;2e-16 ***\nORIGIN_SZNVSZ02     19.1897826  0.0065383  2934.97   &lt;2e-16 ***\nORIGIN_SZNVSZ03     18.8854268  0.0080459  2347.22   &lt;2e-16 ***\nORIGIN_SZNVSZ04     18.8940191  0.0090985  2076.61   &lt;2e-16 ***\nORIGIN_SZNVSZ05     17.6278585  0.0168107  1048.61   &lt;2e-16 ***\nORIGIN_SZPGSZ01     19.4825220  0.0122960  1584.46   &lt;2e-16 ***\nORIGIN_SZPGSZ02     19.4726761  0.0073116  2663.25   &lt;2e-16 ***\nORIGIN_SZPGSZ03     20.5515713  0.0045631  4503.86   &lt;2e-16 ***\nORIGIN_SZPGSZ04     21.0527131  0.0041500  5072.89   &lt;2e-16 ***\nORIGIN_SZPGSZ05     20.1436604  0.0057267  3517.48   &lt;2e-16 ***\nORIGIN_SZPLSZ01     19.1832002  0.0120006  1598.53   &lt;2e-16 ***\nORIGIN_SZPLSZ02     18.8752206  0.0149740  1260.53   &lt;2e-16 ***\nORIGIN_SZPLSZ03     18.1000818  0.0371769   486.86   &lt;2e-16 ***\nORIGIN_SZPLSZ04     17.1730559  0.0370280   463.79   &lt;2e-16 ***\nORIGIN_SZPLSZ05     17.9084439  0.0225031   795.82   &lt;2e-16 ***\nORIGIN_SZPNSZ01     21.0804425  0.0044829  4702.41   &lt;2e-16 ***\nORIGIN_SZPNSZ02     19.8822123  0.0111507  1783.05   &lt;2e-16 ***\nORIGIN_SZPNSZ03     17.9293289  0.0193571   926.24   &lt;2e-16 ***\nORIGIN_SZPNSZ04     17.1039594  0.0334954   510.64   &lt;2e-16 ***\nORIGIN_SZPNSZ05     18.2543864  0.0275554   662.46   &lt;2e-16 ***\nORIGIN_SZPRSZ01     19.8777935  0.0117586  1690.49   &lt;2e-16 ***\nORIGIN_SZPRSZ02     21.0751780  0.0044832  4700.88   &lt;2e-16 ***\nORIGIN_SZPRSZ03     20.6717019  0.0045577  4535.55   &lt;2e-16 ***\nORIGIN_SZPRSZ04     19.6365125  0.0074923  2620.90   &lt;2e-16 ***\nORIGIN_SZPRSZ05     21.3132151  0.0042119  5060.24   &lt;2e-16 ***\nORIGIN_SZPRSZ06     18.9314574  0.0117278  1614.24   &lt;2e-16 ***\nORIGIN_SZPRSZ07     17.2822918  0.0162430  1063.98   &lt;2e-16 ***\nORIGIN_SZPRSZ08     19.9267642  0.0062298  3198.62   &lt;2e-16 ***\nORIGIN_SZQTSZ01     19.7357175  0.0066359  2974.08   &lt;2e-16 ***\nORIGIN_SZQTSZ02     19.2082141  0.0061402  3128.26   &lt;2e-16 ***\nORIGIN_SZQTSZ03     19.7771883  0.0056220  3517.83   &lt;2e-16 ***\nORIGIN_SZQTSZ04     18.7114421  0.0072842  2568.76   &lt;2e-16 ***\nORIGIN_SZQTSZ05     19.3049324  0.0062401  3093.69   &lt;2e-16 ***\nORIGIN_SZQTSZ06     19.2643228  0.0065590  2937.09   &lt;2e-16 ***\nORIGIN_SZQTSZ07     18.5697347  0.0095373  1947.06   &lt;2e-16 ***\nORIGIN_SZQTSZ08     19.6147001  0.0061330  3198.21   &lt;2e-16 ***\nORIGIN_SZQTSZ09     19.2550793  0.0069947  2752.82   &lt;2e-16 ***\nORIGIN_SZQTSZ10     19.5801866  0.0064513  3035.07   &lt;2e-16 ***\nORIGIN_SZQTSZ11     17.7398366  0.0143648  1234.95   &lt;2e-16 ***\nORIGIN_SZQTSZ12     17.2420354  0.0186736   923.34   &lt;2e-16 ***\nORIGIN_SZQTSZ13     19.3857418  0.0078878  2457.69   &lt;2e-16 ***\nORIGIN_SZQTSZ14     18.1300753  0.0122096  1484.90   &lt;2e-16 ***\nORIGIN_SZQTSZ15     19.4222283  0.0120871  1606.86   &lt;2e-16 ***\nORIGIN_SZRCSZ01     18.1549045  0.0125108  1451.13   &lt;2e-16 ***\nORIGIN_SZRCSZ06     18.8836400  0.0082161  2298.38   &lt;2e-16 ***\nORIGIN_SZRVSZ01     16.7864438  0.0323796   518.43   &lt;2e-16 ***\nORIGIN_SZRVSZ02     16.4203244  0.0276836   593.14   &lt;2e-16 ***\nORIGIN_SZRVSZ03     16.6453738  0.0244992   679.42   &lt;2e-16 ***\nORIGIN_SZRVSZ04     15.9559213  0.0556344   286.80   &lt;2e-16 ***\nORIGIN_SZRVSZ05     17.0476331  0.0164122  1038.71   &lt;2e-16 ***\nORIGIN_SZSBSZ01     20.0417968  0.0062488  3207.29   &lt;2e-16 ***\nORIGIN_SZSBSZ02     19.1869565  0.0081051  2367.26   &lt;2e-16 ***\nORIGIN_SZSBSZ03     20.5769861  0.0045108  4561.70   &lt;2e-16 ***\nORIGIN_SZSBSZ04     20.5154199  0.0050548  4058.57   &lt;2e-16 ***\nORIGIN_SZSBSZ05     19.6250669  0.0065562  2993.35   &lt;2e-16 ***\nORIGIN_SZSBSZ06     18.8419757  0.0171135  1101.00   &lt;2e-16 ***\nORIGIN_SZSBSZ07     19.4897259  0.0124528  1565.09   &lt;2e-16 ***\nORIGIN_SZSBSZ08     18.7027917  0.0140545  1330.73   &lt;2e-16 ***\nORIGIN_SZSBSZ09     18.8893480  0.0088571  2132.67   &lt;2e-16 ***\nORIGIN_SZSESZ02     20.8962192  0.0041665  5015.34   &lt;2e-16 ***\nORIGIN_SZSESZ03     20.9452771  0.0039737  5270.94   &lt;2e-16 ***\nORIGIN_SZSESZ04     20.6576142  0.0046364  4455.55   &lt;2e-16 ***\nORIGIN_SZSESZ05     19.5170732  0.0058912  3312.92   &lt;2e-16 ***\nORIGIN_SZSESZ06     20.7595824  0.0045747  4537.89   &lt;2e-16 ***\nORIGIN_SZSESZ07     17.6888256  0.0195787   903.47   &lt;2e-16 ***\nORIGIN_SZSGSZ01     19.1359250  0.0085781  2230.79   &lt;2e-16 ***\nORIGIN_SZSGSZ02     18.5614369  0.0102037  1819.10   &lt;2e-16 ***\nORIGIN_SZSGSZ03     19.9933176  0.0050434  3964.23   &lt;2e-16 ***\nORIGIN_SZSGSZ04     20.2426871  0.0047211  4287.71   &lt;2e-16 ***\nORIGIN_SZSGSZ05     18.0114965  0.0107743  1671.70   &lt;2e-16 ***\nORIGIN_SZSGSZ06     20.2593194  0.0044538  4548.76   &lt;2e-16 ***\nORIGIN_SZSGSZ07     19.0763664  0.0062968  3029.54   &lt;2e-16 ***\nORIGIN_SZSKSZ01     19.9222451  0.0085136  2340.04   &lt;2e-16 ***\nORIGIN_SZSKSZ02     20.8633383  0.0055248  3776.33   &lt;2e-16 ***\nORIGIN_SZSKSZ03     19.6528148  0.0080534  2440.33   &lt;2e-16 ***\nORIGIN_SZSKSZ04     18.0754470  0.0275771   655.45   &lt;2e-16 ***\nORIGIN_SZSKSZ05     19.1192521  0.0155579  1228.91   &lt;2e-16 ***\nORIGIN_SZSLSZ01     17.1501034  0.0329384   520.67   &lt;2e-16 ***\nORIGIN_SZSLSZ04     19.5949774  0.0076753  2552.98   &lt;2e-16 ***\nORIGIN_SZSRSZ01     16.9761403  0.0162020  1047.78   &lt;2e-16 ***\nORIGIN_SZTHSZ01     17.9695687  0.0488559   367.81   &lt;2e-16 ***\nORIGIN_SZTHSZ03     18.5427522  0.0223617   829.22   &lt;2e-16 ***\nORIGIN_SZTHSZ04     17.4760374  0.0286247   610.52   &lt;2e-16 ***\nORIGIN_SZTHSZ06     17.8401186  0.0183322   973.16   &lt;2e-16 ***\nORIGIN_SZTMSZ01     20.3406361  0.0056607  3593.33   &lt;2e-16 ***\nORIGIN_SZTMSZ02     22.0307026  0.0037386  5892.85   &lt;2e-16 ***\nORIGIN_SZTMSZ03     21.3451920  0.0040606  5256.65   &lt;2e-16 ***\nORIGIN_SZTMSZ04     20.6611593  0.0049896  4140.87   &lt;2e-16 ***\nORIGIN_SZTMSZ05     19.3323133  0.0112868  1712.82   &lt;2e-16 ***\nORIGIN_SZTNSZ01     17.9513571  0.0128266  1399.54   &lt;2e-16 ***\nORIGIN_SZTNSZ02     18.0267387  0.0098372  1832.51   &lt;2e-16 ***\nORIGIN_SZTNSZ03     17.7253700  0.0134668  1316.23   &lt;2e-16 ***\nORIGIN_SZTNSZ04     19.4474075  0.0073760  2636.59   &lt;2e-16 ***\nORIGIN_SZTPSZ01     19.1078631  0.0065635  2911.25   &lt;2e-16 ***\nORIGIN_SZTPSZ02     20.2837634  0.0041411  4898.18   &lt;2e-16 ***\nORIGIN_SZTPSZ03     19.1838238  0.0059552  3221.37   &lt;2e-16 ***\nORIGIN_SZTPSZ04     19.1805388  0.0054778  3501.53   &lt;2e-16 ***\nORIGIN_SZTPSZ05     19.3718076  0.0058610  3305.18   &lt;2e-16 ***\nORIGIN_SZTPSZ06     19.6605723  0.0054968  3576.70   &lt;2e-16 ***\nORIGIN_SZTPSZ07     19.4499807  0.0060491  3215.36   &lt;2e-16 ***\nORIGIN_SZTPSZ08     18.7996538  0.0095757  1963.28   &lt;2e-16 ***\nORIGIN_SZTPSZ09     19.0025110  0.0067068  2833.31   &lt;2e-16 ***\nORIGIN_SZTPSZ10     18.8899657  0.0076094  2482.46   &lt;2e-16 ***\nORIGIN_SZTPSZ11     19.6277780  0.0053983  3635.93   &lt;2e-16 ***\nORIGIN_SZTPSZ12     19.1471104  0.0065742  2912.45   &lt;2e-16 ***\nORIGIN_SZTSSZ01     17.4901113  0.0478954   365.17   &lt;2e-16 ***\nORIGIN_SZTSSZ02     20.4997466  0.0081850  2504.55   &lt;2e-16 ***\nORIGIN_SZTSSZ03     20.1076553  0.0084728  2373.19   &lt;2e-16 ***\nORIGIN_SZTSSZ04     20.0646610  0.0089008  2254.26   &lt;2e-16 ***\nORIGIN_SZTSSZ05     19.3962067  0.0151392  1281.19   &lt;2e-16 ***\nORIGIN_SZTSSZ06     20.9235857  0.0178278  1173.65   &lt;2e-16 ***\nORIGIN_SZWCSZ01     20.8411600  0.0086519  2408.86   &lt;2e-16 ***\nORIGIN_SZWCSZ02     17.7355404  0.0328889   539.26   &lt;2e-16 ***\nORIGIN_SZWCSZ03     14.9380886  0.1240699   120.40   &lt;2e-16 ***\nORIGIN_SZWDSZ01     21.1969012  0.0037830  5603.23   &lt;2e-16 ***\nORIGIN_SZWDSZ02     20.5930001  0.0044572  4620.13   &lt;2e-16 ***\nORIGIN_SZWDSZ03     21.2521867  0.0041672  5099.85   &lt;2e-16 ***\nORIGIN_SZWDSZ04     21.0702687  0.0048648  4331.13   &lt;2e-16 ***\nORIGIN_SZWDSZ05     20.4008998  0.0051801  3938.35   &lt;2e-16 ***\nORIGIN_SZWDSZ06     20.6669176  0.0049280  4193.78   &lt;2e-16 ***\nORIGIN_SZWDSZ07     19.0500370  0.0082729  2302.71   &lt;2e-16 ***\nORIGIN_SZWDSZ08     19.0816252  0.0080667  2365.49   &lt;2e-16 ***\nORIGIN_SZWDSZ09     21.4182096  0.0040391  5302.73   &lt;2e-16 ***\nORIGIN_SZYSSZ01     19.5355157  0.0057540  3395.14   &lt;2e-16 ***\nORIGIN_SZYSSZ02     20.8737972  0.0048278  4323.64   &lt;2e-16 ***\nORIGIN_SZYSSZ03     21.6614437  0.0040011  5413.81   &lt;2e-16 ***\nORIGIN_SZYSSZ04     20.9305289  0.0043595  4801.10   &lt;2e-16 ***\nORIGIN_SZYSSZ05     20.1727678  0.0058466  3450.34   &lt;2e-16 ***\nORIGIN_SZYSSZ06     19.1481507  0.0116724  1640.47   &lt;2e-16 ***\nORIGIN_SZYSSZ07     18.7919074  0.0141636  1326.78   &lt;2e-16 ***\nORIGIN_SZYSSZ08     19.9733515  0.0061229  3262.07   &lt;2e-16 ***\nORIGIN_SZYSSZ09     20.9366181  0.0040347  5189.15   &lt;2e-16 ***\nlog(SCHOOL_COUNT.x)  0.4755516  0.0004701  1011.55   &lt;2e-16 ***\nlog(BUSINESS_COUNT)  0.1796905  0.0001856   968.12   &lt;2e-16 ***\nlog(DIST)           -1.6929522  0.0004093 -4136.01   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 189463537  on 14471  degrees of freedom\nResidual deviance:  15526121  on 14189  degrees of freedom\nAIC: 15615824\n\nNumber of Fisher Scoring iterations: 6\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nFor origin-constrained model, only explanatory variables representing the attractiveness at the destinations will be used.\nAll the explanatory variables including distance will be log transformed.\nORIGIN_SZ is used to model 𝜇𝑖 . It must be in categorical data type.\nIt is important to note that -1 is added in the equation after the distance variable. The -1 serves the purpose of removing the intercept that by default, glm will insert into the model.\n\n\n\n\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(SCHOOL_COUNT.x) + log(BUSINESS_COUNT) + \n    log(DIST) - 1, family = poisson(link = \"log\"), data = inter_zonal_flow, \n    na.action = na.exclude)\n\nCoefficients:\n                      Estimate Std. Error  z value Pr(&gt;|z|)    \nORIGIN_SZAMSZ01     19.8739840  0.0047627  4172.84   &lt;2e-16 ***\nORIGIN_SZAMSZ02     20.5902203  0.0042786  4812.33   &lt;2e-16 ***\nORIGIN_SZAMSZ03     20.2327026  0.0045531  4443.70   &lt;2e-16 ***\nORIGIN_SZAMSZ04     19.7744438  0.0049837  3967.79   &lt;2e-16 ***\nORIGIN_SZAMSZ05     19.6574529  0.0056396  3485.61   &lt;2e-16 ***\nORIGIN_SZAMSZ06     19.9659115  0.0048946  4079.16   &lt;2e-16 ***\nORIGIN_SZAMSZ07     18.6746164  0.0096316  1938.90   &lt;2e-16 ***\nORIGIN_SZAMSZ08     19.2701601  0.0090776  2122.82   &lt;2e-16 ***\nORIGIN_SZAMSZ09     19.9889467  0.0052858  3781.64   &lt;2e-16 ***\nORIGIN_SZAMSZ10     20.3422035  0.0045778  4443.62   &lt;2e-16 ***\nORIGIN_SZAMSZ11     18.3944113  0.0129212  1423.58   &lt;2e-16 ***\nORIGIN_SZAMSZ12     18.3484209  0.0109652  1673.33   &lt;2e-16 ***\nORIGIN_SZBDSZ01     20.9668587  0.0043388  4832.36   &lt;2e-16 ***\nORIGIN_SZBDSZ02     20.4059518  0.0050601  4032.75   &lt;2e-16 ***\nORIGIN_SZBDSZ03     20.6725514  0.0045276  4565.93   &lt;2e-16 ***\nORIGIN_SZBDSZ04     21.6703853  0.0038930  5566.44   &lt;2e-16 ***\nORIGIN_SZBDSZ05     20.7497445  0.0046085  4502.46   &lt;2e-16 ***\nORIGIN_SZBDSZ06     20.9119361  0.0046432  4503.77   &lt;2e-16 ***\nORIGIN_SZBDSZ07     18.9749815  0.0097896  1938.28   &lt;2e-16 ***\nORIGIN_SZBDSZ08     19.1933901  0.0091312  2101.95   &lt;2e-16 ***\nORIGIN_SZBKSZ01     19.5422606  0.0064732  3018.96   &lt;2e-16 ***\nORIGIN_SZBKSZ02     20.1748913  0.0050076  4028.89   &lt;2e-16 ***\nORIGIN_SZBKSZ03     20.3984624  0.0047226  4319.35   &lt;2e-16 ***\nORIGIN_SZBKSZ04     19.6182212  0.0059652  3288.76   &lt;2e-16 ***\nORIGIN_SZBKSZ05     19.6033818  0.0063181  3102.74   &lt;2e-16 ***\nORIGIN_SZBKSZ06     19.7145224  0.0056372  3497.20   &lt;2e-16 ***\nORIGIN_SZBKSZ07     20.4237448  0.0041912  4873.03   &lt;2e-16 ***\nORIGIN_SZBKSZ08     19.7992538  0.0050405  3928.02   &lt;2e-16 ***\nORIGIN_SZBKSZ09     19.7821586  0.0055558  3560.66   &lt;2e-16 ***\nORIGIN_SZBLSZ01     17.7977276  0.0149058  1194.01   &lt;2e-16 ***\nORIGIN_SZBLSZ02     17.4287491  0.0192364   906.03   &lt;2e-16 ***\nORIGIN_SZBLSZ03     16.5884288  0.0459848   360.74   &lt;2e-16 ***\nORIGIN_SZBLSZ04     17.7851626  0.0232823   763.89   &lt;2e-16 ***\nORIGIN_SZBMSZ01     20.0751840  0.0052887  3795.89   &lt;2e-16 ***\nORIGIN_SZBMSZ02     18.6956140  0.0066656  2804.80   &lt;2e-16 ***\nORIGIN_SZBMSZ03     19.3204425  0.0054755  3528.56   &lt;2e-16 ***\nORIGIN_SZBMSZ04     19.4724220  0.0049390  3942.59   &lt;2e-16 ***\nORIGIN_SZBMSZ05     16.9581801  0.0168804  1004.61   &lt;2e-16 ***\nORIGIN_SZBMSZ06     16.9898638  0.0181852   934.27   &lt;2e-16 ***\nORIGIN_SZBMSZ07     19.2868403  0.0056231  3429.91   &lt;2e-16 ***\nORIGIN_SZBMSZ08     19.1477543  0.0055918  3424.28   &lt;2e-16 ***\nORIGIN_SZBMSZ09     18.7564539  0.0086298  2173.46   &lt;2e-16 ***\nORIGIN_SZBMSZ10     18.3617854  0.0089250  2057.35   &lt;2e-16 ***\nORIGIN_SZBMSZ11     18.9167941  0.0063340  2986.54   &lt;2e-16 ***\nORIGIN_SZBMSZ12     18.7874661  0.0093024  2019.63   &lt;2e-16 ***\nORIGIN_SZBMSZ13     19.5654046  0.0057517  3401.70   &lt;2e-16 ***\nORIGIN_SZBMSZ14     19.0685619  0.0063346  3010.24   &lt;2e-16 ***\nORIGIN_SZBMSZ15     19.4403124  0.0058147  3343.30   &lt;2e-16 ***\nORIGIN_SZBMSZ16     18.4469203  0.0092638  1991.28   &lt;2e-16 ***\nORIGIN_SZBMSZ17     18.3430175  0.0157692  1163.22   &lt;2e-16 ***\nORIGIN_SZBPSZ01     20.1806714  0.0053660  3760.81   &lt;2e-16 ***\nORIGIN_SZBPSZ02     19.8116707  0.0061485  3222.19   &lt;2e-16 ***\nORIGIN_SZBPSZ03     19.8467602  0.0059769  3320.57   &lt;2e-16 ***\nORIGIN_SZBPSZ04     20.4613200  0.0048398  4227.72   &lt;2e-16 ***\nORIGIN_SZBPSZ05     20.5379711  0.0043769  4692.39   &lt;2e-16 ***\nORIGIN_SZBPSZ06     18.8948034  0.0093668  2017.21   &lt;2e-16 ***\nORIGIN_SZBPSZ07     19.4104568  0.0087961  2206.70   &lt;2e-16 ***\nORIGIN_SZBSSZ01     20.0139503  0.0056561  3538.45   &lt;2e-16 ***\nORIGIN_SZBSSZ02     20.2543885  0.0047198  4291.38   &lt;2e-16 ***\nORIGIN_SZBSSZ03     19.5428803  0.0052713  3707.41   &lt;2e-16 ***\nORIGIN_SZBTSZ01     20.0198045  0.0058541  3419.77   &lt;2e-16 ***\nORIGIN_SZBTSZ02     19.3618525  0.0081472  2376.51   &lt;2e-16 ***\nORIGIN_SZBTSZ03     19.5883853  0.0068935  2841.59   &lt;2e-16 ***\nORIGIN_SZBTSZ04     18.7720238  0.0103909  1806.58   &lt;2e-16 ***\nORIGIN_SZBTSZ05     18.8069026  0.0120628  1559.08   &lt;2e-16 ***\nORIGIN_SZBTSZ06     18.7068633  0.0094575  1978.00   &lt;2e-16 ***\nORIGIN_SZBTSZ07     17.6292257  0.0141551  1245.43   &lt;2e-16 ***\nORIGIN_SZBTSZ08     18.6989374  0.0109610  1705.94   &lt;2e-16 ***\nORIGIN_SZCBSZ01     18.2189868  0.0548317   332.27   &lt;2e-16 ***\nORIGIN_SZCCSZ01     18.9734563  0.0139450  1360.59   &lt;2e-16 ***\nORIGIN_SZCHSZ01     19.5955119  0.0121035  1619.00   &lt;2e-16 ***\nORIGIN_SZCHSZ02     19.3320960  0.0081620  2368.55   &lt;2e-16 ***\nORIGIN_SZCHSZ03     21.2164518  0.0063552  3338.43   &lt;2e-16 ***\nORIGIN_SZCKSZ01     20.1046845  0.0049333  4075.29   &lt;2e-16 ***\nORIGIN_SZCKSZ02     20.5371946  0.0050256  4086.53   &lt;2e-16 ***\nORIGIN_SZCKSZ03     20.7210560  0.0042184  4912.07   &lt;2e-16 ***\nORIGIN_SZCKSZ04     21.4013886  0.0042524  5032.80   &lt;2e-16 ***\nORIGIN_SZCKSZ05     20.9413146  0.0049434  4236.18   &lt;2e-16 ***\nORIGIN_SZCKSZ06     20.2557727  0.0071832  2819.88   &lt;2e-16 ***\nORIGIN_SZCLSZ01     19.3383703  0.0076634  2523.46   &lt;2e-16 ***\nORIGIN_SZCLSZ02     18.5226956  0.0135522  1366.77   &lt;2e-16 ***\nORIGIN_SZCLSZ03     19.0225512  0.0080145  2373.51   &lt;2e-16 ***\nORIGIN_SZCLSZ04     20.7981505  0.0042400  4905.22   &lt;2e-16 ***\nORIGIN_SZCLSZ05     18.3015625  0.0146815  1246.58   &lt;2e-16 ***\nORIGIN_SZCLSZ06     20.8207386  0.0039567  5262.09   &lt;2e-16 ***\nORIGIN_SZCLSZ07     19.6728958  0.0054199  3629.76   &lt;2e-16 ***\nORIGIN_SZCLSZ08     20.0851929  0.0056956  3526.43   &lt;2e-16 ***\nORIGIN_SZCLSZ09     18.5749589  0.0165415  1122.93   &lt;2e-16 ***\nORIGIN_SZDTSZ02     15.8276209  0.0833992   189.78   &lt;2e-16 ***\nORIGIN_SZDTSZ03     16.2512838  0.0737972   220.22   &lt;2e-16 ***\nORIGIN_SZDTSZ13     16.7744385  0.0312450   536.87   &lt;2e-16 ***\nORIGIN_SZGLSZ01     18.2368248  0.0096104  1897.62   &lt;2e-16 ***\nORIGIN_SZGLSZ02     19.8705255  0.0049014  4054.06   &lt;2e-16 ***\nORIGIN_SZGLSZ03     19.8249435  0.0053109  3732.85   &lt;2e-16 ***\nORIGIN_SZGLSZ04     20.7800335  0.0041261  5036.20   &lt;2e-16 ***\nORIGIN_SZGLSZ05     20.6040494  0.0043049  4786.23   &lt;2e-16 ***\nORIGIN_SZHGSZ01     20.0273475  0.0044824  4468.04   &lt;2e-16 ***\nORIGIN_SZHGSZ02     20.2480656  0.0044575  4542.47   &lt;2e-16 ***\nORIGIN_SZHGSZ03     20.0756442  0.0049003  4096.81   &lt;2e-16 ***\nORIGIN_SZHGSZ04     20.7577748  0.0040465  5129.84   &lt;2e-16 ***\nORIGIN_SZHGSZ05     20.9779992  0.0040123  5228.42   &lt;2e-16 ***\nORIGIN_SZHGSZ06     19.7403058  0.0054229  3640.20   &lt;2e-16 ***\nORIGIN_SZHGSZ07     20.1896268  0.0046051  4384.22   &lt;2e-16 ***\nORIGIN_SZHGSZ08     19.8646492  0.0052403  3790.72   &lt;2e-16 ***\nORIGIN_SZHGSZ09     18.3647736  0.0069196  2654.04   &lt;2e-16 ***\nORIGIN_SZHGSZ10     16.8720475  0.0421046   400.72   &lt;2e-16 ***\nORIGIN_SZJESZ01     20.2673794  0.0046723  4337.79   &lt;2e-16 ***\nORIGIN_SZJESZ02     20.0595982  0.0046503  4313.61   &lt;2e-16 ***\nORIGIN_SZJESZ03     19.9128778  0.0049848  3994.75   &lt;2e-16 ***\nORIGIN_SZJESZ04     18.5053667  0.0099227  1864.94   &lt;2e-16 ***\nORIGIN_SZJESZ05     17.8172930  0.0138840  1283.29   &lt;2e-16 ***\nORIGIN_SZJESZ06     20.0124157  0.0045009  4446.36   &lt;2e-16 ***\nORIGIN_SZJESZ07     18.1821423  0.0117267  1550.49   &lt;2e-16 ***\nORIGIN_SZJESZ08     18.8713046  0.0116456  1620.46   &lt;2e-16 ***\nORIGIN_SZJESZ09     20.5535527  0.0048456  4241.72   &lt;2e-16 ***\nORIGIN_SZJESZ10     18.4922322  0.0191243   966.95   &lt;2e-16 ***\nORIGIN_SZJESZ11     18.2891211  0.0197114   927.85   &lt;2e-16 ***\nORIGIN_SZJWSZ01     20.4912737  0.0063102  3247.35   &lt;2e-16 ***\nORIGIN_SZJWSZ02     20.8236694  0.0042249  4928.82   &lt;2e-16 ***\nORIGIN_SZJWSZ03     21.2587613  0.0039733  5350.40   &lt;2e-16 ***\nORIGIN_SZJWSZ04     20.3816464  0.0046199  4411.67   &lt;2e-16 ***\nORIGIN_SZJWSZ05     18.0607448  0.0128857  1401.61   &lt;2e-16 ***\nORIGIN_SZJWSZ06     18.7015202  0.0107614  1737.83   &lt;2e-16 ***\nORIGIN_SZJWSZ07     17.3991822  0.0277096   627.91   &lt;2e-16 ***\nORIGIN_SZJWSZ08     21.8044465  0.0037356  5836.95   &lt;2e-16 ***\nORIGIN_SZJWSZ09     21.5414930  0.0036033  5978.19   &lt;2e-16 ***\nORIGIN_SZKLSZ01     20.0307712  0.0047868  4184.59   &lt;2e-16 ***\nORIGIN_SZKLSZ02     19.0634769  0.0062318  3059.05   &lt;2e-16 ***\nORIGIN_SZKLSZ03     19.2685700  0.0057172  3370.25   &lt;2e-16 ***\nORIGIN_SZKLSZ04     17.7085067  0.0119809  1478.06   &lt;2e-16 ***\nORIGIN_SZKLSZ05     18.6384471  0.0107596  1732.26   &lt;2e-16 ***\nORIGIN_SZKLSZ06     13.7280296  0.1857160    73.92   &lt;2e-16 ***\nORIGIN_SZKLSZ07     18.6425146  0.0084952  2194.47   &lt;2e-16 ***\nORIGIN_SZKLSZ08     18.0928506  0.0101567  1781.37   &lt;2e-16 ***\nORIGIN_SZLKSZ01     17.8907138  0.0397083   450.55   &lt;2e-16 ***\nORIGIN_SZMDSZ01     18.7605188  0.0285455   657.22   &lt;2e-16 ***\nORIGIN_SZMDSZ02     19.1533927  0.0102815  1862.90   &lt;2e-16 ***\nORIGIN_SZMDSZ03     17.8404982  0.0169690  1051.36   &lt;2e-16 ***\nORIGIN_SZMPSZ01     19.0765941  0.0083937  2272.74   &lt;2e-16 ***\nORIGIN_SZMPSZ02     19.2162527  0.0068331  2812.24   &lt;2e-16 ***\nORIGIN_SZMPSZ03     19.9965344  0.0054569  3664.44   &lt;2e-16 ***\nORIGIN_SZMUSZ02     15.9130765  0.1037472   153.38   &lt;2e-16 ***\nORIGIN_SZNTSZ01     17.0840999  0.0352513   484.64   &lt;2e-16 ***\nORIGIN_SZNTSZ02     16.5792122  0.0233186   710.99   &lt;2e-16 ***\nORIGIN_SZNTSZ03     18.9506415  0.0075957  2494.93   &lt;2e-16 ***\nORIGIN_SZNTSZ05     15.8770261  0.0495825   320.21   &lt;2e-16 ***\nORIGIN_SZNTSZ06     15.3997415  0.0557029   276.46   &lt;2e-16 ***\nORIGIN_SZNVSZ01     20.2241694  0.0043487  4650.65   &lt;2e-16 ***\nORIGIN_SZNVSZ02     19.1897826  0.0065383  2934.97   &lt;2e-16 ***\nORIGIN_SZNVSZ03     18.8854268  0.0080459  2347.22   &lt;2e-16 ***\nORIGIN_SZNVSZ04     18.8940191  0.0090985  2076.61   &lt;2e-16 ***\nORIGIN_SZNVSZ05     17.6278585  0.0168107  1048.61   &lt;2e-16 ***\nORIGIN_SZPGSZ01     19.4825220  0.0122960  1584.46   &lt;2e-16 ***\nORIGIN_SZPGSZ02     19.4726761  0.0073116  2663.25   &lt;2e-16 ***\nORIGIN_SZPGSZ03     20.5515713  0.0045631  4503.86   &lt;2e-16 ***\nORIGIN_SZPGSZ04     21.0527131  0.0041500  5072.89   &lt;2e-16 ***\nORIGIN_SZPGSZ05     20.1436604  0.0057267  3517.48   &lt;2e-16 ***\nORIGIN_SZPLSZ01     19.1832002  0.0120006  1598.53   &lt;2e-16 ***\nORIGIN_SZPLSZ02     18.8752206  0.0149740  1260.53   &lt;2e-16 ***\nORIGIN_SZPLSZ03     18.1000818  0.0371769   486.86   &lt;2e-16 ***\nORIGIN_SZPLSZ04     17.1730559  0.0370280   463.79   &lt;2e-16 ***\nORIGIN_SZPLSZ05     17.9084439  0.0225031   795.82   &lt;2e-16 ***\nORIGIN_SZPNSZ01     21.0804425  0.0044829  4702.41   &lt;2e-16 ***\nORIGIN_SZPNSZ02     19.8822123  0.0111507  1783.05   &lt;2e-16 ***\nORIGIN_SZPNSZ03     17.9293289  0.0193571   926.24   &lt;2e-16 ***\nORIGIN_SZPNSZ04     17.1039594  0.0334954   510.64   &lt;2e-16 ***\nORIGIN_SZPNSZ05     18.2543864  0.0275554   662.46   &lt;2e-16 ***\nORIGIN_SZPRSZ01     19.8777935  0.0117586  1690.49   &lt;2e-16 ***\nORIGIN_SZPRSZ02     21.0751780  0.0044832  4700.88   &lt;2e-16 ***\nORIGIN_SZPRSZ03     20.6717019  0.0045577  4535.55   &lt;2e-16 ***\nORIGIN_SZPRSZ04     19.6365125  0.0074923  2620.90   &lt;2e-16 ***\nORIGIN_SZPRSZ05     21.3132151  0.0042119  5060.24   &lt;2e-16 ***\nORIGIN_SZPRSZ06     18.9314574  0.0117278  1614.24   &lt;2e-16 ***\nORIGIN_SZPRSZ07     17.2822918  0.0162430  1063.98   &lt;2e-16 ***\nORIGIN_SZPRSZ08     19.9267642  0.0062298  3198.62   &lt;2e-16 ***\nORIGIN_SZQTSZ01     19.7357175  0.0066359  2974.08   &lt;2e-16 ***\nORIGIN_SZQTSZ02     19.2082141  0.0061402  3128.26   &lt;2e-16 ***\nORIGIN_SZQTSZ03     19.7771883  0.0056220  3517.83   &lt;2e-16 ***\nORIGIN_SZQTSZ04     18.7114421  0.0072842  2568.76   &lt;2e-16 ***\nORIGIN_SZQTSZ05     19.3049324  0.0062401  3093.69   &lt;2e-16 ***\nORIGIN_SZQTSZ06     19.2643228  0.0065590  2937.09   &lt;2e-16 ***\nORIGIN_SZQTSZ07     18.5697347  0.0095373  1947.06   &lt;2e-16 ***\nORIGIN_SZQTSZ08     19.6147001  0.0061330  3198.21   &lt;2e-16 ***\nORIGIN_SZQTSZ09     19.2550793  0.0069947  2752.82   &lt;2e-16 ***\nORIGIN_SZQTSZ10     19.5801866  0.0064513  3035.07   &lt;2e-16 ***\nORIGIN_SZQTSZ11     17.7398366  0.0143648  1234.95   &lt;2e-16 ***\nORIGIN_SZQTSZ12     17.2420354  0.0186736   923.34   &lt;2e-16 ***\nORIGIN_SZQTSZ13     19.3857418  0.0078878  2457.69   &lt;2e-16 ***\nORIGIN_SZQTSZ14     18.1300753  0.0122096  1484.90   &lt;2e-16 ***\nORIGIN_SZQTSZ15     19.4222283  0.0120871  1606.86   &lt;2e-16 ***\nORIGIN_SZRCSZ01     18.1549045  0.0125108  1451.13   &lt;2e-16 ***\nORIGIN_SZRCSZ06     18.8836400  0.0082161  2298.38   &lt;2e-16 ***\nORIGIN_SZRVSZ01     16.7864438  0.0323796   518.43   &lt;2e-16 ***\nORIGIN_SZRVSZ02     16.4203244  0.0276836   593.14   &lt;2e-16 ***\nORIGIN_SZRVSZ03     16.6453738  0.0244992   679.42   &lt;2e-16 ***\nORIGIN_SZRVSZ04     15.9559213  0.0556344   286.80   &lt;2e-16 ***\nORIGIN_SZRVSZ05     17.0476331  0.0164122  1038.71   &lt;2e-16 ***\nORIGIN_SZSBSZ01     20.0417968  0.0062488  3207.29   &lt;2e-16 ***\nORIGIN_SZSBSZ02     19.1869565  0.0081051  2367.26   &lt;2e-16 ***\nORIGIN_SZSBSZ03     20.5769861  0.0045108  4561.70   &lt;2e-16 ***\nORIGIN_SZSBSZ04     20.5154199  0.0050548  4058.57   &lt;2e-16 ***\nORIGIN_SZSBSZ05     19.6250669  0.0065562  2993.35   &lt;2e-16 ***\nORIGIN_SZSBSZ06     18.8419757  0.0171135  1101.00   &lt;2e-16 ***\nORIGIN_SZSBSZ07     19.4897259  0.0124528  1565.09   &lt;2e-16 ***\nORIGIN_SZSBSZ08     18.7027917  0.0140545  1330.73   &lt;2e-16 ***\nORIGIN_SZSBSZ09     18.8893480  0.0088571  2132.67   &lt;2e-16 ***\nORIGIN_SZSESZ02     20.8962192  0.0041665  5015.34   &lt;2e-16 ***\nORIGIN_SZSESZ03     20.9452771  0.0039737  5270.94   &lt;2e-16 ***\nORIGIN_SZSESZ04     20.6576142  0.0046364  4455.55   &lt;2e-16 ***\nORIGIN_SZSESZ05     19.5170732  0.0058912  3312.92   &lt;2e-16 ***\nORIGIN_SZSESZ06     20.7595824  0.0045747  4537.89   &lt;2e-16 ***\nORIGIN_SZSESZ07     17.6888256  0.0195787   903.47   &lt;2e-16 ***\nORIGIN_SZSGSZ01     19.1359250  0.0085781  2230.79   &lt;2e-16 ***\nORIGIN_SZSGSZ02     18.5614369  0.0102037  1819.10   &lt;2e-16 ***\nORIGIN_SZSGSZ03     19.9933176  0.0050434  3964.23   &lt;2e-16 ***\nORIGIN_SZSGSZ04     20.2426871  0.0047211  4287.71   &lt;2e-16 ***\nORIGIN_SZSGSZ05     18.0114965  0.0107743  1671.70   &lt;2e-16 ***\nORIGIN_SZSGSZ06     20.2593194  0.0044538  4548.76   &lt;2e-16 ***\nORIGIN_SZSGSZ07     19.0763664  0.0062968  3029.54   &lt;2e-16 ***\nORIGIN_SZSKSZ01     19.9222451  0.0085136  2340.04   &lt;2e-16 ***\nORIGIN_SZSKSZ02     20.8633383  0.0055248  3776.33   &lt;2e-16 ***\nORIGIN_SZSKSZ03     19.6528148  0.0080534  2440.33   &lt;2e-16 ***\nORIGIN_SZSKSZ04     18.0754470  0.0275771   655.45   &lt;2e-16 ***\nORIGIN_SZSKSZ05     19.1192521  0.0155579  1228.91   &lt;2e-16 ***\nORIGIN_SZSLSZ01     17.1501034  0.0329384   520.67   &lt;2e-16 ***\nORIGIN_SZSLSZ04     19.5949774  0.0076753  2552.98   &lt;2e-16 ***\nORIGIN_SZSRSZ01     16.9761403  0.0162020  1047.78   &lt;2e-16 ***\nORIGIN_SZTHSZ01     17.9695687  0.0488559   367.81   &lt;2e-16 ***\nORIGIN_SZTHSZ03     18.5427522  0.0223617   829.22   &lt;2e-16 ***\nORIGIN_SZTHSZ04     17.4760374  0.0286247   610.52   &lt;2e-16 ***\nORIGIN_SZTHSZ06     17.8401186  0.0183322   973.16   &lt;2e-16 ***\nORIGIN_SZTMSZ01     20.3406361  0.0056607  3593.33   &lt;2e-16 ***\nORIGIN_SZTMSZ02     22.0307026  0.0037386  5892.85   &lt;2e-16 ***\nORIGIN_SZTMSZ03     21.3451920  0.0040606  5256.65   &lt;2e-16 ***\nORIGIN_SZTMSZ04     20.6611593  0.0049896  4140.87   &lt;2e-16 ***\nORIGIN_SZTMSZ05     19.3323133  0.0112868  1712.82   &lt;2e-16 ***\nORIGIN_SZTNSZ01     17.9513571  0.0128266  1399.54   &lt;2e-16 ***\nORIGIN_SZTNSZ02     18.0267387  0.0098372  1832.51   &lt;2e-16 ***\nORIGIN_SZTNSZ03     17.7253700  0.0134668  1316.23   &lt;2e-16 ***\nORIGIN_SZTNSZ04     19.4474075  0.0073760  2636.59   &lt;2e-16 ***\nORIGIN_SZTPSZ01     19.1078631  0.0065635  2911.25   &lt;2e-16 ***\nORIGIN_SZTPSZ02     20.2837634  0.0041411  4898.18   &lt;2e-16 ***\nORIGIN_SZTPSZ03     19.1838238  0.0059552  3221.37   &lt;2e-16 ***\nORIGIN_SZTPSZ04     19.1805388  0.0054778  3501.53   &lt;2e-16 ***\nORIGIN_SZTPSZ05     19.3718076  0.0058610  3305.18   &lt;2e-16 ***\nORIGIN_SZTPSZ06     19.6605723  0.0054968  3576.70   &lt;2e-16 ***\nORIGIN_SZTPSZ07     19.4499807  0.0060491  3215.36   &lt;2e-16 ***\nORIGIN_SZTPSZ08     18.7996538  0.0095757  1963.28   &lt;2e-16 ***\nORIGIN_SZTPSZ09     19.0025110  0.0067068  2833.31   &lt;2e-16 ***\nORIGIN_SZTPSZ10     18.8899657  0.0076094  2482.46   &lt;2e-16 ***\nORIGIN_SZTPSZ11     19.6277780  0.0053983  3635.93   &lt;2e-16 ***\nORIGIN_SZTPSZ12     19.1471104  0.0065742  2912.45   &lt;2e-16 ***\nORIGIN_SZTSSZ01     17.4901113  0.0478954   365.17   &lt;2e-16 ***\nORIGIN_SZTSSZ02     20.4997466  0.0081850  2504.55   &lt;2e-16 ***\nORIGIN_SZTSSZ03     20.1076553  0.0084728  2373.19   &lt;2e-16 ***\nORIGIN_SZTSSZ04     20.0646610  0.0089008  2254.26   &lt;2e-16 ***\nORIGIN_SZTSSZ05     19.3962067  0.0151392  1281.19   &lt;2e-16 ***\nORIGIN_SZTSSZ06     20.9235857  0.0178278  1173.65   &lt;2e-16 ***\nORIGIN_SZWCSZ01     20.8411600  0.0086519  2408.86   &lt;2e-16 ***\nORIGIN_SZWCSZ02     17.7355404  0.0328889   539.26   &lt;2e-16 ***\nORIGIN_SZWCSZ03     14.9380886  0.1240699   120.40   &lt;2e-16 ***\nORIGIN_SZWDSZ01     21.1969012  0.0037830  5603.23   &lt;2e-16 ***\nORIGIN_SZWDSZ02     20.5930001  0.0044572  4620.13   &lt;2e-16 ***\nORIGIN_SZWDSZ03     21.2521867  0.0041672  5099.85   &lt;2e-16 ***\nORIGIN_SZWDSZ04     21.0702687  0.0048648  4331.13   &lt;2e-16 ***\nORIGIN_SZWDSZ05     20.4008998  0.0051801  3938.35   &lt;2e-16 ***\nORIGIN_SZWDSZ06     20.6669176  0.0049280  4193.78   &lt;2e-16 ***\nORIGIN_SZWDSZ07     19.0500370  0.0082729  2302.71   &lt;2e-16 ***\nORIGIN_SZWDSZ08     19.0816252  0.0080667  2365.49   &lt;2e-16 ***\nORIGIN_SZWDSZ09     21.4182096  0.0040391  5302.73   &lt;2e-16 ***\nORIGIN_SZYSSZ01     19.5355157  0.0057540  3395.14   &lt;2e-16 ***\nORIGIN_SZYSSZ02     20.8737972  0.0048278  4323.64   &lt;2e-16 ***\nORIGIN_SZYSSZ03     21.6614437  0.0040011  5413.81   &lt;2e-16 ***\nORIGIN_SZYSSZ04     20.9305289  0.0043595  4801.10   &lt;2e-16 ***\nORIGIN_SZYSSZ05     20.1727678  0.0058466  3450.34   &lt;2e-16 ***\nORIGIN_SZYSSZ06     19.1481507  0.0116724  1640.47   &lt;2e-16 ***\nORIGIN_SZYSSZ07     18.7919074  0.0141636  1326.78   &lt;2e-16 ***\nORIGIN_SZYSSZ08     19.9733515  0.0061229  3262.07   &lt;2e-16 ***\nORIGIN_SZYSSZ09     20.9366181  0.0040347  5189.15   &lt;2e-16 ***\nlog(SCHOOL_COUNT.x)  0.4755516  0.0004701  1011.55   &lt;2e-16 ***\nlog(BUSINESS_COUNT)  0.1796905  0.0001856   968.12   &lt;2e-16 ***\nlog(DIST)           -1.6929522  0.0004093 -4136.01   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 189463537  on 14471  degrees of freedom\nResidual deviance:  15526121  on 14189  degrees of freedom\nAIC: 15615824\n\nNumber of Fisher Scoring iterations: 6\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nglm from stats package fits generalized linear models. In this code, a Poisson regression model is specified with the family = poisson(link = \"log\") argument. The formula TRIPS ~ ORIGIN_SZ + log(SCHOOL_COUNT.x) + log(BUSINESS_COUNT) + log(DIST) - 1 defines the dependent variable (TRIPS) and the independent variables (ORIGIN_SZ, logarithm of SCHOOL_COUNT.x, BUSINESS_COUNT, and DIST), with -1 indicating no intercept in the model.\nThe data argument specifies inter_zonal_flow as the dataset used for the model.\nna.action = na.exclude specifies how missing values (NAs) should be treated in the analysis.\nsummary from base R provides a summary of the fitted model orcSIM_Poisson, including coefficients, statistical significance, and other diagnostic measures.\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nthe ⍺1 and ⍺2 of SCHOOL_COUNT and BUSINESS_COUNT are 0.4755516 and 0.1796905 respectively.\n𝛽, the distance decay parameter is -1.6929522\nthere are a series of parameters which are the vector of 𝜇𝑖 values associated with the origin constraints.\n\n\n\n\n\n2.4.2 Goodness of fit\nIn statistical modelling, the next question we would like to answer is how well the proportion of variance in the dependent variable (i.e. TRIPS) that can be explained by the explanatory variables.\nIn order to provide answer to this question, R-squared statistics will be used. However, R-squared is not an output of glm(). Hence we will write a function called CalcRSquared by using the code chunk below.\n\n\nCode\nCalcRSquared &lt;- function(observed, estimated){\n  r &lt;- cor(observed, estimated)\n  R2 &lt;- r^2\n  R2\n}\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\ncor from stats package calculates the correlation coefficient between two vectors. In this user-defined function CalcRSquared, it is used to find the correlation (r) between observed and estimated values.\nThe function CalcRSquared computes the square of the correlation coefficient (R2), which is a measure of the proportion of variance in the observed data that is predictable from the estimated data.\nThis custom function is designed to return the value of R2, providing a simple way to calculate the coefficient of determination (R-squared) for a set of observed and estimated values.\n\n\n\n\nNow, we can examine how the constraints hold for destinations this time.\n\n\nCode\nCalcRSquared(orcSIM_Poisson$data$TRIPS, orcSIM_Poisson$fitted.values)\n\n\n[1] 0.4362208\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nThe custom function CalcRSquared, defined earlier, is used here to calculate the coefficient of determination (R-squared). This statistical measure indicates how well the estimated values (orcSIM_Poisson$fitted.values) approximate the actual, observed values (orcSIM_Poisson$data$TRIPS).\nIn this code, orcSIM_Poisson$data$TRIPS refers to the actual observed values of trips, and orcSIM_Poisson$fitted.values refers to the values estimated by the orcSIM_Poisson generalized linear model.\nThe function call CalcRSquared(orcSIM_Poisson$data$TRIPS, orcSIM_Poisson$fitted.values) computes the R-squared value, which quantifies the proportion of variance in the observed data that can be explained by the model’s estimated values.\n\n\n\n\nWith reference to the R-Squared above, we can conclude that the model accounts for about 44% of the variation of flows in the systems. Not bad, but not brilliant either.\n\n\n2.4.3 Doubly constrained model\nIn this section, we will fit a doubly constrained SIM\n\n\nCode\ndbcSIM_Poisson &lt;- glm(formula = TRIPS ~ \n                ORIGIN_SZ + \n                DESTIN_SZ +\n                log(DIST),\n              family = poisson(link = \"log\"),\n              data = inter_zonal_flow,\n              na.action = na.exclude)\nsummary(dbcSIM_Poisson)\n\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(DIST), family = poisson(link = \"log\"), \n    data = inter_zonal_flow, na.action = na.exclude)\n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)     21.8312374  0.0059160  3690.190  &lt; 2e-16 ***\nORIGIN_SZAMSZ02  0.5263502  0.0048031   109.585  &lt; 2e-16 ***\nORIGIN_SZAMSZ03  0.3139982  0.0049254    63.751  &lt; 2e-16 ***\nORIGIN_SZAMSZ04 -0.2146257  0.0053639   -40.013  &lt; 2e-16 ***\nORIGIN_SZAMSZ05 -0.1890446  0.0060386   -31.306  &lt; 2e-16 ***\nORIGIN_SZAMSZ06  0.1539201  0.0054401    28.294  &lt; 2e-16 ***\nORIGIN_SZAMSZ07 -0.9826565  0.0098676   -99.584  &lt; 2e-16 ***\nORIGIN_SZAMSZ08 -0.4488417  0.0093070   -48.226  &lt; 2e-16 ***\nORIGIN_SZAMSZ09  0.0713474  0.0057402    12.429  &lt; 2e-16 ***\nORIGIN_SZAMSZ10  0.4313742  0.0050370    85.641  &lt; 2e-16 ***\nORIGIN_SZAMSZ11 -1.4712226  0.0131178  -112.154  &lt; 2e-16 ***\nORIGIN_SZAMSZ12 -1.7250733  0.0111603  -154.573  &lt; 2e-16 ***\nORIGIN_SZBDSZ01  0.8810576  0.0048168   182.914  &lt; 2e-16 ***\nORIGIN_SZBDSZ02  0.1100240  0.0055529    19.814  &lt; 2e-16 ***\nORIGIN_SZBDSZ03  0.3606166  0.0050672    71.167  &lt; 2e-16 ***\nORIGIN_SZBDSZ04  1.4624347  0.0044212   330.781  &lt; 2e-16 ***\nORIGIN_SZBDSZ05  0.6207557  0.0050843   122.092  &lt; 2e-16 ***\nORIGIN_SZBDSZ06  0.6712973  0.0051953   129.214  &lt; 2e-16 ***\nORIGIN_SZBDSZ07 -1.2338669  0.0100775  -122.437  &lt; 2e-16 ***\nORIGIN_SZBDSZ08 -1.0444562  0.0094555  -110.460  &lt; 2e-16 ***\nORIGIN_SZBKSZ01 -0.2838426  0.0071354   -39.780  &lt; 2e-16 ***\nORIGIN_SZBKSZ02  0.5550522  0.0059014    94.054  &lt; 2e-16 ***\nORIGIN_SZBKSZ03  0.7396640  0.0056796   130.231  &lt; 2e-16 ***\nORIGIN_SZBKSZ04 -0.2242451  0.0067482   -33.230  &lt; 2e-16 ***\nORIGIN_SZBKSZ05 -0.2371614  0.0069386   -34.180  &lt; 2e-16 ***\nORIGIN_SZBKSZ06 -0.1413812  0.0065035   -21.739  &lt; 2e-16 ***\nORIGIN_SZBKSZ07  0.7089989  0.0051843   136.758  &lt; 2e-16 ***\nORIGIN_SZBKSZ08 -0.0907065  0.0059157   -15.333  &lt; 2e-16 ***\nORIGIN_SZBKSZ09 -0.1775146  0.0063302   -28.042  &lt; 2e-16 ***\nORIGIN_SZBLSZ01 -2.3684539  0.0154280  -153.516  &lt; 2e-16 ***\nORIGIN_SZBLSZ02 -2.8078475  0.0197839  -141.926  &lt; 2e-16 ***\nORIGIN_SZBLSZ03 -3.3122763  0.0466091   -71.065  &lt; 2e-16 ***\nORIGIN_SZBLSZ04 -2.6770542  0.0241793  -110.717  &lt; 2e-16 ***\nORIGIN_SZBMSZ01  0.0618035  0.0059400    10.405  &lt; 2e-16 ***\nORIGIN_SZBMSZ02 -1.3535767  0.0073741  -183.557  &lt; 2e-16 ***\nORIGIN_SZBMSZ03 -0.7569095  0.0063187  -119.790  &lt; 2e-16 ***\nORIGIN_SZBMSZ04 -0.2949304  0.0059603   -49.483  &lt; 2e-16 ***\nORIGIN_SZBMSZ05 -2.6131992  0.0172376  -151.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ06 -3.0315024  0.0185502  -163.422  &lt; 2e-16 ***\nORIGIN_SZBMSZ07 -0.6962524  0.0064068  -108.674  &lt; 2e-16 ***\nORIGIN_SZBMSZ08 -0.9310730  0.0064541  -144.261  &lt; 2e-16 ***\nORIGIN_SZBMSZ09 -1.2911253  0.0092047  -140.268  &lt; 2e-16 ***\nORIGIN_SZBMSZ10 -1.6687004  0.0095708  -174.353  &lt; 2e-16 ***\nORIGIN_SZBMSZ11 -1.1152794  0.0072027  -154.841  &lt; 2e-16 ***\nORIGIN_SZBMSZ12 -1.5323954  0.0099932  -153.344  &lt; 2e-16 ***\nORIGIN_SZBMSZ13 -0.6267376  0.0065863   -95.158  &lt; 2e-16 ***\nORIGIN_SZBMSZ14 -1.0475467  0.0072472  -144.544  &lt; 2e-16 ***\nORIGIN_SZBMSZ15 -0.5049444  0.0067390   -74.929  &lt; 2e-16 ***\nORIGIN_SZBMSZ16 -1.5282897  0.0099545  -153.527  &lt; 2e-16 ***\nORIGIN_SZBMSZ17 -1.5722349  0.0161533   -97.332  &lt; 2e-16 ***\nORIGIN_SZBPSZ01  0.5814175  0.0062904    92.429  &lt; 2e-16 ***\nORIGIN_SZBPSZ02  0.0875442  0.0072190    12.127  &lt; 2e-16 ***\nORIGIN_SZBPSZ03  0.3358227  0.0070460    47.662  &lt; 2e-16 ***\nORIGIN_SZBPSZ04  0.6507586  0.0057726   112.733  &lt; 2e-16 ***\nORIGIN_SZBPSZ05  0.9502124  0.0052971   179.384  &lt; 2e-16 ***\nORIGIN_SZBPSZ06 -1.0480314  0.0098191  -106.734  &lt; 2e-16 ***\nORIGIN_SZBPSZ07 -0.5467931  0.0091676   -59.644  &lt; 2e-16 ***\nORIGIN_SZBSSZ01  0.2998334  0.0059193    50.654  &lt; 2e-16 ***\nORIGIN_SZBSSZ02  0.2841036  0.0050863    55.856  &lt; 2e-16 ***\nORIGIN_SZBSSZ03 -0.2331505  0.0056565   -41.218  &lt; 2e-16 ***\nORIGIN_SZBTSZ01  0.0987284  0.0063715    15.495  &lt; 2e-16 ***\nORIGIN_SZBTSZ02 -0.6261229  0.0084604   -74.006  &lt; 2e-16 ***\nORIGIN_SZBTSZ03 -0.4326963  0.0073452   -58.909  &lt; 2e-16 ***\nORIGIN_SZBTSZ04 -1.4998668  0.0110013  -136.336  &lt; 2e-16 ***\nORIGIN_SZBTSZ05 -0.9564768  0.0122202   -78.270  &lt; 2e-16 ***\nORIGIN_SZBTSZ06 -1.2853131  0.0099328  -129.401  &lt; 2e-16 ***\nORIGIN_SZBTSZ07 -2.3870991  0.0144589  -165.096  &lt; 2e-16 ***\nORIGIN_SZBTSZ08 -1.3715855  0.0113825  -120.499  &lt; 2e-16 ***\nORIGIN_SZCBSZ01 -3.5940232  0.0548979   -65.467  &lt; 2e-16 ***\nORIGIN_SZCCSZ01 -0.7008220  0.0140373   -49.926  &lt; 2e-16 ***\nORIGIN_SZCHSZ01 -0.9109524  0.0122869   -74.140  &lt; 2e-16 ***\nORIGIN_SZCHSZ02 -0.8566547  0.0088749   -96.526  &lt; 2e-16 ***\nORIGIN_SZCHSZ03  1.1153731  0.0066136   168.650  &lt; 2e-16 ***\nORIGIN_SZCKSZ01  0.3001815  0.0058548    51.271  &lt; 2e-16 ***\nORIGIN_SZCKSZ02  0.7185711  0.0060595   118.585  &lt; 2e-16 ***\nORIGIN_SZCKSZ03  1.1389824  0.0053179   214.178  &lt; 2e-16 ***\nORIGIN_SZCKSZ04  1.6281772  0.0054761   297.324  &lt; 2e-16 ***\nORIGIN_SZCKSZ05  0.8338470  0.0064178   129.927  &lt; 2e-16 ***\nORIGIN_SZCKSZ06  0.6528993  0.0082375    79.259  &lt; 2e-16 ***\nORIGIN_SZCLSZ01 -0.7174758  0.0082123   -87.366  &lt; 2e-16 ***\nORIGIN_SZCLSZ02 -1.7513100  0.0139062  -125.938  &lt; 2e-16 ***\nORIGIN_SZCLSZ03 -1.0362873  0.0085485  -121.224  &lt; 2e-16 ***\nORIGIN_SZCLSZ04  0.6160017  0.0051276   120.136  &lt; 2e-16 ***\nORIGIN_SZCLSZ05 -2.1005122  0.0150228  -139.821  &lt; 2e-16 ***\nORIGIN_SZCLSZ06  0.7252108  0.0049447   146.665  &lt; 2e-16 ***\nORIGIN_SZCLSZ07 -0.5343482  0.0062500   -85.496  &lt; 2e-16 ***\nORIGIN_SZCLSZ08 -0.2153408  0.0067571   -31.869  &lt; 2e-16 ***\nORIGIN_SZCLSZ09 -1.8019961  0.0169078  -106.578  &lt; 2e-16 ***\nORIGIN_SZDTSZ02 -3.9057711  0.0834668   -46.794  &lt; 2e-16 ***\nORIGIN_SZDTSZ03 -3.4152419  0.0738650   -46.236  &lt; 2e-16 ***\nORIGIN_SZDTSZ13 -3.0183438  0.0315257   -95.742  &lt; 2e-16 ***\nORIGIN_SZGLSZ01 -1.7812384  0.0099367  -179.258  &lt; 2e-16 ***\nORIGIN_SZGLSZ02 -0.1074991  0.0054325   -19.788  &lt; 2e-16 ***\nORIGIN_SZGLSZ03 -0.2461106  0.0057176   -43.045  &lt; 2e-16 ***\nORIGIN_SZGLSZ04  0.8657186  0.0046413   186.524  &lt; 2e-16 ***\nORIGIN_SZGLSZ05  0.5871393  0.0047939   122.477  &lt; 2e-16 ***\nORIGIN_SZHGSZ01  0.3543819  0.0050461    70.229  &lt; 2e-16 ***\nORIGIN_SZHGSZ02  0.4218178  0.0050820    83.003  &lt; 2e-16 ***\nORIGIN_SZHGSZ03  0.2411309  0.0054241    44.456  &lt; 2e-16 ***\nORIGIN_SZHGSZ04  0.8180622  0.0046153   177.252  &lt; 2e-16 ***\nORIGIN_SZHGSZ05  1.2173687  0.0045655   266.647  &lt; 2e-16 ***\nORIGIN_SZHGSZ06 -0.1826300  0.0058214   -31.372  &lt; 2e-16 ***\nORIGIN_SZHGSZ07  0.3172839  0.0050733    62.540  &lt; 2e-16 ***\nORIGIN_SZHGSZ08 -0.1151369  0.0057067   -20.176  &lt; 2e-16 ***\nORIGIN_SZHGSZ09 -1.2873441  0.0091690  -140.401  &lt; 2e-16 ***\nORIGIN_SZHGSZ10 -3.3783178  0.0424682   -79.549  &lt; 2e-16 ***\nORIGIN_SZJESZ01  0.4859234  0.0055927    86.885  &lt; 2e-16 ***\nORIGIN_SZJESZ02  0.1766088  0.0055800    31.650  &lt; 2e-16 ***\nORIGIN_SZJESZ03 -0.2177441  0.0059535   -36.574  &lt; 2e-16 ***\nORIGIN_SZJESZ04 -1.5532182  0.0104526  -148.597  &lt; 2e-16 ***\nORIGIN_SZJESZ05 -2.3332926  0.0142701  -163.509  &lt; 2e-16 ***\nORIGIN_SZJESZ06  0.3007382  0.0055019    54.661  &lt; 2e-16 ***\nORIGIN_SZJESZ07 -1.9687994  0.0121092  -162.587  &lt; 2e-16 ***\nORIGIN_SZJESZ08 -1.3032070  0.0122024  -106.800  &lt; 2e-16 ***\nORIGIN_SZJESZ09  0.5762635  0.0058766    98.061  &lt; 2e-16 ***\nORIGIN_SZJESZ10 -1.4423113  0.0194773   -74.051  &lt; 2e-16 ***\nORIGIN_SZJESZ11 -1.9720897  0.0200811   -98.206  &lt; 2e-16 ***\nORIGIN_SZJWSZ01  0.3808627  0.0071357    53.374  &lt; 2e-16 ***\nORIGIN_SZJWSZ02  0.7963999  0.0053150   149.840  &lt; 2e-16 ***\nORIGIN_SZJWSZ03  1.5429636  0.0049961   308.834  &lt; 2e-16 ***\nORIGIN_SZJWSZ04  0.6410760  0.0056711   113.042  &lt; 2e-16 ***\nORIGIN_SZJWSZ05 -2.1571049  0.0133584  -161.479  &lt; 2e-16 ***\nORIGIN_SZJWSZ06 -1.5174532  0.0113384  -133.833  &lt; 2e-16 ***\nORIGIN_SZJWSZ07 -2.7089963  0.0280439   -96.598  &lt; 2e-16 ***\nORIGIN_SZJWSZ08  1.5343415  0.0051711   296.713  &lt; 2e-16 ***\nORIGIN_SZJWSZ09  1.8837410  0.0048845   385.656  &lt; 2e-16 ***\nORIGIN_SZKLSZ01  0.1081286  0.0053307    20.284  &lt; 2e-16 ***\nORIGIN_SZKLSZ02 -0.8844695  0.0067728  -130.591  &lt; 2e-16 ***\nORIGIN_SZKLSZ03 -0.6872640  0.0062857  -109.337  &lt; 2e-16 ***\nORIGIN_SZKLSZ04 -2.2090319  0.0122440  -180.418  &lt; 2e-16 ***\nORIGIN_SZKLSZ05 -1.1728726  0.0110765  -105.888  &lt; 2e-16 ***\nORIGIN_SZKLSZ06 -6.1162315  0.1857789   -32.922  &lt; 2e-16 ***\nORIGIN_SZKLSZ07 -1.4082749  0.0092299  -152.578  &lt; 2e-16 ***\nORIGIN_SZKLSZ08 -1.7781551  0.0104682  -169.862  &lt; 2e-16 ***\nORIGIN_SZLKSZ01 -2.0531568  0.0398803   -51.483  &lt; 2e-16 ***\nORIGIN_SZMDSZ01 -0.8825639  0.0287621   -30.685  &lt; 2e-16 ***\nORIGIN_SZMDSZ02 -0.6219993  0.0107388   -57.921  &lt; 2e-16 ***\nORIGIN_SZMDSZ03 -2.0840156  0.0173117  -120.382  &lt; 2e-16 ***\nORIGIN_SZMPSZ01 -0.9659093  0.0086972  -111.060  &lt; 2e-16 ***\nORIGIN_SZMPSZ02 -1.0411153  0.0073403  -141.836  &lt; 2e-16 ***\nORIGIN_SZMPSZ03  0.0001659  0.0059401     0.028 0.977719    \nORIGIN_SZMUSZ02 -3.7599031  0.1037937   -36.225  &lt; 2e-16 ***\nORIGIN_SZNTSZ01 -3.0388366  0.0355325   -85.523  &lt; 2e-16 ***\nORIGIN_SZNTSZ02 -3.4230640  0.0235902  -145.106  &lt; 2e-16 ***\nORIGIN_SZNTSZ03 -0.9094796  0.0082551  -110.172  &lt; 2e-16 ***\nORIGIN_SZNTSZ05 -4.0861681  0.0499630   -81.784  &lt; 2e-16 ***\nORIGIN_SZNTSZ06 -3.9497128  0.0565388   -69.858  &lt; 2e-16 ***\nORIGIN_SZNVSZ01  0.3235636  0.0049439    65.447  &lt; 2e-16 ***\nORIGIN_SZNVSZ02 -0.6946748  0.0070536   -98.485  &lt; 2e-16 ***\nORIGIN_SZNVSZ03 -1.0540196  0.0083781  -125.806  &lt; 2e-16 ***\nORIGIN_SZNVSZ04 -0.9897977  0.0093463  -105.903  &lt; 2e-16 ***\nORIGIN_SZNVSZ05 -2.2578432  0.0169180  -133.458  &lt; 2e-16 ***\nORIGIN_SZPGSZ01  0.2399827  0.0130436    18.398  &lt; 2e-16 ***\nORIGIN_SZPGSZ02 -0.3352342  0.0078451   -42.732  &lt; 2e-16 ***\nORIGIN_SZPGSZ03  0.9515148  0.0051376   185.207  &lt; 2e-16 ***\nORIGIN_SZPGSZ04  1.3998952  0.0047991   291.697  &lt; 2e-16 ***\nORIGIN_SZPGSZ05  0.4451629  0.0063423    70.189  &lt; 2e-16 ***\nORIGIN_SZPLSZ01 -0.9705918  0.0122781   -79.050  &lt; 2e-16 ***\nORIGIN_SZPLSZ02 -1.0670151  0.0153358   -69.577  &lt; 2e-16 ***\nORIGIN_SZPLSZ03 -2.1229124  0.0373527   -56.834  &lt; 2e-16 ***\nORIGIN_SZPLSZ04 -3.0911932  0.0371296   -83.254  &lt; 2e-16 ***\nORIGIN_SZPLSZ05 -2.1705708  0.0226085   -96.007  &lt; 2e-16 ***\nORIGIN_SZPNSZ01  0.9052637  0.0065952   137.262  &lt; 2e-16 ***\nORIGIN_SZPNSZ02 -0.1720425  0.0125658   -13.691  &lt; 2e-16 ***\nORIGIN_SZPNSZ03 -2.3973459  0.0201408  -119.029  &lt; 2e-16 ***\nORIGIN_SZPNSZ04 -3.4483689  0.0343741  -100.319  &lt; 2e-16 ***\nORIGIN_SZPNSZ05 -2.0588530  0.0282328   -72.924  &lt; 2e-16 ***\nORIGIN_SZPRSZ01 -0.6399015  0.0120470   -53.117  &lt; 2e-16 ***\nORIGIN_SZPRSZ02  0.8122270  0.0050886   159.617  &lt; 2e-16 ***\nORIGIN_SZPRSZ03  0.3990960  0.0051810    77.031  &lt; 2e-16 ***\nORIGIN_SZPRSZ04 -0.8485348  0.0079236  -107.089  &lt; 2e-16 ***\nORIGIN_SZPRSZ05  0.8008791  0.0048532   165.021  &lt; 2e-16 ***\nORIGIN_SZPRSZ06 -1.4498806  0.0121422  -119.408  &lt; 2e-16 ***\nORIGIN_SZPRSZ07 -3.2025045  0.0167118  -191.631  &lt; 2e-16 ***\nORIGIN_SZPRSZ08 -0.5862269  0.0067255   -87.165  &lt; 2e-16 ***\nORIGIN_SZQTSZ01 -0.1859270  0.0075531   -24.616  &lt; 2e-16 ***\nORIGIN_SZQTSZ02 -0.8715122  0.0068124  -127.929  &lt; 2e-16 ***\nORIGIN_SZQTSZ03 -0.1259816  0.0064796   -19.443  &lt; 2e-16 ***\nORIGIN_SZQTSZ04 -1.4620032  0.0079848  -183.098  &lt; 2e-16 ***\nORIGIN_SZQTSZ05 -0.6675643  0.0069616   -95.892  &lt; 2e-16 ***\nORIGIN_SZQTSZ06 -0.8190026  0.0072713  -112.634  &lt; 2e-16 ***\nORIGIN_SZQTSZ07 -1.5189403  0.0099864  -152.101  &lt; 2e-16 ***\nORIGIN_SZQTSZ08 -0.4976238  0.0067874   -73.316  &lt; 2e-16 ***\nORIGIN_SZQTSZ09 -0.9006162  0.0075978  -118.536  &lt; 2e-16 ***\nORIGIN_SZQTSZ10 -0.6690184  0.0071574   -93.473  &lt; 2e-16 ***\nORIGIN_SZQTSZ11 -2.5203437  0.0147000  -171.452  &lt; 2e-16 ***\nORIGIN_SZQTSZ12 -3.0461675  0.0190193  -160.162  &lt; 2e-16 ***\nORIGIN_SZQTSZ13 -0.7501068  0.0084481   -88.791  &lt; 2e-16 ***\nORIGIN_SZQTSZ14 -1.9321849  0.0126114  -153.209  &lt; 2e-16 ***\nORIGIN_SZQTSZ15 -0.9576828  0.0127157   -75.315  &lt; 2e-16 ***\nORIGIN_SZRCSZ01 -1.8167951  0.0129234  -140.582  &lt; 2e-16 ***\nORIGIN_SZRCSZ06 -0.5560563  0.0090507   -61.438  &lt; 2e-16 ***\nORIGIN_SZRVSZ01 -2.8862570  0.0325532   -88.663  &lt; 2e-16 ***\nORIGIN_SZRVSZ02 -3.1555662  0.0281279  -112.186  &lt; 2e-16 ***\nORIGIN_SZRVSZ03 -2.9836089  0.0248449  -120.089  &lt; 2e-16 ***\nORIGIN_SZRVSZ04 -3.5520422  0.0561371   -63.274  &lt; 2e-16 ***\nORIGIN_SZRVSZ05 -2.5866584  0.0180382  -143.399  &lt; 2e-16 ***\nORIGIN_SZSBSZ01  0.2867444  0.0071098    40.331  &lt; 2e-16 ***\nORIGIN_SZSBSZ02 -0.9012334  0.0087262  -103.278  &lt; 2e-16 ***\nORIGIN_SZSBSZ03  0.8311038  0.0055422   149.958  &lt; 2e-16 ***\nORIGIN_SZSBSZ04  0.4044170  0.0062047    65.179  &lt; 2e-16 ***\nORIGIN_SZSBSZ05 -0.2661845  0.0074162   -35.892  &lt; 2e-16 ***\nORIGIN_SZSBSZ06 -0.9023075  0.0175046   -51.547  &lt; 2e-16 ***\nORIGIN_SZSBSZ07  0.0505870  0.0131317     3.852 0.000117 ***\nORIGIN_SZSBSZ08 -1.1158011  0.0145416   -76.732  &lt; 2e-16 ***\nORIGIN_SZSBSZ09 -0.9682835  0.0095396  -101.501  &lt; 2e-16 ***\nORIGIN_SZSESZ02  1.1452735  0.0047810   239.548  &lt; 2e-16 ***\nORIGIN_SZSESZ03  1.2815277  0.0045677   280.564  &lt; 2e-16 ***\nORIGIN_SZSESZ04  0.8085857  0.0052756   153.269  &lt; 2e-16 ***\nORIGIN_SZSESZ05 -0.2329413  0.0063113   -36.909  &lt; 2e-16 ***\nORIGIN_SZSESZ06  1.0576879  0.0049909   211.925  &lt; 2e-16 ***\nORIGIN_SZSESZ07 -2.3165908  0.0196831  -117.695  &lt; 2e-16 ***\nORIGIN_SZSGSZ01 -0.6606350  0.0088079   -75.005  &lt; 2e-16 ***\nORIGIN_SZSGSZ02 -1.3638984  0.0104040  -131.094  &lt; 2e-16 ***\nORIGIN_SZSGSZ03  0.1152591  0.0054649    21.091  &lt; 2e-16 ***\nORIGIN_SZSGSZ04  0.2954067  0.0050865    58.077  &lt; 2e-16 ***\nORIGIN_SZSGSZ05 -2.0792678  0.0109882  -189.227  &lt; 2e-16 ***\nORIGIN_SZSGSZ06  0.4563227  0.0048880    93.356  &lt; 2e-16 ***\nORIGIN_SZSGSZ07 -0.8955254  0.0067100  -133.461  &lt; 2e-16 ***\nORIGIN_SZSKSZ01 -0.3184402  0.0093032   -34.229  &lt; 2e-16 ***\nORIGIN_SZSKSZ02  1.1160484  0.0063851   174.790  &lt; 2e-16 ***\nORIGIN_SZSKSZ03 -0.2566692  0.0086021   -29.838  &lt; 2e-16 ***\nORIGIN_SZSKSZ04 -1.5781827  0.0279394   -56.486  &lt; 2e-16 ***\nORIGIN_SZSKSZ05 -0.2724361  0.0163597   -16.653  &lt; 2e-16 ***\nORIGIN_SZSLSZ01 -2.4458625  0.0330301   -74.050  &lt; 2e-16 ***\nORIGIN_SZSLSZ04 -0.0987076  0.0079626   -12.396  &lt; 2e-16 ***\nORIGIN_SZSRSZ01 -2.2584977  0.0176647  -127.854  &lt; 2e-16 ***\nORIGIN_SZTHSZ01 -2.5878524  0.0489998   -52.814  &lt; 2e-16 ***\nORIGIN_SZTHSZ03 -0.8101746  0.0226814   -35.720  &lt; 2e-16 ***\nORIGIN_SZTHSZ04 -2.4186655  0.0288663   -83.789  &lt; 2e-16 ***\nORIGIN_SZTHSZ06 -1.7080541  0.0186353   -91.657  &lt; 2e-16 ***\nORIGIN_SZTMSZ01 -0.2193476  0.0061823   -35.480  &lt; 2e-16 ***\nORIGIN_SZTMSZ02  1.7772464  0.0043394   409.558  &lt; 2e-16 ***\nORIGIN_SZTMSZ03  1.0051343  0.0046055   218.249  &lt; 2e-16 ***\nORIGIN_SZTMSZ04  0.1642370  0.0055078    29.819  &lt; 2e-16 ***\nORIGIN_SZTMSZ05 -1.2878706  0.0114828  -112.157  &lt; 2e-16 ***\nORIGIN_SZTNSZ01 -1.7163504  0.0131268  -130.751  &lt; 2e-16 ***\nORIGIN_SZTNSZ02 -1.6508988  0.0103851  -158.968  &lt; 2e-16 ***\nORIGIN_SZTNSZ03 -2.1545577  0.0137947  -156.187  &lt; 2e-16 ***\nORIGIN_SZTNSZ04 -0.3949120  0.0078496   -50.310  &lt; 2e-16 ***\nORIGIN_SZTPSZ01 -0.8058100  0.0069916  -115.253  &lt; 2e-16 ***\nORIGIN_SZTPSZ02  0.5369060  0.0047272   113.577  &lt; 2e-16 ***\nORIGIN_SZTPSZ03 -0.7779333  0.0064278  -121.027  &lt; 2e-16 ***\nORIGIN_SZTPSZ04 -0.8153581  0.0061387  -132.823  &lt; 2e-16 ***\nORIGIN_SZTPSZ05 -0.5073676  0.0067771   -74.865  &lt; 2e-16 ***\nORIGIN_SZTPSZ06  0.0847301  0.0065717    12.893  &lt; 2e-16 ***\nORIGIN_SZTPSZ07 -0.5839519  0.0066148   -88.280  &lt; 2e-16 ***\nORIGIN_SZTPSZ08 -1.0577941  0.0098480  -107.412  &lt; 2e-16 ***\nORIGIN_SZTPSZ09 -0.9067707  0.0071367  -127.057  &lt; 2e-16 ***\nORIGIN_SZTPSZ10 -1.1362091  0.0080905  -140.438  &lt; 2e-16 ***\nORIGIN_SZTPSZ11 -0.2374621  0.0059472   -39.928  &lt; 2e-16 ***\nORIGIN_SZTPSZ12 -0.8028874  0.0069663  -115.253  &lt; 2e-16 ***\nORIGIN_SZTSSZ01 -2.7809271  0.0482843   -57.595  &lt; 2e-16 ***\nORIGIN_SZTSSZ02  0.0425804  0.0105088     4.052 5.08e-05 ***\nORIGIN_SZTSSZ03  0.1142369  0.0109412    10.441  &lt; 2e-16 ***\nORIGIN_SZTSSZ04 -0.6186261  0.0116324   -53.181  &lt; 2e-16 ***\nORIGIN_SZTSSZ05 -1.0846732  0.0173555   -62.497  &lt; 2e-16 ***\nORIGIN_SZTSSZ06  0.3980173  0.0198100    20.092  &lt; 2e-16 ***\nORIGIN_SZWCSZ01  1.3545143  0.0092002   147.227  &lt; 2e-16 ***\nORIGIN_SZWCSZ02 -2.9863278  0.0330906   -90.247  &lt; 2e-16 ***\nORIGIN_SZWCSZ03 -5.0504916  0.1241385   -40.684  &lt; 2e-16 ***\nORIGIN_SZWDSZ01  1.5238429  0.0049404   308.448  &lt; 2e-16 ***\nORIGIN_SZWDSZ02  0.2832576  0.0056218    50.386  &lt; 2e-16 ***\nORIGIN_SZWDSZ03  1.3702524  0.0053266   257.245  &lt; 2e-16 ***\nORIGIN_SZWDSZ04  1.0248225  0.0059272   172.903  &lt; 2e-16 ***\nORIGIN_SZWDSZ05  0.2356778  0.0060587    38.899  &lt; 2e-16 ***\nORIGIN_SZWDSZ06  0.3146925  0.0059919    52.520  &lt; 2e-16 ***\nORIGIN_SZWDSZ07 -1.4971897  0.0091243  -164.088  &lt; 2e-16 ***\nORIGIN_SZWDSZ08 -0.8894079  0.0087414  -101.747  &lt; 2e-16 ***\nORIGIN_SZWDSZ09  1.4437633  0.0053160   271.590  &lt; 2e-16 ***\nORIGIN_SZYSSZ01 -0.2519398  0.0064443   -39.095  &lt; 2e-16 ***\nORIGIN_SZYSSZ02  0.8726785  0.0057658   151.354  &lt; 2e-16 ***\nORIGIN_SZYSSZ03  1.7868139  0.0050674   352.611  &lt; 2e-16 ***\nORIGIN_SZYSSZ04  0.8418040  0.0051738   162.704  &lt; 2e-16 ***\nORIGIN_SZYSSZ05  0.4292096  0.0062520    68.652  &lt; 2e-16 ***\nORIGIN_SZYSSZ06 -0.7459961  0.0119123   -62.624  &lt; 2e-16 ***\nORIGIN_SZYSSZ07 -0.8422281  0.0144559   -58.262  &lt; 2e-16 ***\nORIGIN_SZYSSZ08  0.1829428  0.0067885    26.949  &lt; 2e-16 ***\nORIGIN_SZYSSZ09  1.1159712  0.0050760   219.853  &lt; 2e-16 ***\nDESTIN_SZAMSZ02  0.0694567  0.0045966    15.111  &lt; 2e-16 ***\nDESTIN_SZAMSZ03  0.0760100  0.0044639    17.028  &lt; 2e-16 ***\nDESTIN_SZAMSZ04 -1.1306391  0.0064373  -175.639  &lt; 2e-16 ***\nDESTIN_SZAMSZ05 -1.0751133  0.0065164  -164.985  &lt; 2e-16 ***\nDESTIN_SZAMSZ06 -0.9624298  0.0065937  -145.962  &lt; 2e-16 ***\nDESTIN_SZAMSZ07 -1.5060319  0.0097616  -154.281  &lt; 2e-16 ***\nDESTIN_SZAMSZ08 -0.4813202  0.0069794   -68.963  &lt; 2e-16 ***\nDESTIN_SZAMSZ09 -1.0220675  0.0066313  -154.129  &lt; 2e-16 ***\nDESTIN_SZAMSZ10  0.1235142  0.0047044    26.255  &lt; 2e-16 ***\nDESTIN_SZAMSZ11 -0.8917993  0.0088519  -100.746  &lt; 2e-16 ***\nDESTIN_SZAMSZ12  0.0195208  0.0051704     3.775 0.000160 ***\nDESTIN_SZBDSZ01  0.9736349  0.0042757   227.713  &lt; 2e-16 ***\nDESTIN_SZBDSZ02 -0.1969470  0.0055284   -35.625  &lt; 2e-16 ***\nDESTIN_SZBDSZ03  0.1266471  0.0050786    24.938  &lt; 2e-16 ***\nDESTIN_SZBDSZ04  1.1608485  0.0041956   276.684  &lt; 2e-16 ***\nDESTIN_SZBDSZ05  0.9293840  0.0044412   209.265  &lt; 2e-16 ***\nDESTIN_SZBDSZ06  0.4090567  0.0050300    81.323  &lt; 2e-16 ***\nDESTIN_SZBDSZ07 -0.8171478  0.0098945   -82.586  &lt; 2e-16 ***\nDESTIN_SZBDSZ08 -1.5895287  0.0111632  -142.391  &lt; 2e-16 ***\nDESTIN_SZBKSZ01 -1.3793311  0.0072145  -191.189  &lt; 2e-16 ***\nDESTIN_SZBKSZ02 -0.5253670  0.0061879   -84.903  &lt; 2e-16 ***\nDESTIN_SZBKSZ03 -1.0095362  0.0065426  -154.301  &lt; 2e-16 ***\nDESTIN_SZBKSZ04 -0.5662858  0.0056453  -100.311  &lt; 2e-16 ***\nDESTIN_SZBKSZ05 -0.9406607  0.0070597  -133.244  &lt; 2e-16 ***\nDESTIN_SZBKSZ06 -1.3129276  0.0067414  -194.755  &lt; 2e-16 ***\nDESTIN_SZBKSZ07  0.0120605  0.0049284     2.447 0.014400 *  \nDESTIN_SZBKSZ08 -1.3658471  0.0075109  -181.849  &lt; 2e-16 ***\nDESTIN_SZBKSZ09 -0.1771310  0.0055645   -31.832  &lt; 2e-16 ***\nDESTIN_SZBLSZ01 -0.8175223  0.0075645  -108.074  &lt; 2e-16 ***\nDESTIN_SZBLSZ02  0.1631280  0.0071753    22.735  &lt; 2e-16 ***\nDESTIN_SZBLSZ03  1.2598494  0.0081706   154.194  &lt; 2e-16 ***\nDESTIN_SZBLSZ04 -0.5642975  0.0137827   -40.943  &lt; 2e-16 ***\nDESTIN_SZBMSZ01  0.6921844  0.0054211   127.684  &lt; 2e-16 ***\nDESTIN_SZBMSZ02 -0.1209392  0.0055362   -21.845  &lt; 2e-16 ***\nDESTIN_SZBMSZ03 -0.2373881  0.0062427   -38.027  &lt; 2e-16 ***\nDESTIN_SZBMSZ04 -0.0407117  0.0058001    -7.019 2.23e-12 ***\nDESTIN_SZBMSZ05 -0.2363309  0.0075967   -31.110  &lt; 2e-16 ***\nDESTIN_SZBMSZ06 -1.1930710  0.0134761   -88.532  &lt; 2e-16 ***\nDESTIN_SZBMSZ07  0.4625103  0.0051864    89.178  &lt; 2e-16 ***\nDESTIN_SZBMSZ08 -0.8604731  0.0069899  -123.102  &lt; 2e-16 ***\nDESTIN_SZBMSZ09 -2.1290239  0.0154841  -137.498  &lt; 2e-16 ***\nDESTIN_SZBMSZ10 -1.4617153  0.0094014  -155.478  &lt; 2e-16 ***\nDESTIN_SZBMSZ11 -1.3234050  0.0085506  -154.773  &lt; 2e-16 ***\nDESTIN_SZBMSZ12 -0.8399230  0.0085361   -98.397  &lt; 2e-16 ***\nDESTIN_SZBMSZ13  0.1366529  0.0059697    22.891  &lt; 2e-16 ***\nDESTIN_SZBMSZ14 -1.0491968  0.0083021  -126.378  &lt; 2e-16 ***\nDESTIN_SZBMSZ15 -0.6726684  0.0076276   -88.189  &lt; 2e-16 ***\nDESTIN_SZBMSZ16 -1.4011734  0.0116569  -120.201  &lt; 2e-16 ***\nDESTIN_SZBMSZ17 -1.5682752  0.0167333   -93.722  &lt; 2e-16 ***\nDESTIN_SZBPSZ01 -1.1120017  0.0063197  -175.959  &lt; 2e-16 ***\nDESTIN_SZBPSZ02 -2.0833466  0.0091139  -228.590  &lt; 2e-16 ***\nDESTIN_SZBPSZ03 -1.6937265  0.0087437  -193.709  &lt; 2e-16 ***\nDESTIN_SZBPSZ04 -0.7964999  0.0066129  -120.447  &lt; 2e-16 ***\nDESTIN_SZBPSZ05  0.2109118  0.0048815    43.206  &lt; 2e-16 ***\nDESTIN_SZBPSZ06 -1.1808365  0.0083657  -141.152  &lt; 2e-16 ***\nDESTIN_SZBPSZ07 -0.2077428  0.0084543   -24.572  &lt; 2e-16 ***\nDESTIN_SZBSSZ01  0.3164175  0.0050682    62.431  &lt; 2e-16 ***\nDESTIN_SZBSSZ02 -0.4852688  0.0057001   -85.134  &lt; 2e-16 ***\nDESTIN_SZBSSZ03  0.4130432  0.0043061    95.921  &lt; 2e-16 ***\nDESTIN_SZBTSZ01  0.6215095  0.0048914   127.061  &lt; 2e-16 ***\nDESTIN_SZBTSZ02 -0.0145076  0.0071799    -2.021 0.043324 *  \nDESTIN_SZBTSZ03  0.4919981  0.0058498    84.105  &lt; 2e-16 ***\nDESTIN_SZBTSZ04 -0.6957555  0.0114078   -60.989  &lt; 2e-16 ***\nDESTIN_SZBTSZ05  0.3329814  0.0073568    45.262  &lt; 2e-16 ***\nDESTIN_SZBTSZ06 -0.1333295  0.0073965   -18.026  &lt; 2e-16 ***\nDESTIN_SZBTSZ07 -1.4449581  0.0113186  -127.663  &lt; 2e-16 ***\nDESTIN_SZBTSZ08 -0.7079056  0.0103797   -68.201  &lt; 2e-16 ***\nDESTIN_SZCBSZ01 -5.7344725  0.3162767   -18.131  &lt; 2e-16 ***\nDESTIN_SZCCSZ01 -0.0009541  0.0083381    -0.114 0.908900    \nDESTIN_SZCHSZ01 -0.2083016  0.0099054   -21.029  &lt; 2e-16 ***\nDESTIN_SZCHSZ02  0.5369606  0.0057531    93.334  &lt; 2e-16 ***\nDESTIN_SZCHSZ03  2.5530638  0.0043945   580.971  &lt; 2e-16 ***\nDESTIN_SZCKSZ01 -0.5725975  0.0056507  -101.333  &lt; 2e-16 ***\nDESTIN_SZCKSZ02 -1.1181852  0.0063287  -176.685  &lt; 2e-16 ***\nDESTIN_SZCKSZ03  0.1156680  0.0049440    23.396  &lt; 2e-16 ***\nDESTIN_SZCKSZ04 -0.8647725  0.0071003  -121.794  &lt; 2e-16 ***\nDESTIN_SZCKSZ05 -1.1641791  0.0076248  -152.684  &lt; 2e-16 ***\nDESTIN_SZCKSZ06 -0.4397612  0.0073040   -60.208  &lt; 2e-16 ***\nDESTIN_SZCLSZ01  0.1930552  0.0053752    35.916  &lt; 2e-16 ***\nDESTIN_SZCLSZ02 -2.0436501  0.0136039  -150.225  &lt; 2e-16 ***\nDESTIN_SZCLSZ03 -0.9338571  0.0082908  -112.638  &lt; 2e-16 ***\nDESTIN_SZCLSZ04  0.0532041  0.0053276     9.987  &lt; 2e-16 ***\nDESTIN_SZCLSZ05 -1.0782781  0.0088184  -122.276  &lt; 2e-16 ***\nDESTIN_SZCLSZ06  0.4068171  0.0049068    82.910  &lt; 2e-16 ***\nDESTIN_SZCLSZ07 -0.3579507  0.0060289   -59.373  &lt; 2e-16 ***\nDESTIN_SZCLSZ08 -0.2487993  0.0066588   -37.364  &lt; 2e-16 ***\nDESTIN_SZCLSZ09  0.1611080  0.0071178    22.635  &lt; 2e-16 ***\nDESTIN_SZDTSZ02 -1.7308348  0.0349466   -49.528  &lt; 2e-16 ***\nDESTIN_SZDTSZ03 -0.5994253  0.0146230   -40.992  &lt; 2e-16 ***\nDESTIN_SZDTSZ13 -1.3685031  0.0162803   -84.059  &lt; 2e-16 ***\nDESTIN_SZGLSZ01 -0.0910001  0.0055275   -16.463  &lt; 2e-16 ***\nDESTIN_SZGLSZ02 -0.0692224  0.0052840   -13.100  &lt; 2e-16 ***\nDESTIN_SZGLSZ03  0.6493421  0.0043446   149.459  &lt; 2e-16 ***\nDESTIN_SZGLSZ04  0.9327947  0.0043674   213.583  &lt; 2e-16 ***\nDESTIN_SZGLSZ05  0.8161728  0.0043625   187.087  &lt; 2e-16 ***\nDESTIN_SZHGSZ01  0.0658625  0.0042516    15.491  &lt; 2e-16 ***\nDESTIN_SZHGSZ02 -0.8134329  0.0056721  -143.409  &lt; 2e-16 ***\nDESTIN_SZHGSZ03 -1.3546132  0.0066257  -204.448  &lt; 2e-16 ***\nDESTIN_SZHGSZ04 -0.4500588  0.0048448   -92.895  &lt; 2e-16 ***\nDESTIN_SZHGSZ05 -0.5026431  0.0050996   -98.566  &lt; 2e-16 ***\nDESTIN_SZHGSZ06 -0.8673686  0.0059530  -145.704  &lt; 2e-16 ***\nDESTIN_SZHGSZ07  0.0560490  0.0047702    11.750  &lt; 2e-16 ***\nDESTIN_SZHGSZ08 -0.0443189  0.0052599    -8.426  &lt; 2e-16 ***\nDESTIN_SZHGSZ09 -0.0126355  0.0054966    -2.299 0.021518 *  \nDESTIN_SZHGSZ10 -3.5821793  0.0263281  -136.059  &lt; 2e-16 ***\nDESTIN_SZJESZ01 -0.3704281  0.0056684   -65.350  &lt; 2e-16 ***\nDESTIN_SZJESZ02 -0.7369159  0.0058686  -125.570  &lt; 2e-16 ***\nDESTIN_SZJESZ03 -0.8985484  0.0063627  -141.222  &lt; 2e-16 ***\nDESTIN_SZJESZ04 -1.0511995  0.0073996  -142.061  &lt; 2e-16 ***\nDESTIN_SZJESZ05 -1.5324974  0.0102612  -149.349  &lt; 2e-16 ***\nDESTIN_SZJESZ06  0.3105267  0.0048241    64.370  &lt; 2e-16 ***\nDESTIN_SZJESZ07 -1.3234483  0.0085497  -154.795  &lt; 2e-16 ***\nDESTIN_SZJESZ08 -0.6559742  0.0083174   -78.867  &lt; 2e-16 ***\nDESTIN_SZJESZ09  0.2663752  0.0063370    42.035  &lt; 2e-16 ***\nDESTIN_SZJESZ10  0.8529026  0.0076067   112.126  &lt; 2e-16 ***\nDESTIN_SZJESZ11  0.5559641  0.0074629    74.497  &lt; 2e-16 ***\nDESTIN_SZJWSZ01 -0.9790971  0.0071830  -136.308  &lt; 2e-16 ***\nDESTIN_SZJWSZ02 -0.8746590  0.0060179  -145.342  &lt; 2e-16 ***\nDESTIN_SZJWSZ03  0.5689062  0.0049105   115.855  &lt; 2e-16 ***\nDESTIN_SZJWSZ04  0.4520963  0.0050302    89.876  &lt; 2e-16 ***\nDESTIN_SZJWSZ05 -1.0249671  0.0067371  -152.137  &lt; 2e-16 ***\nDESTIN_SZJWSZ06 -0.7451483  0.0062189  -119.819  &lt; 2e-16 ***\nDESTIN_SZJWSZ07 -2.8453099  0.0287335   -99.024  &lt; 2e-16 ***\nDESTIN_SZJWSZ08 -0.3372309  0.0058003   -58.141  &lt; 2e-16 ***\nDESTIN_SZJWSZ09  1.0505330  0.0045908   228.832  &lt; 2e-16 ***\nDESTIN_SZKLSZ01 -0.2334836  0.0057970   -40.277  &lt; 2e-16 ***\nDESTIN_SZKLSZ02 -0.5416148  0.0061432   -88.164  &lt; 2e-16 ***\nDESTIN_SZKLSZ03 -0.8026495  0.0068745  -116.757  &lt; 2e-16 ***\nDESTIN_SZKLSZ04 -1.2918594  0.0090197  -143.227  &lt; 2e-16 ***\nDESTIN_SZKLSZ05 -0.4069101  0.0087812   -46.339  &lt; 2e-16 ***\nDESTIN_SZKLSZ06 -2.5333101  0.0363215   -69.747  &lt; 2e-16 ***\nDESTIN_SZKLSZ07 -0.6623343  0.0070761   -93.601  &lt; 2e-16 ***\nDESTIN_SZKLSZ08 -0.1408205  0.0054965   -25.620  &lt; 2e-16 ***\nDESTIN_SZLKSZ01 -1.2639235  0.0208254   -60.691  &lt; 2e-16 ***\nDESTIN_SZMDSZ01 -1.5655800  0.0202787   -77.203  &lt; 2e-16 ***\nDESTIN_SZMDSZ02 -0.9767682  0.0114687   -85.168  &lt; 2e-16 ***\nDESTIN_SZMDSZ03 -3.3328109  0.0254294  -131.061  &lt; 2e-16 ***\nDESTIN_SZMPSZ01 -0.4552859  0.0080666   -56.441  &lt; 2e-16 ***\nDESTIN_SZMPSZ02 -0.5386560  0.0064620   -83.358  &lt; 2e-16 ***\nDESTIN_SZMPSZ03  0.4952000  0.0052295    94.694  &lt; 2e-16 ***\nDESTIN_SZMUSZ02 -1.4434175  0.0202509   -71.277  &lt; 2e-16 ***\nDESTIN_SZNTSZ01 -2.9194067  0.0449654   -64.926  &lt; 2e-16 ***\nDESTIN_SZNTSZ02 -1.3780179  0.0112867  -122.092  &lt; 2e-16 ***\nDESTIN_SZNTSZ03 -0.5044699  0.0080449   -62.707  &lt; 2e-16 ***\nDESTIN_SZNTSZ05 -2.0017134  0.0258750   -77.361  &lt; 2e-16 ***\nDESTIN_SZNTSZ06 -3.8120537  0.0434271   -87.781  &lt; 2e-16 ***\nDESTIN_SZNVSZ01 -0.1071506  0.0051026   -20.999  &lt; 2e-16 ***\nDESTIN_SZNVSZ02 -0.0274710  0.0057611    -4.768 1.86e-06 ***\nDESTIN_SZNVSZ03  0.1076352  0.0057909    18.587  &lt; 2e-16 ***\nDESTIN_SZNVSZ04 -1.2087250  0.0110438  -109.448  &lt; 2e-16 ***\nDESTIN_SZNVSZ05 -1.0058290  0.0092167  -109.131  &lt; 2e-16 ***\nDESTIN_SZPGSZ01 -1.2029931  0.0163170   -73.726  &lt; 2e-16 ***\nDESTIN_SZPGSZ02 -1.2878671  0.0074139  -173.709  &lt; 2e-16 ***\nDESTIN_SZPGSZ03 -0.1520894  0.0048629   -31.275  &lt; 2e-16 ***\nDESTIN_SZPGSZ04 -0.1985959  0.0050374   -39.424  &lt; 2e-16 ***\nDESTIN_SZPGSZ05 -1.5290983  0.0082617  -185.083  &lt; 2e-16 ***\nDESTIN_SZPLSZ01 -0.3567934  0.0074298   -48.022  &lt; 2e-16 ***\nDESTIN_SZPLSZ02 -1.7114351  0.0134462  -127.280  &lt; 2e-16 ***\nDESTIN_SZPLSZ03 -0.3241427  0.0098895   -32.776  &lt; 2e-16 ***\nDESTIN_SZPLSZ04 -1.7117196  0.0119003  -143.838  &lt; 2e-16 ***\nDESTIN_SZPLSZ05 -0.5086379  0.0120051   -42.368  &lt; 2e-16 ***\nDESTIN_SZPNSZ01  0.2026781  0.0068977    29.383  &lt; 2e-16 ***\nDESTIN_SZPNSZ02  0.8313754  0.0078544   105.848  &lt; 2e-16 ***\nDESTIN_SZPNSZ03 -0.4041254  0.0086586   -46.673  &lt; 2e-16 ***\nDESTIN_SZPNSZ04  1.5814539  0.0093641   168.885  &lt; 2e-16 ***\nDESTIN_SZPNSZ05  1.1823430  0.0129843    91.059  &lt; 2e-16 ***\nDESTIN_SZPRSZ01 -1.1057553  0.0088197  -125.374  &lt; 2e-16 ***\nDESTIN_SZPRSZ02  0.0895099  0.0056308    15.897  &lt; 2e-16 ***\nDESTIN_SZPRSZ03  0.6921925  0.0043977   157.397  &lt; 2e-16 ***\nDESTIN_SZPRSZ04 -0.2848336  0.0084725   -33.619  &lt; 2e-16 ***\nDESTIN_SZPRSZ05  0.1744480  0.0053553    32.575  &lt; 2e-16 ***\nDESTIN_SZPRSZ06  0.4279206  0.0058735    72.856  &lt; 2e-16 ***\nDESTIN_SZPRSZ07 -1.5123108  0.0124303  -121.664  &lt; 2e-16 ***\nDESTIN_SZPRSZ08 -0.5650226  0.0068530   -82.449  &lt; 2e-16 ***\nDESTIN_SZQTSZ01 -0.5952360  0.0090505   -65.769  &lt; 2e-16 ***\nDESTIN_SZQTSZ02 -0.7728170  0.0078910   -97.937  &lt; 2e-16 ***\nDESTIN_SZQTSZ03 -0.5066812  0.0073996   -68.474  &lt; 2e-16 ***\nDESTIN_SZQTSZ04 -0.6398414  0.0075411   -84.847  &lt; 2e-16 ***\nDESTIN_SZQTSZ05 -0.4354527  0.0069345   -62.795  &lt; 2e-16 ***\nDESTIN_SZQTSZ06 -0.6597391  0.0071919   -91.733  &lt; 2e-16 ***\nDESTIN_SZQTSZ07 -0.9392696  0.0112518   -83.477  &lt; 2e-16 ***\nDESTIN_SZQTSZ08  0.4617774  0.0057011    80.998  &lt; 2e-16 ***\nDESTIN_SZQTSZ09 -0.3174497  0.0065890   -48.178  &lt; 2e-16 ***\nDESTIN_SZQTSZ10  0.1993449  0.0059923    33.267  &lt; 2e-16 ***\nDESTIN_SZQTSZ11  0.2551535  0.0061885    41.230  &lt; 2e-16 ***\nDESTIN_SZQTSZ12 -0.1662603  0.0086701   -19.176  &lt; 2e-16 ***\nDESTIN_SZQTSZ13  0.5500978  0.0063091    87.192  &lt; 2e-16 ***\nDESTIN_SZQTSZ14  0.5364435  0.0070157    76.463  &lt; 2e-16 ***\nDESTIN_SZQTSZ15  1.3611043  0.0081643   166.715  &lt; 2e-16 ***\nDESTIN_SZRCSZ01 -0.1034049  0.0076769   -13.470  &lt; 2e-16 ***\nDESTIN_SZRCSZ06 -1.0633902  0.0189846   -56.013  &lt; 2e-16 ***\nDESTIN_SZRVSZ01 -1.5486221  0.0165272   -93.701  &lt; 2e-16 ***\nDESTIN_SZRVSZ02 -2.4092611  0.0326906   -73.699  &lt; 2e-16 ***\nDESTIN_SZRVSZ03 -1.5172079  0.0139258  -108.950  &lt; 2e-16 ***\nDESTIN_SZRVSZ04 -1.1663615  0.0157430   -74.088  &lt; 2e-16 ***\nDESTIN_SZRVSZ05 -2.2404292  0.0281339   -79.634  &lt; 2e-16 ***\nDESTIN_SZSBSZ01 -1.3783780  0.0096022  -143.549  &lt; 2e-16 ***\nDESTIN_SZSBSZ02 -1.4445213  0.0081630  -176.959  &lt; 2e-16 ***\nDESTIN_SZSBSZ03  0.5149906  0.0051663    99.683  &lt; 2e-16 ***\nDESTIN_SZSBSZ04  0.2389086  0.0060765    39.317  &lt; 2e-16 ***\nDESTIN_SZSBSZ05 -1.2737442  0.0082818  -153.801  &lt; 2e-16 ***\nDESTIN_SZSBSZ06 -1.8683520  0.0227277   -82.206  &lt; 2e-16 ***\nDESTIN_SZSBSZ07 -0.5993154  0.0184895   -32.414  &lt; 2e-16 ***\nDESTIN_SZSBSZ08  0.8156302  0.0059840   136.302  &lt; 2e-16 ***\nDESTIN_SZSBSZ09  0.0900611  0.0057054    15.785  &lt; 2e-16 ***\nDESTIN_SZSESZ02 -0.6397704  0.0052491  -121.882  &lt; 2e-16 ***\nDESTIN_SZSESZ03  0.1714103  0.0042357    40.468  &lt; 2e-16 ***\nDESTIN_SZSESZ04 -1.0596175  0.0059865  -177.002  &lt; 2e-16 ***\nDESTIN_SZSESZ05 -0.8071891  0.0051229  -157.566  &lt; 2e-16 ***\nDESTIN_SZSESZ06 -0.5580934  0.0066216   -84.284  &lt; 2e-16 ***\nDESTIN_SZSESZ07 -3.1448863  0.0227788  -138.062  &lt; 2e-16 ***\nDESTIN_SZSGSZ01 -0.1795225  0.0060127   -29.857  &lt; 2e-16 ***\nDESTIN_SZSGSZ02 -0.2986570  0.0053561   -55.760  &lt; 2e-16 ***\nDESTIN_SZSGSZ03 -0.4074671  0.0050609   -80.513  &lt; 2e-16 ***\nDESTIN_SZSGSZ04 -0.1505164  0.0050931   -29.553  &lt; 2e-16 ***\nDESTIN_SZSGSZ05 -1.9908372  0.0101448  -196.242  &lt; 2e-16 ***\nDESTIN_SZSGSZ06  0.6715268  0.0041161   163.148  &lt; 2e-16 ***\nDESTIN_SZSGSZ07 -0.4494757  0.0055319   -81.252  &lt; 2e-16 ***\nDESTIN_SZSISZ01 -0.5517983  0.0261860   -21.072  &lt; 2e-16 ***\nDESTIN_SZSKSZ01 -0.4749154  0.0079257   -59.921  &lt; 2e-16 ***\nDESTIN_SZSKSZ02  0.9400302  0.0057218   164.290  &lt; 2e-16 ***\nDESTIN_SZSKSZ03 -0.2800377  0.0066081   -42.378  &lt; 2e-16 ***\nDESTIN_SZSKSZ04 -1.2570212  0.0145351   -86.482  &lt; 2e-16 ***\nDESTIN_SZSKSZ05 -0.2600474  0.0112800   -23.054  &lt; 2e-16 ***\nDESTIN_SZSLSZ01 -0.7775604  0.0085818   -90.606  &lt; 2e-16 ***\nDESTIN_SZSLSZ04 -0.8586515  0.0073142  -117.396  &lt; 2e-16 ***\nDESTIN_SZSRSZ01 -1.1370887  0.0142148   -79.993  &lt; 2e-16 ***\nDESTIN_SZTHSZ01 -4.3259988  0.0368554  -117.378  &lt; 2e-16 ***\nDESTIN_SZTHSZ03 -2.6632914  0.0252720  -105.385  &lt; 2e-16 ***\nDESTIN_SZTHSZ04 -3.1000906  0.0216372  -143.276  &lt; 2e-16 ***\nDESTIN_SZTHSZ06 -2.5952642  0.0156340  -166.001  &lt; 2e-16 ***\nDESTIN_SZTMSZ01 -0.2092828  0.0059257   -35.318  &lt; 2e-16 ***\nDESTIN_SZTMSZ02  1.8238139  0.0039155   465.798  &lt; 2e-16 ***\nDESTIN_SZTMSZ03  0.8518259  0.0043636   195.210  &lt; 2e-16 ***\nDESTIN_SZTMSZ04  1.0222812  0.0043466   235.191  &lt; 2e-16 ***\nDESTIN_SZTMSZ05  0.6323777  0.0060058   105.294  &lt; 2e-16 ***\nDESTIN_SZTNSZ01 -0.3336078  0.0074388   -44.847  &lt; 2e-16 ***\nDESTIN_SZTNSZ02 -1.0820469  0.0101689  -106.408  &lt; 2e-16 ***\nDESTIN_SZTNSZ03 -1.4186505  0.0119906  -118.313  &lt; 2e-16 ***\nDESTIN_SZTNSZ04 -0.3058199  0.0074743   -40.916  &lt; 2e-16 ***\nDESTIN_SZTPSZ01 -0.4872299  0.0061571   -79.133  &lt; 2e-16 ***\nDESTIN_SZTPSZ02  0.7158441  0.0041312   173.278  &lt; 2e-16 ***\nDESTIN_SZTPSZ03 -0.4314229  0.0059917   -72.004  &lt; 2e-16 ***\nDESTIN_SZTPSZ04 -1.5898245  0.0076083  -208.959  &lt; 2e-16 ***\nDESTIN_SZTPSZ05 -1.0445550  0.0062363  -167.497  &lt; 2e-16 ***\nDESTIN_SZTPSZ06 -0.4319582  0.0070100   -61.621  &lt; 2e-16 ***\nDESTIN_SZTPSZ07 -2.1602303  0.0120352  -179.493  &lt; 2e-16 ***\nDESTIN_SZTPSZ08 -1.1920493  0.0093083  -128.063  &lt; 2e-16 ***\nDESTIN_SZTPSZ09 -0.2022481  0.0071137   -28.431  &lt; 2e-16 ***\nDESTIN_SZTPSZ10 -1.2464793  0.0090124  -138.308  &lt; 2e-16 ***\nDESTIN_SZTPSZ11 -0.0808445  0.0056019   -14.432  &lt; 2e-16 ***\nDESTIN_SZTPSZ12 -0.6784376  0.0066340  -102.267  &lt; 2e-16 ***\nDESTIN_SZTSSZ01 -1.5845062  0.0222086   -71.346  &lt; 2e-16 ***\nDESTIN_SZTSSZ02 -0.1886010  0.0146338   -12.888  &lt; 2e-16 ***\nDESTIN_SZTSSZ03  0.6525526  0.0092450    70.585  &lt; 2e-16 ***\nDESTIN_SZTSSZ04  0.5285464  0.0100182    52.759  &lt; 2e-16 ***\nDESTIN_SZTSSZ05  1.4670106  0.0104357   140.577  &lt; 2e-16 ***\nDESTIN_SZTSSZ06  2.5043588  0.0167444   149.564  &lt; 2e-16 ***\nDESTIN_SZWCSZ01  1.9787931  0.0054306   364.375  &lt; 2e-16 ***\nDESTIN_SZWCSZ02 -2.2593108  0.0127916  -176.624  &lt; 2e-16 ***\nDESTIN_SZWCSZ03 -3.1897655  0.0326927   -97.568  &lt; 2e-16 ***\nDESTIN_SZWDSZ01  1.0476108  0.0044629   234.738  &lt; 2e-16 ***\nDESTIN_SZWDSZ02 -1.3176990  0.0065894  -199.973  &lt; 2e-16 ***\nDESTIN_SZWDSZ03  0.3432057  0.0052496    65.377  &lt; 2e-16 ***\nDESTIN_SZWDSZ04 -0.7895927  0.0073392  -107.586  &lt; 2e-16 ***\nDESTIN_SZWDSZ05 -0.8751665  0.0072946  -119.975  &lt; 2e-16 ***\nDESTIN_SZWDSZ06 -0.2106221  0.0053027   -39.720  &lt; 2e-16 ***\nDESTIN_SZWDSZ07 -1.6050834  0.0071754  -223.692  &lt; 2e-16 ***\nDESTIN_SZWDSZ08 -0.5124717  0.0069223   -74.032  &lt; 2e-16 ***\nDESTIN_SZWDSZ09  0.3813542  0.0054697    69.721  &lt; 2e-16 ***\nDESTIN_SZYSSZ01  0.0853753  0.0046572    18.332  &lt; 2e-16 ***\nDESTIN_SZYSSZ02 -0.3227172  0.0057351   -56.271  &lt; 2e-16 ***\nDESTIN_SZYSSZ03 -0.4151283  0.0066299   -62.615  &lt; 2e-16 ***\nDESTIN_SZYSSZ04 -0.4637327  0.0058206   -79.671  &lt; 2e-16 ***\nDESTIN_SZYSSZ05 -1.5888242  0.0111001  -143.136  &lt; 2e-16 ***\nDESTIN_SZYSSZ06 -1.4606209  0.0107759  -135.545  &lt; 2e-16 ***\nDESTIN_SZYSSZ07 -0.7839065  0.0144357   -54.304  &lt; 2e-16 ***\nDESTIN_SZYSSZ08  0.6265412  0.0045504   137.691  &lt; 2e-16 ***\nDESTIN_SZYSSZ09  0.1520067  0.0048092    31.607  &lt; 2e-16 ***\nlog(DIST)       -1.8468315  0.0004608 -4008.033  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 47094011  on 14470  degrees of freedom\nResidual deviance: 10420261  on 13912  degrees of freedom\nAIC: 10510518\n\nNumber of Fisher Scoring iterations: 7\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nglm from stats package fits generalized linear models. In this code, a Poisson regression model is specified with family = poisson(link = \"log\"). The formula TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(DIST) defines the dependent variable (TRIPS) and the independent variables (ORIGIN_SZ, DESTIN_SZ, and logarithm of DIST).\nThe data argument specifies inter_zonal_flow as the dataset used for the model.\nna.action = na.exclude indicates how missing values (NAs) should be handled in the model fitting process.\nsummary from base R provides a comprehensive summary of the fitted model dbcSIM_Poisson, including the model coefficients, their statistical significance, and other diagnostic measures.\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important to note that there is a slight change of the code chunk. -1 is removed which means that an intercept will appear in the model again. The -1 for removing the intercept only works with one factor level but in double-constrained model we have two factor levels, namely: origins and destinations.\n\n\n\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(DIST), family = poisson(link = \"log\"), \n    data = inter_zonal_flow, na.action = na.exclude)\n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)     21.8312374  0.0059160  3690.190  &lt; 2e-16 ***\nORIGIN_SZAMSZ02  0.5263502  0.0048031   109.585  &lt; 2e-16 ***\nORIGIN_SZAMSZ03  0.3139982  0.0049254    63.751  &lt; 2e-16 ***\nORIGIN_SZAMSZ04 -0.2146257  0.0053639   -40.013  &lt; 2e-16 ***\nORIGIN_SZAMSZ05 -0.1890446  0.0060386   -31.306  &lt; 2e-16 ***\nORIGIN_SZAMSZ06  0.1539201  0.0054401    28.294  &lt; 2e-16 ***\nORIGIN_SZAMSZ07 -0.9826565  0.0098676   -99.584  &lt; 2e-16 ***\nORIGIN_SZAMSZ08 -0.4488417  0.0093070   -48.226  &lt; 2e-16 ***\nORIGIN_SZAMSZ09  0.0713474  0.0057402    12.429  &lt; 2e-16 ***\nORIGIN_SZAMSZ10  0.4313742  0.0050370    85.641  &lt; 2e-16 ***\nORIGIN_SZAMSZ11 -1.4712226  0.0131178  -112.154  &lt; 2e-16 ***\nORIGIN_SZAMSZ12 -1.7250733  0.0111603  -154.573  &lt; 2e-16 ***\nORIGIN_SZBDSZ01  0.8810576  0.0048168   182.914  &lt; 2e-16 ***\nORIGIN_SZBDSZ02  0.1100240  0.0055529    19.814  &lt; 2e-16 ***\nORIGIN_SZBDSZ03  0.3606166  0.0050672    71.167  &lt; 2e-16 ***\nORIGIN_SZBDSZ04  1.4624347  0.0044212   330.781  &lt; 2e-16 ***\nORIGIN_SZBDSZ05  0.6207557  0.0050843   122.092  &lt; 2e-16 ***\nORIGIN_SZBDSZ06  0.6712973  0.0051953   129.214  &lt; 2e-16 ***\nORIGIN_SZBDSZ07 -1.2338669  0.0100775  -122.437  &lt; 2e-16 ***\nORIGIN_SZBDSZ08 -1.0444562  0.0094555  -110.460  &lt; 2e-16 ***\nORIGIN_SZBKSZ01 -0.2838426  0.0071354   -39.780  &lt; 2e-16 ***\nORIGIN_SZBKSZ02  0.5550522  0.0059014    94.054  &lt; 2e-16 ***\nORIGIN_SZBKSZ03  0.7396640  0.0056796   130.231  &lt; 2e-16 ***\nORIGIN_SZBKSZ04 -0.2242451  0.0067482   -33.230  &lt; 2e-16 ***\nORIGIN_SZBKSZ05 -0.2371614  0.0069386   -34.180  &lt; 2e-16 ***\nORIGIN_SZBKSZ06 -0.1413812  0.0065035   -21.739  &lt; 2e-16 ***\nORIGIN_SZBKSZ07  0.7089989  0.0051843   136.758  &lt; 2e-16 ***\nORIGIN_SZBKSZ08 -0.0907065  0.0059157   -15.333  &lt; 2e-16 ***\nORIGIN_SZBKSZ09 -0.1775146  0.0063302   -28.042  &lt; 2e-16 ***\nORIGIN_SZBLSZ01 -2.3684539  0.0154280  -153.516  &lt; 2e-16 ***\nORIGIN_SZBLSZ02 -2.8078475  0.0197839  -141.926  &lt; 2e-16 ***\nORIGIN_SZBLSZ03 -3.3122763  0.0466091   -71.065  &lt; 2e-16 ***\nORIGIN_SZBLSZ04 -2.6770542  0.0241793  -110.717  &lt; 2e-16 ***\nORIGIN_SZBMSZ01  0.0618035  0.0059400    10.405  &lt; 2e-16 ***\nORIGIN_SZBMSZ02 -1.3535767  0.0073741  -183.557  &lt; 2e-16 ***\nORIGIN_SZBMSZ03 -0.7569095  0.0063187  -119.790  &lt; 2e-16 ***\nORIGIN_SZBMSZ04 -0.2949304  0.0059603   -49.483  &lt; 2e-16 ***\nORIGIN_SZBMSZ05 -2.6131992  0.0172376  -151.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ06 -3.0315024  0.0185502  -163.422  &lt; 2e-16 ***\nORIGIN_SZBMSZ07 -0.6962524  0.0064068  -108.674  &lt; 2e-16 ***\nORIGIN_SZBMSZ08 -0.9310730  0.0064541  -144.261  &lt; 2e-16 ***\nORIGIN_SZBMSZ09 -1.2911253  0.0092047  -140.268  &lt; 2e-16 ***\nORIGIN_SZBMSZ10 -1.6687004  0.0095708  -174.353  &lt; 2e-16 ***\nORIGIN_SZBMSZ11 -1.1152794  0.0072027  -154.841  &lt; 2e-16 ***\nORIGIN_SZBMSZ12 -1.5323954  0.0099932  -153.344  &lt; 2e-16 ***\nORIGIN_SZBMSZ13 -0.6267376  0.0065863   -95.158  &lt; 2e-16 ***\nORIGIN_SZBMSZ14 -1.0475467  0.0072472  -144.544  &lt; 2e-16 ***\nORIGIN_SZBMSZ15 -0.5049444  0.0067390   -74.929  &lt; 2e-16 ***\nORIGIN_SZBMSZ16 -1.5282897  0.0099545  -153.527  &lt; 2e-16 ***\nORIGIN_SZBMSZ17 -1.5722349  0.0161533   -97.332  &lt; 2e-16 ***\nORIGIN_SZBPSZ01  0.5814175  0.0062904    92.429  &lt; 2e-16 ***\nORIGIN_SZBPSZ02  0.0875442  0.0072190    12.127  &lt; 2e-16 ***\nORIGIN_SZBPSZ03  0.3358227  0.0070460    47.662  &lt; 2e-16 ***\nORIGIN_SZBPSZ04  0.6507586  0.0057726   112.733  &lt; 2e-16 ***\nORIGIN_SZBPSZ05  0.9502124  0.0052971   179.384  &lt; 2e-16 ***\nORIGIN_SZBPSZ06 -1.0480314  0.0098191  -106.734  &lt; 2e-16 ***\nORIGIN_SZBPSZ07 -0.5467931  0.0091676   -59.644  &lt; 2e-16 ***\nORIGIN_SZBSSZ01  0.2998334  0.0059193    50.654  &lt; 2e-16 ***\nORIGIN_SZBSSZ02  0.2841036  0.0050863    55.856  &lt; 2e-16 ***\nORIGIN_SZBSSZ03 -0.2331505  0.0056565   -41.218  &lt; 2e-16 ***\nORIGIN_SZBTSZ01  0.0987284  0.0063715    15.495  &lt; 2e-16 ***\nORIGIN_SZBTSZ02 -0.6261229  0.0084604   -74.006  &lt; 2e-16 ***\nORIGIN_SZBTSZ03 -0.4326963  0.0073452   -58.909  &lt; 2e-16 ***\nORIGIN_SZBTSZ04 -1.4998668  0.0110013  -136.336  &lt; 2e-16 ***\nORIGIN_SZBTSZ05 -0.9564768  0.0122202   -78.270  &lt; 2e-16 ***\nORIGIN_SZBTSZ06 -1.2853131  0.0099328  -129.401  &lt; 2e-16 ***\nORIGIN_SZBTSZ07 -2.3870991  0.0144589  -165.096  &lt; 2e-16 ***\nORIGIN_SZBTSZ08 -1.3715855  0.0113825  -120.499  &lt; 2e-16 ***\nORIGIN_SZCBSZ01 -3.5940232  0.0548979   -65.467  &lt; 2e-16 ***\nORIGIN_SZCCSZ01 -0.7008220  0.0140373   -49.926  &lt; 2e-16 ***\nORIGIN_SZCHSZ01 -0.9109524  0.0122869   -74.140  &lt; 2e-16 ***\nORIGIN_SZCHSZ02 -0.8566547  0.0088749   -96.526  &lt; 2e-16 ***\nORIGIN_SZCHSZ03  1.1153731  0.0066136   168.650  &lt; 2e-16 ***\nORIGIN_SZCKSZ01  0.3001815  0.0058548    51.271  &lt; 2e-16 ***\nORIGIN_SZCKSZ02  0.7185711  0.0060595   118.585  &lt; 2e-16 ***\nORIGIN_SZCKSZ03  1.1389824  0.0053179   214.178  &lt; 2e-16 ***\nORIGIN_SZCKSZ04  1.6281772  0.0054761   297.324  &lt; 2e-16 ***\nORIGIN_SZCKSZ05  0.8338470  0.0064178   129.927  &lt; 2e-16 ***\nORIGIN_SZCKSZ06  0.6528993  0.0082375    79.259  &lt; 2e-16 ***\nORIGIN_SZCLSZ01 -0.7174758  0.0082123   -87.366  &lt; 2e-16 ***\nORIGIN_SZCLSZ02 -1.7513100  0.0139062  -125.938  &lt; 2e-16 ***\nORIGIN_SZCLSZ03 -1.0362873  0.0085485  -121.224  &lt; 2e-16 ***\nORIGIN_SZCLSZ04  0.6160017  0.0051276   120.136  &lt; 2e-16 ***\nORIGIN_SZCLSZ05 -2.1005122  0.0150228  -139.821  &lt; 2e-16 ***\nORIGIN_SZCLSZ06  0.7252108  0.0049447   146.665  &lt; 2e-16 ***\nORIGIN_SZCLSZ07 -0.5343482  0.0062500   -85.496  &lt; 2e-16 ***\nORIGIN_SZCLSZ08 -0.2153408  0.0067571   -31.869  &lt; 2e-16 ***\nORIGIN_SZCLSZ09 -1.8019961  0.0169078  -106.578  &lt; 2e-16 ***\nORIGIN_SZDTSZ02 -3.9057711  0.0834668   -46.794  &lt; 2e-16 ***\nORIGIN_SZDTSZ03 -3.4152419  0.0738650   -46.236  &lt; 2e-16 ***\nORIGIN_SZDTSZ13 -3.0183438  0.0315257   -95.742  &lt; 2e-16 ***\nORIGIN_SZGLSZ01 -1.7812384  0.0099367  -179.258  &lt; 2e-16 ***\nORIGIN_SZGLSZ02 -0.1074991  0.0054325   -19.788  &lt; 2e-16 ***\nORIGIN_SZGLSZ03 -0.2461106  0.0057176   -43.045  &lt; 2e-16 ***\nORIGIN_SZGLSZ04  0.8657186  0.0046413   186.524  &lt; 2e-16 ***\nORIGIN_SZGLSZ05  0.5871393  0.0047939   122.477  &lt; 2e-16 ***\nORIGIN_SZHGSZ01  0.3543819  0.0050461    70.229  &lt; 2e-16 ***\nORIGIN_SZHGSZ02  0.4218178  0.0050820    83.003  &lt; 2e-16 ***\nORIGIN_SZHGSZ03  0.2411309  0.0054241    44.456  &lt; 2e-16 ***\nORIGIN_SZHGSZ04  0.8180622  0.0046153   177.252  &lt; 2e-16 ***\nORIGIN_SZHGSZ05  1.2173687  0.0045655   266.647  &lt; 2e-16 ***\nORIGIN_SZHGSZ06 -0.1826300  0.0058214   -31.372  &lt; 2e-16 ***\nORIGIN_SZHGSZ07  0.3172839  0.0050733    62.540  &lt; 2e-16 ***\nORIGIN_SZHGSZ08 -0.1151369  0.0057067   -20.176  &lt; 2e-16 ***\nORIGIN_SZHGSZ09 -1.2873441  0.0091690  -140.401  &lt; 2e-16 ***\nORIGIN_SZHGSZ10 -3.3783178  0.0424682   -79.549  &lt; 2e-16 ***\nORIGIN_SZJESZ01  0.4859234  0.0055927    86.885  &lt; 2e-16 ***\nORIGIN_SZJESZ02  0.1766088  0.0055800    31.650  &lt; 2e-16 ***\nORIGIN_SZJESZ03 -0.2177441  0.0059535   -36.574  &lt; 2e-16 ***\nORIGIN_SZJESZ04 -1.5532182  0.0104526  -148.597  &lt; 2e-16 ***\nORIGIN_SZJESZ05 -2.3332926  0.0142701  -163.509  &lt; 2e-16 ***\nORIGIN_SZJESZ06  0.3007382  0.0055019    54.661  &lt; 2e-16 ***\nORIGIN_SZJESZ07 -1.9687994  0.0121092  -162.587  &lt; 2e-16 ***\nORIGIN_SZJESZ08 -1.3032070  0.0122024  -106.800  &lt; 2e-16 ***\nORIGIN_SZJESZ09  0.5762635  0.0058766    98.061  &lt; 2e-16 ***\nORIGIN_SZJESZ10 -1.4423113  0.0194773   -74.051  &lt; 2e-16 ***\nORIGIN_SZJESZ11 -1.9720897  0.0200811   -98.206  &lt; 2e-16 ***\nORIGIN_SZJWSZ01  0.3808627  0.0071357    53.374  &lt; 2e-16 ***\nORIGIN_SZJWSZ02  0.7963999  0.0053150   149.840  &lt; 2e-16 ***\nORIGIN_SZJWSZ03  1.5429636  0.0049961   308.834  &lt; 2e-16 ***\nORIGIN_SZJWSZ04  0.6410760  0.0056711   113.042  &lt; 2e-16 ***\nORIGIN_SZJWSZ05 -2.1571049  0.0133584  -161.479  &lt; 2e-16 ***\nORIGIN_SZJWSZ06 -1.5174532  0.0113384  -133.833  &lt; 2e-16 ***\nORIGIN_SZJWSZ07 -2.7089963  0.0280439   -96.598  &lt; 2e-16 ***\nORIGIN_SZJWSZ08  1.5343415  0.0051711   296.713  &lt; 2e-16 ***\nORIGIN_SZJWSZ09  1.8837410  0.0048845   385.656  &lt; 2e-16 ***\nORIGIN_SZKLSZ01  0.1081286  0.0053307    20.284  &lt; 2e-16 ***\nORIGIN_SZKLSZ02 -0.8844695  0.0067728  -130.591  &lt; 2e-16 ***\nORIGIN_SZKLSZ03 -0.6872640  0.0062857  -109.337  &lt; 2e-16 ***\nORIGIN_SZKLSZ04 -2.2090319  0.0122440  -180.418  &lt; 2e-16 ***\nORIGIN_SZKLSZ05 -1.1728726  0.0110765  -105.888  &lt; 2e-16 ***\nORIGIN_SZKLSZ06 -6.1162315  0.1857789   -32.922  &lt; 2e-16 ***\nORIGIN_SZKLSZ07 -1.4082749  0.0092299  -152.578  &lt; 2e-16 ***\nORIGIN_SZKLSZ08 -1.7781551  0.0104682  -169.862  &lt; 2e-16 ***\nORIGIN_SZLKSZ01 -2.0531568  0.0398803   -51.483  &lt; 2e-16 ***\nORIGIN_SZMDSZ01 -0.8825639  0.0287621   -30.685  &lt; 2e-16 ***\nORIGIN_SZMDSZ02 -0.6219993  0.0107388   -57.921  &lt; 2e-16 ***\nORIGIN_SZMDSZ03 -2.0840156  0.0173117  -120.382  &lt; 2e-16 ***\nORIGIN_SZMPSZ01 -0.9659093  0.0086972  -111.060  &lt; 2e-16 ***\nORIGIN_SZMPSZ02 -1.0411153  0.0073403  -141.836  &lt; 2e-16 ***\nORIGIN_SZMPSZ03  0.0001659  0.0059401     0.028 0.977719    \nORIGIN_SZMUSZ02 -3.7599031  0.1037937   -36.225  &lt; 2e-16 ***\nORIGIN_SZNTSZ01 -3.0388366  0.0355325   -85.523  &lt; 2e-16 ***\nORIGIN_SZNTSZ02 -3.4230640  0.0235902  -145.106  &lt; 2e-16 ***\nORIGIN_SZNTSZ03 -0.9094796  0.0082551  -110.172  &lt; 2e-16 ***\nORIGIN_SZNTSZ05 -4.0861681  0.0499630   -81.784  &lt; 2e-16 ***\nORIGIN_SZNTSZ06 -3.9497128  0.0565388   -69.858  &lt; 2e-16 ***\nORIGIN_SZNVSZ01  0.3235636  0.0049439    65.447  &lt; 2e-16 ***\nORIGIN_SZNVSZ02 -0.6946748  0.0070536   -98.485  &lt; 2e-16 ***\nORIGIN_SZNVSZ03 -1.0540196  0.0083781  -125.806  &lt; 2e-16 ***\nORIGIN_SZNVSZ04 -0.9897977  0.0093463  -105.903  &lt; 2e-16 ***\nORIGIN_SZNVSZ05 -2.2578432  0.0169180  -133.458  &lt; 2e-16 ***\nORIGIN_SZPGSZ01  0.2399827  0.0130436    18.398  &lt; 2e-16 ***\nORIGIN_SZPGSZ02 -0.3352342  0.0078451   -42.732  &lt; 2e-16 ***\nORIGIN_SZPGSZ03  0.9515148  0.0051376   185.207  &lt; 2e-16 ***\nORIGIN_SZPGSZ04  1.3998952  0.0047991   291.697  &lt; 2e-16 ***\nORIGIN_SZPGSZ05  0.4451629  0.0063423    70.189  &lt; 2e-16 ***\nORIGIN_SZPLSZ01 -0.9705918  0.0122781   -79.050  &lt; 2e-16 ***\nORIGIN_SZPLSZ02 -1.0670151  0.0153358   -69.577  &lt; 2e-16 ***\nORIGIN_SZPLSZ03 -2.1229124  0.0373527   -56.834  &lt; 2e-16 ***\nORIGIN_SZPLSZ04 -3.0911932  0.0371296   -83.254  &lt; 2e-16 ***\nORIGIN_SZPLSZ05 -2.1705708  0.0226085   -96.007  &lt; 2e-16 ***\nORIGIN_SZPNSZ01  0.9052637  0.0065952   137.262  &lt; 2e-16 ***\nORIGIN_SZPNSZ02 -0.1720425  0.0125658   -13.691  &lt; 2e-16 ***\nORIGIN_SZPNSZ03 -2.3973459  0.0201408  -119.029  &lt; 2e-16 ***\nORIGIN_SZPNSZ04 -3.4483689  0.0343741  -100.319  &lt; 2e-16 ***\nORIGIN_SZPNSZ05 -2.0588530  0.0282328   -72.924  &lt; 2e-16 ***\nORIGIN_SZPRSZ01 -0.6399015  0.0120470   -53.117  &lt; 2e-16 ***\nORIGIN_SZPRSZ02  0.8122270  0.0050886   159.617  &lt; 2e-16 ***\nORIGIN_SZPRSZ03  0.3990960  0.0051810    77.031  &lt; 2e-16 ***\nORIGIN_SZPRSZ04 -0.8485348  0.0079236  -107.089  &lt; 2e-16 ***\nORIGIN_SZPRSZ05  0.8008791  0.0048532   165.021  &lt; 2e-16 ***\nORIGIN_SZPRSZ06 -1.4498806  0.0121422  -119.408  &lt; 2e-16 ***\nORIGIN_SZPRSZ07 -3.2025045  0.0167118  -191.631  &lt; 2e-16 ***\nORIGIN_SZPRSZ08 -0.5862269  0.0067255   -87.165  &lt; 2e-16 ***\nORIGIN_SZQTSZ01 -0.1859270  0.0075531   -24.616  &lt; 2e-16 ***\nORIGIN_SZQTSZ02 -0.8715122  0.0068124  -127.929  &lt; 2e-16 ***\nORIGIN_SZQTSZ03 -0.1259816  0.0064796   -19.443  &lt; 2e-16 ***\nORIGIN_SZQTSZ04 -1.4620032  0.0079848  -183.098  &lt; 2e-16 ***\nORIGIN_SZQTSZ05 -0.6675643  0.0069616   -95.892  &lt; 2e-16 ***\nORIGIN_SZQTSZ06 -0.8190026  0.0072713  -112.634  &lt; 2e-16 ***\nORIGIN_SZQTSZ07 -1.5189403  0.0099864  -152.101  &lt; 2e-16 ***\nORIGIN_SZQTSZ08 -0.4976238  0.0067874   -73.316  &lt; 2e-16 ***\nORIGIN_SZQTSZ09 -0.9006162  0.0075978  -118.536  &lt; 2e-16 ***\nORIGIN_SZQTSZ10 -0.6690184  0.0071574   -93.473  &lt; 2e-16 ***\nORIGIN_SZQTSZ11 -2.5203437  0.0147000  -171.452  &lt; 2e-16 ***\nORIGIN_SZQTSZ12 -3.0461675  0.0190193  -160.162  &lt; 2e-16 ***\nORIGIN_SZQTSZ13 -0.7501068  0.0084481   -88.791  &lt; 2e-16 ***\nORIGIN_SZQTSZ14 -1.9321849  0.0126114  -153.209  &lt; 2e-16 ***\nORIGIN_SZQTSZ15 -0.9576828  0.0127157   -75.315  &lt; 2e-16 ***\nORIGIN_SZRCSZ01 -1.8167951  0.0129234  -140.582  &lt; 2e-16 ***\nORIGIN_SZRCSZ06 -0.5560563  0.0090507   -61.438  &lt; 2e-16 ***\nORIGIN_SZRVSZ01 -2.8862570  0.0325532   -88.663  &lt; 2e-16 ***\nORIGIN_SZRVSZ02 -3.1555662  0.0281279  -112.186  &lt; 2e-16 ***\nORIGIN_SZRVSZ03 -2.9836089  0.0248449  -120.089  &lt; 2e-16 ***\nORIGIN_SZRVSZ04 -3.5520422  0.0561371   -63.274  &lt; 2e-16 ***\nORIGIN_SZRVSZ05 -2.5866584  0.0180382  -143.399  &lt; 2e-16 ***\nORIGIN_SZSBSZ01  0.2867444  0.0071098    40.331  &lt; 2e-16 ***\nORIGIN_SZSBSZ02 -0.9012334  0.0087262  -103.278  &lt; 2e-16 ***\nORIGIN_SZSBSZ03  0.8311038  0.0055422   149.958  &lt; 2e-16 ***\nORIGIN_SZSBSZ04  0.4044170  0.0062047    65.179  &lt; 2e-16 ***\nORIGIN_SZSBSZ05 -0.2661845  0.0074162   -35.892  &lt; 2e-16 ***\nORIGIN_SZSBSZ06 -0.9023075  0.0175046   -51.547  &lt; 2e-16 ***\nORIGIN_SZSBSZ07  0.0505870  0.0131317     3.852 0.000117 ***\nORIGIN_SZSBSZ08 -1.1158011  0.0145416   -76.732  &lt; 2e-16 ***\nORIGIN_SZSBSZ09 -0.9682835  0.0095396  -101.501  &lt; 2e-16 ***\nORIGIN_SZSESZ02  1.1452735  0.0047810   239.548  &lt; 2e-16 ***\nORIGIN_SZSESZ03  1.2815277  0.0045677   280.564  &lt; 2e-16 ***\nORIGIN_SZSESZ04  0.8085857  0.0052756   153.269  &lt; 2e-16 ***\nORIGIN_SZSESZ05 -0.2329413  0.0063113   -36.909  &lt; 2e-16 ***\nORIGIN_SZSESZ06  1.0576879  0.0049909   211.925  &lt; 2e-16 ***\nORIGIN_SZSESZ07 -2.3165908  0.0196831  -117.695  &lt; 2e-16 ***\nORIGIN_SZSGSZ01 -0.6606350  0.0088079   -75.005  &lt; 2e-16 ***\nORIGIN_SZSGSZ02 -1.3638984  0.0104040  -131.094  &lt; 2e-16 ***\nORIGIN_SZSGSZ03  0.1152591  0.0054649    21.091  &lt; 2e-16 ***\nORIGIN_SZSGSZ04  0.2954067  0.0050865    58.077  &lt; 2e-16 ***\nORIGIN_SZSGSZ05 -2.0792678  0.0109882  -189.227  &lt; 2e-16 ***\nORIGIN_SZSGSZ06  0.4563227  0.0048880    93.356  &lt; 2e-16 ***\nORIGIN_SZSGSZ07 -0.8955254  0.0067100  -133.461  &lt; 2e-16 ***\nORIGIN_SZSKSZ01 -0.3184402  0.0093032   -34.229  &lt; 2e-16 ***\nORIGIN_SZSKSZ02  1.1160484  0.0063851   174.790  &lt; 2e-16 ***\nORIGIN_SZSKSZ03 -0.2566692  0.0086021   -29.838  &lt; 2e-16 ***\nORIGIN_SZSKSZ04 -1.5781827  0.0279394   -56.486  &lt; 2e-16 ***\nORIGIN_SZSKSZ05 -0.2724361  0.0163597   -16.653  &lt; 2e-16 ***\nORIGIN_SZSLSZ01 -2.4458625  0.0330301   -74.050  &lt; 2e-16 ***\nORIGIN_SZSLSZ04 -0.0987076  0.0079626   -12.396  &lt; 2e-16 ***\nORIGIN_SZSRSZ01 -2.2584977  0.0176647  -127.854  &lt; 2e-16 ***\nORIGIN_SZTHSZ01 -2.5878524  0.0489998   -52.814  &lt; 2e-16 ***\nORIGIN_SZTHSZ03 -0.8101746  0.0226814   -35.720  &lt; 2e-16 ***\nORIGIN_SZTHSZ04 -2.4186655  0.0288663   -83.789  &lt; 2e-16 ***\nORIGIN_SZTHSZ06 -1.7080541  0.0186353   -91.657  &lt; 2e-16 ***\nORIGIN_SZTMSZ01 -0.2193476  0.0061823   -35.480  &lt; 2e-16 ***\nORIGIN_SZTMSZ02  1.7772464  0.0043394   409.558  &lt; 2e-16 ***\nORIGIN_SZTMSZ03  1.0051343  0.0046055   218.249  &lt; 2e-16 ***\nORIGIN_SZTMSZ04  0.1642370  0.0055078    29.819  &lt; 2e-16 ***\nORIGIN_SZTMSZ05 -1.2878706  0.0114828  -112.157  &lt; 2e-16 ***\nORIGIN_SZTNSZ01 -1.7163504  0.0131268  -130.751  &lt; 2e-16 ***\nORIGIN_SZTNSZ02 -1.6508988  0.0103851  -158.968  &lt; 2e-16 ***\nORIGIN_SZTNSZ03 -2.1545577  0.0137947  -156.187  &lt; 2e-16 ***\nORIGIN_SZTNSZ04 -0.3949120  0.0078496   -50.310  &lt; 2e-16 ***\nORIGIN_SZTPSZ01 -0.8058100  0.0069916  -115.253  &lt; 2e-16 ***\nORIGIN_SZTPSZ02  0.5369060  0.0047272   113.577  &lt; 2e-16 ***\nORIGIN_SZTPSZ03 -0.7779333  0.0064278  -121.027  &lt; 2e-16 ***\nORIGIN_SZTPSZ04 -0.8153581  0.0061387  -132.823  &lt; 2e-16 ***\nORIGIN_SZTPSZ05 -0.5073676  0.0067771   -74.865  &lt; 2e-16 ***\nORIGIN_SZTPSZ06  0.0847301  0.0065717    12.893  &lt; 2e-16 ***\nORIGIN_SZTPSZ07 -0.5839519  0.0066148   -88.280  &lt; 2e-16 ***\nORIGIN_SZTPSZ08 -1.0577941  0.0098480  -107.412  &lt; 2e-16 ***\nORIGIN_SZTPSZ09 -0.9067707  0.0071367  -127.057  &lt; 2e-16 ***\nORIGIN_SZTPSZ10 -1.1362091  0.0080905  -140.438  &lt; 2e-16 ***\nORIGIN_SZTPSZ11 -0.2374621  0.0059472   -39.928  &lt; 2e-16 ***\nORIGIN_SZTPSZ12 -0.8028874  0.0069663  -115.253  &lt; 2e-16 ***\nORIGIN_SZTSSZ01 -2.7809271  0.0482843   -57.595  &lt; 2e-16 ***\nORIGIN_SZTSSZ02  0.0425804  0.0105088     4.052 5.08e-05 ***\nORIGIN_SZTSSZ03  0.1142369  0.0109412    10.441  &lt; 2e-16 ***\nORIGIN_SZTSSZ04 -0.6186261  0.0116324   -53.181  &lt; 2e-16 ***\nORIGIN_SZTSSZ05 -1.0846732  0.0173555   -62.497  &lt; 2e-16 ***\nORIGIN_SZTSSZ06  0.3980173  0.0198100    20.092  &lt; 2e-16 ***\nORIGIN_SZWCSZ01  1.3545143  0.0092002   147.227  &lt; 2e-16 ***\nORIGIN_SZWCSZ02 -2.9863278  0.0330906   -90.247  &lt; 2e-16 ***\nORIGIN_SZWCSZ03 -5.0504916  0.1241385   -40.684  &lt; 2e-16 ***\nORIGIN_SZWDSZ01  1.5238429  0.0049404   308.448  &lt; 2e-16 ***\nORIGIN_SZWDSZ02  0.2832576  0.0056218    50.386  &lt; 2e-16 ***\nORIGIN_SZWDSZ03  1.3702524  0.0053266   257.245  &lt; 2e-16 ***\nORIGIN_SZWDSZ04  1.0248225  0.0059272   172.903  &lt; 2e-16 ***\nORIGIN_SZWDSZ05  0.2356778  0.0060587    38.899  &lt; 2e-16 ***\nORIGIN_SZWDSZ06  0.3146925  0.0059919    52.520  &lt; 2e-16 ***\nORIGIN_SZWDSZ07 -1.4971897  0.0091243  -164.088  &lt; 2e-16 ***\nORIGIN_SZWDSZ08 -0.8894079  0.0087414  -101.747  &lt; 2e-16 ***\nORIGIN_SZWDSZ09  1.4437633  0.0053160   271.590  &lt; 2e-16 ***\nORIGIN_SZYSSZ01 -0.2519398  0.0064443   -39.095  &lt; 2e-16 ***\nORIGIN_SZYSSZ02  0.8726785  0.0057658   151.354  &lt; 2e-16 ***\nORIGIN_SZYSSZ03  1.7868139  0.0050674   352.611  &lt; 2e-16 ***\nORIGIN_SZYSSZ04  0.8418040  0.0051738   162.704  &lt; 2e-16 ***\nORIGIN_SZYSSZ05  0.4292096  0.0062520    68.652  &lt; 2e-16 ***\nORIGIN_SZYSSZ06 -0.7459961  0.0119123   -62.624  &lt; 2e-16 ***\nORIGIN_SZYSSZ07 -0.8422281  0.0144559   -58.262  &lt; 2e-16 ***\nORIGIN_SZYSSZ08  0.1829428  0.0067885    26.949  &lt; 2e-16 ***\nORIGIN_SZYSSZ09  1.1159712  0.0050760   219.853  &lt; 2e-16 ***\nDESTIN_SZAMSZ02  0.0694567  0.0045966    15.111  &lt; 2e-16 ***\nDESTIN_SZAMSZ03  0.0760100  0.0044639    17.028  &lt; 2e-16 ***\nDESTIN_SZAMSZ04 -1.1306391  0.0064373  -175.639  &lt; 2e-16 ***\nDESTIN_SZAMSZ05 -1.0751133  0.0065164  -164.985  &lt; 2e-16 ***\nDESTIN_SZAMSZ06 -0.9624298  0.0065937  -145.962  &lt; 2e-16 ***\nDESTIN_SZAMSZ07 -1.5060319  0.0097616  -154.281  &lt; 2e-16 ***\nDESTIN_SZAMSZ08 -0.4813202  0.0069794   -68.963  &lt; 2e-16 ***\nDESTIN_SZAMSZ09 -1.0220675  0.0066313  -154.129  &lt; 2e-16 ***\nDESTIN_SZAMSZ10  0.1235142  0.0047044    26.255  &lt; 2e-16 ***\nDESTIN_SZAMSZ11 -0.8917993  0.0088519  -100.746  &lt; 2e-16 ***\nDESTIN_SZAMSZ12  0.0195208  0.0051704     3.775 0.000160 ***\nDESTIN_SZBDSZ01  0.9736349  0.0042757   227.713  &lt; 2e-16 ***\nDESTIN_SZBDSZ02 -0.1969470  0.0055284   -35.625  &lt; 2e-16 ***\nDESTIN_SZBDSZ03  0.1266471  0.0050786    24.938  &lt; 2e-16 ***\nDESTIN_SZBDSZ04  1.1608485  0.0041956   276.684  &lt; 2e-16 ***\nDESTIN_SZBDSZ05  0.9293840  0.0044412   209.265  &lt; 2e-16 ***\nDESTIN_SZBDSZ06  0.4090567  0.0050300    81.323  &lt; 2e-16 ***\nDESTIN_SZBDSZ07 -0.8171478  0.0098945   -82.586  &lt; 2e-16 ***\nDESTIN_SZBDSZ08 -1.5895287  0.0111632  -142.391  &lt; 2e-16 ***\nDESTIN_SZBKSZ01 -1.3793311  0.0072145  -191.189  &lt; 2e-16 ***\nDESTIN_SZBKSZ02 -0.5253670  0.0061879   -84.903  &lt; 2e-16 ***\nDESTIN_SZBKSZ03 -1.0095362  0.0065426  -154.301  &lt; 2e-16 ***\nDESTIN_SZBKSZ04 -0.5662858  0.0056453  -100.311  &lt; 2e-16 ***\nDESTIN_SZBKSZ05 -0.9406607  0.0070597  -133.244  &lt; 2e-16 ***\nDESTIN_SZBKSZ06 -1.3129276  0.0067414  -194.755  &lt; 2e-16 ***\nDESTIN_SZBKSZ07  0.0120605  0.0049284     2.447 0.014400 *  \nDESTIN_SZBKSZ08 -1.3658471  0.0075109  -181.849  &lt; 2e-16 ***\nDESTIN_SZBKSZ09 -0.1771310  0.0055645   -31.832  &lt; 2e-16 ***\nDESTIN_SZBLSZ01 -0.8175223  0.0075645  -108.074  &lt; 2e-16 ***\nDESTIN_SZBLSZ02  0.1631280  0.0071753    22.735  &lt; 2e-16 ***\nDESTIN_SZBLSZ03  1.2598494  0.0081706   154.194  &lt; 2e-16 ***\nDESTIN_SZBLSZ04 -0.5642975  0.0137827   -40.943  &lt; 2e-16 ***\nDESTIN_SZBMSZ01  0.6921844  0.0054211   127.684  &lt; 2e-16 ***\nDESTIN_SZBMSZ02 -0.1209392  0.0055362   -21.845  &lt; 2e-16 ***\nDESTIN_SZBMSZ03 -0.2373881  0.0062427   -38.027  &lt; 2e-16 ***\nDESTIN_SZBMSZ04 -0.0407117  0.0058001    -7.019 2.23e-12 ***\nDESTIN_SZBMSZ05 -0.2363309  0.0075967   -31.110  &lt; 2e-16 ***\nDESTIN_SZBMSZ06 -1.1930710  0.0134761   -88.532  &lt; 2e-16 ***\nDESTIN_SZBMSZ07  0.4625103  0.0051864    89.178  &lt; 2e-16 ***\nDESTIN_SZBMSZ08 -0.8604731  0.0069899  -123.102  &lt; 2e-16 ***\nDESTIN_SZBMSZ09 -2.1290239  0.0154841  -137.498  &lt; 2e-16 ***\nDESTIN_SZBMSZ10 -1.4617153  0.0094014  -155.478  &lt; 2e-16 ***\nDESTIN_SZBMSZ11 -1.3234050  0.0085506  -154.773  &lt; 2e-16 ***\nDESTIN_SZBMSZ12 -0.8399230  0.0085361   -98.397  &lt; 2e-16 ***\nDESTIN_SZBMSZ13  0.1366529  0.0059697    22.891  &lt; 2e-16 ***\nDESTIN_SZBMSZ14 -1.0491968  0.0083021  -126.378  &lt; 2e-16 ***\nDESTIN_SZBMSZ15 -0.6726684  0.0076276   -88.189  &lt; 2e-16 ***\nDESTIN_SZBMSZ16 -1.4011734  0.0116569  -120.201  &lt; 2e-16 ***\nDESTIN_SZBMSZ17 -1.5682752  0.0167333   -93.722  &lt; 2e-16 ***\nDESTIN_SZBPSZ01 -1.1120017  0.0063197  -175.959  &lt; 2e-16 ***\nDESTIN_SZBPSZ02 -2.0833466  0.0091139  -228.590  &lt; 2e-16 ***\nDESTIN_SZBPSZ03 -1.6937265  0.0087437  -193.709  &lt; 2e-16 ***\nDESTIN_SZBPSZ04 -0.7964999  0.0066129  -120.447  &lt; 2e-16 ***\nDESTIN_SZBPSZ05  0.2109118  0.0048815    43.206  &lt; 2e-16 ***\nDESTIN_SZBPSZ06 -1.1808365  0.0083657  -141.152  &lt; 2e-16 ***\nDESTIN_SZBPSZ07 -0.2077428  0.0084543   -24.572  &lt; 2e-16 ***\nDESTIN_SZBSSZ01  0.3164175  0.0050682    62.431  &lt; 2e-16 ***\nDESTIN_SZBSSZ02 -0.4852688  0.0057001   -85.134  &lt; 2e-16 ***\nDESTIN_SZBSSZ03  0.4130432  0.0043061    95.921  &lt; 2e-16 ***\nDESTIN_SZBTSZ01  0.6215095  0.0048914   127.061  &lt; 2e-16 ***\nDESTIN_SZBTSZ02 -0.0145076  0.0071799    -2.021 0.043324 *  \nDESTIN_SZBTSZ03  0.4919981  0.0058498    84.105  &lt; 2e-16 ***\nDESTIN_SZBTSZ04 -0.6957555  0.0114078   -60.989  &lt; 2e-16 ***\nDESTIN_SZBTSZ05  0.3329814  0.0073568    45.262  &lt; 2e-16 ***\nDESTIN_SZBTSZ06 -0.1333295  0.0073965   -18.026  &lt; 2e-16 ***\nDESTIN_SZBTSZ07 -1.4449581  0.0113186  -127.663  &lt; 2e-16 ***\nDESTIN_SZBTSZ08 -0.7079056  0.0103797   -68.201  &lt; 2e-16 ***\nDESTIN_SZCBSZ01 -5.7344725  0.3162767   -18.131  &lt; 2e-16 ***\nDESTIN_SZCCSZ01 -0.0009541  0.0083381    -0.114 0.908900    \nDESTIN_SZCHSZ01 -0.2083016  0.0099054   -21.029  &lt; 2e-16 ***\nDESTIN_SZCHSZ02  0.5369606  0.0057531    93.334  &lt; 2e-16 ***\nDESTIN_SZCHSZ03  2.5530638  0.0043945   580.971  &lt; 2e-16 ***\nDESTIN_SZCKSZ01 -0.5725975  0.0056507  -101.333  &lt; 2e-16 ***\nDESTIN_SZCKSZ02 -1.1181852  0.0063287  -176.685  &lt; 2e-16 ***\nDESTIN_SZCKSZ03  0.1156680  0.0049440    23.396  &lt; 2e-16 ***\nDESTIN_SZCKSZ04 -0.8647725  0.0071003  -121.794  &lt; 2e-16 ***\nDESTIN_SZCKSZ05 -1.1641791  0.0076248  -152.684  &lt; 2e-16 ***\nDESTIN_SZCKSZ06 -0.4397612  0.0073040   -60.208  &lt; 2e-16 ***\nDESTIN_SZCLSZ01  0.1930552  0.0053752    35.916  &lt; 2e-16 ***\nDESTIN_SZCLSZ02 -2.0436501  0.0136039  -150.225  &lt; 2e-16 ***\nDESTIN_SZCLSZ03 -0.9338571  0.0082908  -112.638  &lt; 2e-16 ***\nDESTIN_SZCLSZ04  0.0532041  0.0053276     9.987  &lt; 2e-16 ***\nDESTIN_SZCLSZ05 -1.0782781  0.0088184  -122.276  &lt; 2e-16 ***\nDESTIN_SZCLSZ06  0.4068171  0.0049068    82.910  &lt; 2e-16 ***\nDESTIN_SZCLSZ07 -0.3579507  0.0060289   -59.373  &lt; 2e-16 ***\nDESTIN_SZCLSZ08 -0.2487993  0.0066588   -37.364  &lt; 2e-16 ***\nDESTIN_SZCLSZ09  0.1611080  0.0071178    22.635  &lt; 2e-16 ***\nDESTIN_SZDTSZ02 -1.7308348  0.0349466   -49.528  &lt; 2e-16 ***\nDESTIN_SZDTSZ03 -0.5994253  0.0146230   -40.992  &lt; 2e-16 ***\nDESTIN_SZDTSZ13 -1.3685031  0.0162803   -84.059  &lt; 2e-16 ***\nDESTIN_SZGLSZ01 -0.0910001  0.0055275   -16.463  &lt; 2e-16 ***\nDESTIN_SZGLSZ02 -0.0692224  0.0052840   -13.100  &lt; 2e-16 ***\nDESTIN_SZGLSZ03  0.6493421  0.0043446   149.459  &lt; 2e-16 ***\nDESTIN_SZGLSZ04  0.9327947  0.0043674   213.583  &lt; 2e-16 ***\nDESTIN_SZGLSZ05  0.8161728  0.0043625   187.087  &lt; 2e-16 ***\nDESTIN_SZHGSZ01  0.0658625  0.0042516    15.491  &lt; 2e-16 ***\nDESTIN_SZHGSZ02 -0.8134329  0.0056721  -143.409  &lt; 2e-16 ***\nDESTIN_SZHGSZ03 -1.3546132  0.0066257  -204.448  &lt; 2e-16 ***\nDESTIN_SZHGSZ04 -0.4500588  0.0048448   -92.895  &lt; 2e-16 ***\nDESTIN_SZHGSZ05 -0.5026431  0.0050996   -98.566  &lt; 2e-16 ***\nDESTIN_SZHGSZ06 -0.8673686  0.0059530  -145.704  &lt; 2e-16 ***\nDESTIN_SZHGSZ07  0.0560490  0.0047702    11.750  &lt; 2e-16 ***\nDESTIN_SZHGSZ08 -0.0443189  0.0052599    -8.426  &lt; 2e-16 ***\nDESTIN_SZHGSZ09 -0.0126355  0.0054966    -2.299 0.021518 *  \nDESTIN_SZHGSZ10 -3.5821793  0.0263281  -136.059  &lt; 2e-16 ***\nDESTIN_SZJESZ01 -0.3704281  0.0056684   -65.350  &lt; 2e-16 ***\nDESTIN_SZJESZ02 -0.7369159  0.0058686  -125.570  &lt; 2e-16 ***\nDESTIN_SZJESZ03 -0.8985484  0.0063627  -141.222  &lt; 2e-16 ***\nDESTIN_SZJESZ04 -1.0511995  0.0073996  -142.061  &lt; 2e-16 ***\nDESTIN_SZJESZ05 -1.5324974  0.0102612  -149.349  &lt; 2e-16 ***\nDESTIN_SZJESZ06  0.3105267  0.0048241    64.370  &lt; 2e-16 ***\nDESTIN_SZJESZ07 -1.3234483  0.0085497  -154.795  &lt; 2e-16 ***\nDESTIN_SZJESZ08 -0.6559742  0.0083174   -78.867  &lt; 2e-16 ***\nDESTIN_SZJESZ09  0.2663752  0.0063370    42.035  &lt; 2e-16 ***\nDESTIN_SZJESZ10  0.8529026  0.0076067   112.126  &lt; 2e-16 ***\nDESTIN_SZJESZ11  0.5559641  0.0074629    74.497  &lt; 2e-16 ***\nDESTIN_SZJWSZ01 -0.9790971  0.0071830  -136.308  &lt; 2e-16 ***\nDESTIN_SZJWSZ02 -0.8746590  0.0060179  -145.342  &lt; 2e-16 ***\nDESTIN_SZJWSZ03  0.5689062  0.0049105   115.855  &lt; 2e-16 ***\nDESTIN_SZJWSZ04  0.4520963  0.0050302    89.876  &lt; 2e-16 ***\nDESTIN_SZJWSZ05 -1.0249671  0.0067371  -152.137  &lt; 2e-16 ***\nDESTIN_SZJWSZ06 -0.7451483  0.0062189  -119.819  &lt; 2e-16 ***\nDESTIN_SZJWSZ07 -2.8453099  0.0287335   -99.024  &lt; 2e-16 ***\nDESTIN_SZJWSZ08 -0.3372309  0.0058003   -58.141  &lt; 2e-16 ***\nDESTIN_SZJWSZ09  1.0505330  0.0045908   228.832  &lt; 2e-16 ***\nDESTIN_SZKLSZ01 -0.2334836  0.0057970   -40.277  &lt; 2e-16 ***\nDESTIN_SZKLSZ02 -0.5416148  0.0061432   -88.164  &lt; 2e-16 ***\nDESTIN_SZKLSZ03 -0.8026495  0.0068745  -116.757  &lt; 2e-16 ***\nDESTIN_SZKLSZ04 -1.2918594  0.0090197  -143.227  &lt; 2e-16 ***\nDESTIN_SZKLSZ05 -0.4069101  0.0087812   -46.339  &lt; 2e-16 ***\nDESTIN_SZKLSZ06 -2.5333101  0.0363215   -69.747  &lt; 2e-16 ***\nDESTIN_SZKLSZ07 -0.6623343  0.0070761   -93.601  &lt; 2e-16 ***\nDESTIN_SZKLSZ08 -0.1408205  0.0054965   -25.620  &lt; 2e-16 ***\nDESTIN_SZLKSZ01 -1.2639235  0.0208254   -60.691  &lt; 2e-16 ***\nDESTIN_SZMDSZ01 -1.5655800  0.0202787   -77.203  &lt; 2e-16 ***\nDESTIN_SZMDSZ02 -0.9767682  0.0114687   -85.168  &lt; 2e-16 ***\nDESTIN_SZMDSZ03 -3.3328109  0.0254294  -131.061  &lt; 2e-16 ***\nDESTIN_SZMPSZ01 -0.4552859  0.0080666   -56.441  &lt; 2e-16 ***\nDESTIN_SZMPSZ02 -0.5386560  0.0064620   -83.358  &lt; 2e-16 ***\nDESTIN_SZMPSZ03  0.4952000  0.0052295    94.694  &lt; 2e-16 ***\nDESTIN_SZMUSZ02 -1.4434175  0.0202509   -71.277  &lt; 2e-16 ***\nDESTIN_SZNTSZ01 -2.9194067  0.0449654   -64.926  &lt; 2e-16 ***\nDESTIN_SZNTSZ02 -1.3780179  0.0112867  -122.092  &lt; 2e-16 ***\nDESTIN_SZNTSZ03 -0.5044699  0.0080449   -62.707  &lt; 2e-16 ***\nDESTIN_SZNTSZ05 -2.0017134  0.0258750   -77.361  &lt; 2e-16 ***\nDESTIN_SZNTSZ06 -3.8120537  0.0434271   -87.781  &lt; 2e-16 ***\nDESTIN_SZNVSZ01 -0.1071506  0.0051026   -20.999  &lt; 2e-16 ***\nDESTIN_SZNVSZ02 -0.0274710  0.0057611    -4.768 1.86e-06 ***\nDESTIN_SZNVSZ03  0.1076352  0.0057909    18.587  &lt; 2e-16 ***\nDESTIN_SZNVSZ04 -1.2087250  0.0110438  -109.448  &lt; 2e-16 ***\nDESTIN_SZNVSZ05 -1.0058290  0.0092167  -109.131  &lt; 2e-16 ***\nDESTIN_SZPGSZ01 -1.2029931  0.0163170   -73.726  &lt; 2e-16 ***\nDESTIN_SZPGSZ02 -1.2878671  0.0074139  -173.709  &lt; 2e-16 ***\nDESTIN_SZPGSZ03 -0.1520894  0.0048629   -31.275  &lt; 2e-16 ***\nDESTIN_SZPGSZ04 -0.1985959  0.0050374   -39.424  &lt; 2e-16 ***\nDESTIN_SZPGSZ05 -1.5290983  0.0082617  -185.083  &lt; 2e-16 ***\nDESTIN_SZPLSZ01 -0.3567934  0.0074298   -48.022  &lt; 2e-16 ***\nDESTIN_SZPLSZ02 -1.7114351  0.0134462  -127.280  &lt; 2e-16 ***\nDESTIN_SZPLSZ03 -0.3241427  0.0098895   -32.776  &lt; 2e-16 ***\nDESTIN_SZPLSZ04 -1.7117196  0.0119003  -143.838  &lt; 2e-16 ***\nDESTIN_SZPLSZ05 -0.5086379  0.0120051   -42.368  &lt; 2e-16 ***\nDESTIN_SZPNSZ01  0.2026781  0.0068977    29.383  &lt; 2e-16 ***\nDESTIN_SZPNSZ02  0.8313754  0.0078544   105.848  &lt; 2e-16 ***\nDESTIN_SZPNSZ03 -0.4041254  0.0086586   -46.673  &lt; 2e-16 ***\nDESTIN_SZPNSZ04  1.5814539  0.0093641   168.885  &lt; 2e-16 ***\nDESTIN_SZPNSZ05  1.1823430  0.0129843    91.059  &lt; 2e-16 ***\nDESTIN_SZPRSZ01 -1.1057553  0.0088197  -125.374  &lt; 2e-16 ***\nDESTIN_SZPRSZ02  0.0895099  0.0056308    15.897  &lt; 2e-16 ***\nDESTIN_SZPRSZ03  0.6921925  0.0043977   157.397  &lt; 2e-16 ***\nDESTIN_SZPRSZ04 -0.2848336  0.0084725   -33.619  &lt; 2e-16 ***\nDESTIN_SZPRSZ05  0.1744480  0.0053553    32.575  &lt; 2e-16 ***\nDESTIN_SZPRSZ06  0.4279206  0.0058735    72.856  &lt; 2e-16 ***\nDESTIN_SZPRSZ07 -1.5123108  0.0124303  -121.664  &lt; 2e-16 ***\nDESTIN_SZPRSZ08 -0.5650226  0.0068530   -82.449  &lt; 2e-16 ***\nDESTIN_SZQTSZ01 -0.5952360  0.0090505   -65.769  &lt; 2e-16 ***\nDESTIN_SZQTSZ02 -0.7728170  0.0078910   -97.937  &lt; 2e-16 ***\nDESTIN_SZQTSZ03 -0.5066812  0.0073996   -68.474  &lt; 2e-16 ***\nDESTIN_SZQTSZ04 -0.6398414  0.0075411   -84.847  &lt; 2e-16 ***\nDESTIN_SZQTSZ05 -0.4354527  0.0069345   -62.795  &lt; 2e-16 ***\nDESTIN_SZQTSZ06 -0.6597391  0.0071919   -91.733  &lt; 2e-16 ***\nDESTIN_SZQTSZ07 -0.9392696  0.0112518   -83.477  &lt; 2e-16 ***\nDESTIN_SZQTSZ08  0.4617774  0.0057011    80.998  &lt; 2e-16 ***\nDESTIN_SZQTSZ09 -0.3174497  0.0065890   -48.178  &lt; 2e-16 ***\nDESTIN_SZQTSZ10  0.1993449  0.0059923    33.267  &lt; 2e-16 ***\nDESTIN_SZQTSZ11  0.2551535  0.0061885    41.230  &lt; 2e-16 ***\nDESTIN_SZQTSZ12 -0.1662603  0.0086701   -19.176  &lt; 2e-16 ***\nDESTIN_SZQTSZ13  0.5500978  0.0063091    87.192  &lt; 2e-16 ***\nDESTIN_SZQTSZ14  0.5364435  0.0070157    76.463  &lt; 2e-16 ***\nDESTIN_SZQTSZ15  1.3611043  0.0081643   166.715  &lt; 2e-16 ***\nDESTIN_SZRCSZ01 -0.1034049  0.0076769   -13.470  &lt; 2e-16 ***\nDESTIN_SZRCSZ06 -1.0633902  0.0189846   -56.013  &lt; 2e-16 ***\nDESTIN_SZRVSZ01 -1.5486221  0.0165272   -93.701  &lt; 2e-16 ***\nDESTIN_SZRVSZ02 -2.4092611  0.0326906   -73.699  &lt; 2e-16 ***\nDESTIN_SZRVSZ03 -1.5172079  0.0139258  -108.950  &lt; 2e-16 ***\nDESTIN_SZRVSZ04 -1.1663615  0.0157430   -74.088  &lt; 2e-16 ***\nDESTIN_SZRVSZ05 -2.2404292  0.0281339   -79.634  &lt; 2e-16 ***\nDESTIN_SZSBSZ01 -1.3783780  0.0096022  -143.549  &lt; 2e-16 ***\nDESTIN_SZSBSZ02 -1.4445213  0.0081630  -176.959  &lt; 2e-16 ***\nDESTIN_SZSBSZ03  0.5149906  0.0051663    99.683  &lt; 2e-16 ***\nDESTIN_SZSBSZ04  0.2389086  0.0060765    39.317  &lt; 2e-16 ***\nDESTIN_SZSBSZ05 -1.2737442  0.0082818  -153.801  &lt; 2e-16 ***\nDESTIN_SZSBSZ06 -1.8683520  0.0227277   -82.206  &lt; 2e-16 ***\nDESTIN_SZSBSZ07 -0.5993154  0.0184895   -32.414  &lt; 2e-16 ***\nDESTIN_SZSBSZ08  0.8156302  0.0059840   136.302  &lt; 2e-16 ***\nDESTIN_SZSBSZ09  0.0900611  0.0057054    15.785  &lt; 2e-16 ***\nDESTIN_SZSESZ02 -0.6397704  0.0052491  -121.882  &lt; 2e-16 ***\nDESTIN_SZSESZ03  0.1714103  0.0042357    40.468  &lt; 2e-16 ***\nDESTIN_SZSESZ04 -1.0596175  0.0059865  -177.002  &lt; 2e-16 ***\nDESTIN_SZSESZ05 -0.8071891  0.0051229  -157.566  &lt; 2e-16 ***\nDESTIN_SZSESZ06 -0.5580934  0.0066216   -84.284  &lt; 2e-16 ***\nDESTIN_SZSESZ07 -3.1448863  0.0227788  -138.062  &lt; 2e-16 ***\nDESTIN_SZSGSZ01 -0.1795225  0.0060127   -29.857  &lt; 2e-16 ***\nDESTIN_SZSGSZ02 -0.2986570  0.0053561   -55.760  &lt; 2e-16 ***\nDESTIN_SZSGSZ03 -0.4074671  0.0050609   -80.513  &lt; 2e-16 ***\nDESTIN_SZSGSZ04 -0.1505164  0.0050931   -29.553  &lt; 2e-16 ***\nDESTIN_SZSGSZ05 -1.9908372  0.0101448  -196.242  &lt; 2e-16 ***\nDESTIN_SZSGSZ06  0.6715268  0.0041161   163.148  &lt; 2e-16 ***\nDESTIN_SZSGSZ07 -0.4494757  0.0055319   -81.252  &lt; 2e-16 ***\nDESTIN_SZSISZ01 -0.5517983  0.0261860   -21.072  &lt; 2e-16 ***\nDESTIN_SZSKSZ01 -0.4749154  0.0079257   -59.921  &lt; 2e-16 ***\nDESTIN_SZSKSZ02  0.9400302  0.0057218   164.290  &lt; 2e-16 ***\nDESTIN_SZSKSZ03 -0.2800377  0.0066081   -42.378  &lt; 2e-16 ***\nDESTIN_SZSKSZ04 -1.2570212  0.0145351   -86.482  &lt; 2e-16 ***\nDESTIN_SZSKSZ05 -0.2600474  0.0112800   -23.054  &lt; 2e-16 ***\nDESTIN_SZSLSZ01 -0.7775604  0.0085818   -90.606  &lt; 2e-16 ***\nDESTIN_SZSLSZ04 -0.8586515  0.0073142  -117.396  &lt; 2e-16 ***\nDESTIN_SZSRSZ01 -1.1370887  0.0142148   -79.993  &lt; 2e-16 ***\nDESTIN_SZTHSZ01 -4.3259988  0.0368554  -117.378  &lt; 2e-16 ***\nDESTIN_SZTHSZ03 -2.6632914  0.0252720  -105.385  &lt; 2e-16 ***\nDESTIN_SZTHSZ04 -3.1000906  0.0216372  -143.276  &lt; 2e-16 ***\nDESTIN_SZTHSZ06 -2.5952642  0.0156340  -166.001  &lt; 2e-16 ***\nDESTIN_SZTMSZ01 -0.2092828  0.0059257   -35.318  &lt; 2e-16 ***\nDESTIN_SZTMSZ02  1.8238139  0.0039155   465.798  &lt; 2e-16 ***\nDESTIN_SZTMSZ03  0.8518259  0.0043636   195.210  &lt; 2e-16 ***\nDESTIN_SZTMSZ04  1.0222812  0.0043466   235.191  &lt; 2e-16 ***\nDESTIN_SZTMSZ05  0.6323777  0.0060058   105.294  &lt; 2e-16 ***\nDESTIN_SZTNSZ01 -0.3336078  0.0074388   -44.847  &lt; 2e-16 ***\nDESTIN_SZTNSZ02 -1.0820469  0.0101689  -106.408  &lt; 2e-16 ***\nDESTIN_SZTNSZ03 -1.4186505  0.0119906  -118.313  &lt; 2e-16 ***\nDESTIN_SZTNSZ04 -0.3058199  0.0074743   -40.916  &lt; 2e-16 ***\nDESTIN_SZTPSZ01 -0.4872299  0.0061571   -79.133  &lt; 2e-16 ***\nDESTIN_SZTPSZ02  0.7158441  0.0041312   173.278  &lt; 2e-16 ***\nDESTIN_SZTPSZ03 -0.4314229  0.0059917   -72.004  &lt; 2e-16 ***\nDESTIN_SZTPSZ04 -1.5898245  0.0076083  -208.959  &lt; 2e-16 ***\nDESTIN_SZTPSZ05 -1.0445550  0.0062363  -167.497  &lt; 2e-16 ***\nDESTIN_SZTPSZ06 -0.4319582  0.0070100   -61.621  &lt; 2e-16 ***\nDESTIN_SZTPSZ07 -2.1602303  0.0120352  -179.493  &lt; 2e-16 ***\nDESTIN_SZTPSZ08 -1.1920493  0.0093083  -128.063  &lt; 2e-16 ***\nDESTIN_SZTPSZ09 -0.2022481  0.0071137   -28.431  &lt; 2e-16 ***\nDESTIN_SZTPSZ10 -1.2464793  0.0090124  -138.308  &lt; 2e-16 ***\nDESTIN_SZTPSZ11 -0.0808445  0.0056019   -14.432  &lt; 2e-16 ***\nDESTIN_SZTPSZ12 -0.6784376  0.0066340  -102.267  &lt; 2e-16 ***\nDESTIN_SZTSSZ01 -1.5845062  0.0222086   -71.346  &lt; 2e-16 ***\nDESTIN_SZTSSZ02 -0.1886010  0.0146338   -12.888  &lt; 2e-16 ***\nDESTIN_SZTSSZ03  0.6525526  0.0092450    70.585  &lt; 2e-16 ***\nDESTIN_SZTSSZ04  0.5285464  0.0100182    52.759  &lt; 2e-16 ***\nDESTIN_SZTSSZ05  1.4670106  0.0104357   140.577  &lt; 2e-16 ***\nDESTIN_SZTSSZ06  2.5043588  0.0167444   149.564  &lt; 2e-16 ***\nDESTIN_SZWCSZ01  1.9787931  0.0054306   364.375  &lt; 2e-16 ***\nDESTIN_SZWCSZ02 -2.2593108  0.0127916  -176.624  &lt; 2e-16 ***\nDESTIN_SZWCSZ03 -3.1897655  0.0326927   -97.568  &lt; 2e-16 ***\nDESTIN_SZWDSZ01  1.0476108  0.0044629   234.738  &lt; 2e-16 ***\nDESTIN_SZWDSZ02 -1.3176990  0.0065894  -199.973  &lt; 2e-16 ***\nDESTIN_SZWDSZ03  0.3432057  0.0052496    65.377  &lt; 2e-16 ***\nDESTIN_SZWDSZ04 -0.7895927  0.0073392  -107.586  &lt; 2e-16 ***\nDESTIN_SZWDSZ05 -0.8751665  0.0072946  -119.975  &lt; 2e-16 ***\nDESTIN_SZWDSZ06 -0.2106221  0.0053027   -39.720  &lt; 2e-16 ***\nDESTIN_SZWDSZ07 -1.6050834  0.0071754  -223.692  &lt; 2e-16 ***\nDESTIN_SZWDSZ08 -0.5124717  0.0069223   -74.032  &lt; 2e-16 ***\nDESTIN_SZWDSZ09  0.3813542  0.0054697    69.721  &lt; 2e-16 ***\nDESTIN_SZYSSZ01  0.0853753  0.0046572    18.332  &lt; 2e-16 ***\nDESTIN_SZYSSZ02 -0.3227172  0.0057351   -56.271  &lt; 2e-16 ***\nDESTIN_SZYSSZ03 -0.4151283  0.0066299   -62.615  &lt; 2e-16 ***\nDESTIN_SZYSSZ04 -0.4637327  0.0058206   -79.671  &lt; 2e-16 ***\nDESTIN_SZYSSZ05 -1.5888242  0.0111001  -143.136  &lt; 2e-16 ***\nDESTIN_SZYSSZ06 -1.4606209  0.0107759  -135.545  &lt; 2e-16 ***\nDESTIN_SZYSSZ07 -0.7839065  0.0144357   -54.304  &lt; 2e-16 ***\nDESTIN_SZYSSZ08  0.6265412  0.0045504   137.691  &lt; 2e-16 ***\nDESTIN_SZYSSZ09  0.1520067  0.0048092    31.607  &lt; 2e-16 ***\nlog(DIST)       -1.8468315  0.0004608 -4008.033  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 47094011  on 14470  degrees of freedom\nResidual deviance: 10420261  on 13912  degrees of freedom\nAIC: 10510518\n\nNumber of Fisher Scoring iterations: 7\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nglm from stats package is used to fit generalized linear models. In this code, a Poisson regression model is specified using the formula TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(DIST), with family = poisson(link = \"log\"). This sets up a model where TRIPS is the dependent variable, and ORIGIN_SZ, DESTIN_SZ, and the logarithm of DIST are independent variables.\ndata = inter_zonal_flow specifies that the model should be fitted using the inter_zonal_flow dataset.\nna.action = na.exclude instructs the model to exclude cases with missing values (NAs) in the model fitting process.\nsummary from base R provides a detailed summary of the fitted model dbcSIM_Poisson. This includes information about the model coefficients, their statistical significance, residuals, and other diagnostic measures.\nThe #| echo: false directive at the start indicates that this code chunk is executed but not displayed in the output when rendered in a document like an R Markdown report.\n\n\n\n\nNext, let us examine how well the proportion of variance in the dependent variable (i.e. TRIPS) that can be explained by the explanatory variables. Using the R-Squared function written earlier, compute the R-Squared of the Doubly-constrined Model.\n\n\nCode\nCalcRSquared(dbcSIM_Poisson$data$TRIPS,\n             dbcSIM_Poisson$fitted.values)\n\n\n[1] 0.7001882\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nThe custom function CalcRSquared, defined earlier, is used here to calculate the coefficient of determination (R-squared). This statistical measure indicates how well the estimated values (dbcSIM_Poisson$fitted.values) approximate the actual, observed values (dbcSIM_Poisson$data$TRIPS).\nIn this code, dbcSIM_Poisson$data$TRIPS refers to the actual observed values of trips, and dbcSIM_Poisson$fitted.values refers to the values estimated by the dbcSIM_Poisson generalized linear model.\nThe function call CalcRSquared(dbcSIM_Poisson$data$TRIPS, dbcSIM_Poisson$fitted.values) computes the R-squared value, which quantifies the proportion of variance in the observed data that can be explained by the model’s estimated values.\n\n\n\n\n\nNotice that there is a relatively greater improvement in the R-Squared value."
  },
  {
    "objectID": "in-class/ice4.html#model-comparison",
    "href": "in-class/ice4.html#model-comparison",
    "title": "In-class Exercise 4 - Geospatial Data Science and Spatial Interaction Model with R",
    "section": "2.5 Model comparison",
    "text": "2.5 Model comparison\n\n2.5.1 Statistical measures\nAnother useful model performance measure for continuous dependent variable is Root Mean Squared Error. In this sub-section, you will learn how to use compare_performance() of performance package\nFirst of all, create a list called model_list by using the code chunk below.\n\n\nCode\nmodel_list &lt;- list(\n  Origin_Constrained = orcSIM_Poisson,\n  Doubly_Constrained = dbcSIM_Poisson)\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\nlist from base R is a generic function to create lists. In this code, model_list is created to store different model objects: Origin_Constrained stores the orcSIM_Poisson model, and Doubly_Constrained stores the dbcSIM_Poisson model.\n\n\n\nNext, compute the RMSE of all the models in model_list file by using the code chunk below.\n\n\nCode\ncompare_performance(model_list,\n                    metrics = \"RMSE\")\n\n\n# Comparison of Model Performance Indices\n\nName               | Model |     RMSE\n-------------------------------------\nOrigin_Constrained |   glm | 2613.236\nDoubly_Constrained |   glm | 1906.694\n\n\nThe print above reveals that doubly constrained SIM is the best model among the two SIMs because it has the smallest RMSE value of 1906.694.\n\n\n2.5.2 Visualising fitted values\nIn this section, visualise the observed values and the fitted values.\nFirstly we will extract the fitted values from Origin-constrained Model by using the code chunk below.\n\n\nCode\ndf &lt;- as.data.frame(orcSIM_Poisson$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nNext, append the fitted values into inter_zonal_flow data frame by using the code chunk below.\n\n\nCode\ninter_zonal_flow &lt;- inter_zonal_flow %&gt;%\n  cbind(df) %&gt;%\n  rename(orcTRIPS = \"orcSIM_Poisson.fitted.values\")\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\ncbind from base R combines data frames or matrices by columns. In this code, it’s used to add the columns from df to inter_zonal_flow.\nrename from dplyr package changes the name of a specific column in a data frame. Here, the column named orcSIM_Poisson.fitted.values in the merged data frame is renamed to orcTRIPS. Notice that rename() is used to rename the field name and the $ in the original field name has been replaced with an .. This is because R replaced $ with . during the cbind().\n\n\n\n\nRepeat the same step for Doubly Constrained Model (i.e. dbcSIM_Poisson)\n\n\nCode\ndf &lt;- as.data.frame(dbcSIM_Poisson$fitted.values) %&gt;%\n  round(digits = 0)\n\n\n\n\nCode\ninter_zonal_flow &lt;- inter_zonal_flow %&gt;%\n  cbind(df) %&gt;%\n  rename(dbcTRIPS = \"dbcSIM_Poisson.fitted.values\")\n\n\nNext, two scatterplots will be created by using geom_point() and other appropriate functions of ggplot2 package. And be put into a single visual for better comparison.\n\n\nCode\norc_p &lt;- ggplot(data = inter_zonal_flow,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  coord_cartesian(xlim=c(0,150000),\n                  ylim=c(0,150000))\n\ndbc_p &lt;- ggplot(data = inter_zonal_flow,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  coord_cartesian(xlim=c(0,150000),\n                  ylim=c(0,150000))\n\nggarrange(orc_p, dbc_p,\n          ncol = 2,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nggplot from ggplot2 package creates a new ggplot graph, specifying its aesthetic mappings. In this code, ggplot is used twice to create two plots (orc_p and dbc_p), each with different x-axis variables (orcTRIPS for orc_p, dbcTRIPS for dbc_p) but the same y-axis variable (TRIPS).\ngeom_point from ggplot2 package adds a scatterplot layer to the ggplot.\ngeom_smooth from ggplot2 package adds a smoothed line to the plot, here using a linear model (lm method) for fitting.\ncoord_cartesian from ggplot2 package sets the limits for the x and y axes without changing the scale. Both plots have their axes limited to the range of 0 to 150,000.\nThe code snippets create two plots comparing the fitted values from two different models (orcSIM_Poisson and dbcSIM_Poisson) against observed trips (TRIPS), with scatter plots and linear regression lines.\n\n\n\n\n\n\n\n\n\n\nQuiz Answer\n\n\n\nFrom the figure, the left graph shows the relationship between the observed trips (TRIPS) and the estimated trips from the Origin constrained model (orcTRIPS). The dispersion of points and the less pronounced trend line suggest that the model does not predict the observed trips as accurately. The right graph, showing the relationship between observed trips (TRIPS) and the estimated trips from the Doubly Constrained Model (dbcTRIPS), displays a much tighter alignment of points along the trend line, indicating a more accurate prediction of the observed trips.\nThe follow-up action would be to further investigate the Doubly Constrained Model since it appears to be more effective at predicting trip patterns. This could involve examining the underlying assumptions of the model, the parameters used, and possibly applying it to another set of data for validation purposes. It would also be prudent to look into the reasons why the Origin constrained model performs less accurately to understand the limitations or potential areas for model improvement."
  },
  {
    "objectID": "take-home/the1.html",
    "href": "take-home/the1.html",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "",
    "text": "Illustration"
  },
  {
    "objectID": "take-home/the1.html#import-library",
    "href": "take-home/the1.html#import-library",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "2.1 Import Library",
    "text": "2.1 Import Library\n\npacman::p_load(tmap, sf, tidyverse, sfdep, knitr, Hmisc, mapview, DT)\n\nExplanations for the imported library:\n\ntmap for visualizing geospatial\nsf for handling geospatial data\ntidyverse for handling aspatial data\nsfdep for computing spatial weights, global and local spatial autocorrelation statistics, and\nknitr for creating html tables\nHmisc for summary statistics\nmapview for interactive map backgrouds\nDT library to create interactive html tables"
  },
  {
    "objectID": "take-home/the1.html#import-and-setup-the-data",
    "href": "take-home/the1.html#import-and-setup-the-data",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "2.2 Import and Setup the Data",
    "text": "2.2 Import and Setup the Data\n\nAspatial\nthe following code will import all the origin destination bus data and check a sample dataframe. The process involved:\n\nimport the csv file using read_csv function from readr package\nusing mutate from dplyr package, transform georeference data type into factors for easing compatibility issue and more efficient processing.\nusing describe from hmisc package, display the summary statistics of the dataset.\n\n\nAugust 2023September 2023October 2023\n\n\n\n\nCode\n# Load each csv file\nodb8 &lt;- read_csv(\"../data/aspatial/origin_destination_bus_202308.csv.gz\")\n\n# change georeference data type into factors\nodb8 &lt;- odb8 %&gt;%\n  mutate(\n    ORIGIN_PT_CODE = as.factor(ORIGIN_PT_CODE),\n    DESTINATION_PT_CODE = as.factor(DESTINATION_PT_CODE)\n  )\n\n# check the dataframe\ndescribe(odb8)\n\n\nodb8 \n\n 7  Variables      5709512  Observations\n--------------------------------------------------------------------------------\nYEAR_MONTH \n       n  missing distinct    value \n 5709512        0        1  2023-08 \n                  \nValue      2023-08\nFrequency  5709512\nProportion       1\n--------------------------------------------------------------------------------\nDAY_TYPE \n       n  missing distinct \n 5709512        0        2 \n                                            \nValue               WEEKDAY WEEKENDS/HOLIDAY\nFrequency           3279836          2429676\nProportion            0.574            0.426\n--------------------------------------------------------------------------------\nTIME_PER_HOUR \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n 5709512        0       24    0.997    14.07    5.949        6        7 \n     .25      .50      .75      .90      .95 \n      10       14       18       21       22 \n\nlowest :  0  1  2  3  4, highest: 19 20 21 22 23\n--------------------------------------------------------------------------------\nPT_TYPE \n       n  missing distinct    value \n 5709512        0        1      BUS \n                  \nValue          BUS\nFrequency  5709512\nProportion       1\n--------------------------------------------------------------------------------\nORIGIN_PT_CODE \n       n  missing distinct \n 5709512        0     5067 \n\nlowest : 01012 01013 01019 01029 01039, highest: 99139 99161 99171 99181 99189\n--------------------------------------------------------------------------------\nDESTINATION_PT_CODE \n       n  missing distinct \n 5709512        0     5071 \n\nlowest : 01012 01013 01019 01029 01039, highest: 99139 99161 99171 99181 99189\n--------------------------------------------------------------------------------\nTOTAL_TRIPS \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n 5709512        0     3544    0.982    21.04    33.59        1        1 \n     .25      .50      .75      .90      .95 \n       2        4       13       38       74 \n\nlowest :     1     2     3     4     5, highest: 30799 31669 32508 33424 35049\n--------------------------------------------------------------------------------\n\n\n\n\n\n\nCode\n# Load each csv file\nodb9 &lt;- read_csv(\"../data/aspatial/origin_destination_bus_202309.csv.gz\")\n\n# change georeference data type into factors\nodb9 &lt;- odb9 %&gt;%\n  mutate(\n    ORIGIN_PT_CODE = as.factor(ORIGIN_PT_CODE),\n    DESTINATION_PT_CODE = as.factor(DESTINATION_PT_CODE)\n  )\n\n\n# check the dataframe\ndescribe(odb9)\n\n\nodb9 \n\n 7  Variables      5714196  Observations\n--------------------------------------------------------------------------------\nYEAR_MONTH \n       n  missing distinct    value \n 5714196        0        1  2023-09 \n                  \nValue      2023-09\nFrequency  5714196\nProportion       1\n--------------------------------------------------------------------------------\nDAY_TYPE \n       n  missing distinct \n 5714196        0        2 \n                                            \nValue               WEEKDAY WEEKENDS/HOLIDAY\nFrequency           3183300          2530896\nProportion            0.557            0.443\n--------------------------------------------------------------------------------\nTIME_PER_HOUR \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n 5714196        0       23    0.997    14.06     5.94        6        7 \n     .25      .50      .75      .90      .95 \n      10       14       18       21       22 \n\nlowest :  0  1  2  4  5, highest: 19 20 21 22 23\n--------------------------------------------------------------------------------\nPT_TYPE \n       n  missing distinct    value \n 5714196        0        1      BUS \n                  \nValue          BUS\nFrequency  5714196\nProportion       1\n--------------------------------------------------------------------------------\nORIGIN_PT_CODE \n       n  missing distinct \n 5714196        0     5067 \n\nlowest : 01012 01013 01019 01029 01039, highest: 99139 99161 99171 99181 99189\n--------------------------------------------------------------------------------\nDESTINATION_PT_CODE \n       n  missing distinct \n 5714196        0     5072 \n\nlowest : 01012 01013 01019 01029 01039, highest: 99139 99161 99171 99181 99189\n--------------------------------------------------------------------------------\nTOTAL_TRIPS \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n 5714196        0     3274    0.981    19.59    31.01        1        1 \n     .25      .50      .75      .90      .95 \n       2        4       12       35       69 \n\nlowest :     1     2     3     4     5, highest: 27356 28248 28510 30096 31674\n--------------------------------------------------------------------------------\n\n\n\n\n\n\nCode\n# Load each csv file\nodb10 &lt;- read_csv(\"../data/aspatial/origin_destination_bus_202310.csv.gz\")\n\n# change georeference data type into factors\nodb10 &lt;- odb10 %&gt;%\n  mutate(\n    ORIGIN_PT_CODE = as.factor(ORIGIN_PT_CODE),\n    DESTINATION_PT_CODE = as.factor(DESTINATION_PT_CODE)\n  )\n\n# check the dataframe\ndescribe(odb10)\n\n\nodb10 \n\n 7  Variables      5694297  Observations\n--------------------------------------------------------------------------------\nYEAR_MONTH \n       n  missing distinct    value \n 5694297        0        1  2023-10 \n                  \nValue      2023-10\nFrequency  5694297\nProportion       1\n--------------------------------------------------------------------------------\nDAY_TYPE \n       n  missing distinct \n 5694297        0        2 \n                                            \nValue               WEEKDAY WEEKENDS/HOLIDAY\nFrequency           3259419          2434878\nProportion            0.572            0.428\n--------------------------------------------------------------------------------\nTIME_PER_HOUR \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n 5694297        0       23    0.997    14.04    5.933        6        7 \n     .25      .50      .75      .90      .95 \n      10       14       18       21       22 \n\nlowest :  0  1  2  4  5, highest: 19 20 21 22 23\n--------------------------------------------------------------------------------\nPT_TYPE \n       n  missing distinct    value \n 5694297        0        1      BUS \n                  \nValue          BUS\nFrequency  5694297\nProportion       1\n--------------------------------------------------------------------------------\nORIGIN_PT_CODE \n       n  missing distinct \n 5694297        0     5073 \n\nlowest : 01012 01013 01019 01029 01039, highest: 99139 99161 99171 99181 99189\n--------------------------------------------------------------------------------\nDESTINATION_PT_CODE \n       n  missing distinct \n 5694297        0     5077 \n\nlowest : 01012 01013 01019 01029 01039, highest: 99139 99161 99171 99181 99189\n--------------------------------------------------------------------------------\nTOTAL_TRIPS \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n 5694297        0     3495    0.982    20.76    33.13        1        1 \n     .25      .50      .75      .90      .95 \n       2        4       12       37       73 \n\nlowest :     1     2     3     4     5, highest: 30985 31349 32355 35931 36668\n--------------------------------------------------------------------------------\n\n\n\n\n\nExplanations for each field in the data can be found in the following metadata.\n\n\n\n\n\n\nmetadata\n\n\n\n\n\n\nYEAR_MONTH: Represent year and Month in which the data is collected. Since it is a monthly data frame, only one unique value exist in each data frame.\nDAY_TYPE: Represent type of the day which classified as weekdays or weekends/holidays.\nTIME_PER_HOUR: Hour which the passenger trip is based on, in intervals from 0 to 23 hours.\nPT_TYPE: Type of public transport, Since it is bus data sets, only one unique value exist in each data frame (i.e. bus)\nORIGIN_PT_CODE: ID of origin bus stop\nDESTINATION_PT_CODE: ID of destination bus stop\nTOTAL_TRIPS: Number of trips which represent passenger volumes\n\n\n\n\n\n\nGeospatial\nthe following panel show the import process for the bus stop geospatial data. The geospatial layer of the data shows point location of bus stops across Singapore.\n\nImport and Check the DataSetup EPSG Code, CRS and Prepare the data for joining\n\n\nThe geospatial data is imported using st_read function from sf package. As previously done, while reading the data, categorical data that can serve as reference are converted into factors for easing compatibility issue and more efficient processing. The imported dataset is then checked using glimpse function from dplyr package that shows the columns, a glimpse of the values and the data type.\n\nbusstop &lt;- st_read(\n    dsn = \"../data/geospatial\",\n    layer = \"BusStop\"\n  ) %&gt;%\n  mutate(\n    BUS_STOP_N = as.factor(BUS_STOP_N),\n    BUS_ROOF_N = as.factor(BUS_ROOF_N),\n    LOC_DESC = as.factor(LOC_DESC)\n  )\n\nReading layer `BusStop' from data source `C:\\ameernoor\\ISSS624\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n# check the output\nglimpse(busstop)\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;fct&gt; 22069, 32071, 44331, 96081, 11561, 66191, 23389, 54411, 285…\n$ BUS_ROOF_N &lt;fct&gt; B06, B23, B01, B05, B05, B03, B02A, B02, B09, B01, B16, B02…\n$ LOC_DESC   &lt;fct&gt; OPP CEVA LOGISTICS, AFT TRACK 13, BLK 239, GRACE INDEPENDEN…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\n\nCheck the unique values\nTo see more of the data characteristics, the following panel will show the number of distinct values in each column. it use n_distinct function from dplyr package.\n\nBUS_STOP_NBUS_ROOF_NLOC_DESCgeometry\n\n\ncount of unique/distinct values are:\n\n\nCode\nn_distinct(busstop$BUS_STOP_N)\n\n\n[1] 5145\n\n\n\n\ncount of unique/distinct values are:\n\n\nCode\nn_distinct(busstop$BUS_ROOF_N)\n\n\n[1] 97\n\n\n\n\ncount of unique/distinct values are:\n\n\nCode\nn_distinct(busstop$LOC_DESC)\n\n\n[1] 4559\n\n\n\n\ncount of unique/distinct values are:\n\n\nCode\nn_distinct(busstop$geometry)\n\n\n[1] 5160\n\n\n\n\n\nExplanations for each field in the data can be found in the following metadata.\n\n\n\n\n\n\nmetadata\n\n\n\n\n\n\nBUS_STOP_N: The unique identifier for each bus stop.\nBUS_ROOF_N: The identifier for the bus route or roof associated with the bus stop.\nLOC_DESC: Location description providing additional information about the bus stop’s surroundings.\ngeometry: The spatial information representing the location of each bus stop as a point in the SVY21 projected coordinate reference system.\n\n\n\n\n\n\n\nTo ensure that geospatial data from different sources can be processed together, both have to be projected using similar coordinate systems and be assigned the correct EPSG code based on CRS. The st_crs function is used to check for ESPG Code and Coordinate System of both geospatial files. For Singapore, the coordinate system is SVY21 with EPSG 3414 (source: epsg.io). The following code chunk output shows how the CRS was initially not 3414, then corrected using st_set_crs. Both function are from sf package. Simultaneously, the dataframe is also prepared for joining process. It involve standardization of the data type to factor and using tolower function from base R package.\nCurrent CRS of busstop dataset:\n\n\nCode\n# Check the current Coordinate Reference System (CRS) of the busstop dataset\nprint(st_crs(busstop))\n\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAssign new EPSG code\n\n# Assign a new EPSG code (Spatial Reference ID)\nbusstop &lt;- st_set_crs(\n   busstop, \n   3414\n) %&gt;%\n# Rename the bus stop origin column for easier joining with the main dataframe\nmutate(\n   ORIGIN_PT_CODE = as.factor(BUS_STOP_N)\n) %&gt;%\nselect(\n   ORIGIN_PT_CODE, \n   LOC_DESC,\n   geometry\n) %&gt;%\n# Change all column names to lowercase for consistency\nrename_with(\n   tolower, everything()\n)\n\nConfirm the updated EPSG code after the assignment\n\n\nCode\nprint(st_crs(busstop))\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "take-home/the1.html#check-for-duplicates",
    "href": "take-home/the1.html#check-for-duplicates",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "3.1 Check for Duplicates",
    "text": "3.1 Check for Duplicates\nIn this step, we inspect the dataset for duplicate entries. This precautionary step is crucial to avoid the inadvertent repetition of records, which could lead to the overcounting of passenger trips. By identifying and addressing duplicates at this stage, we ensure the accuracy and reliability of our analysis, laying the groundwork for more precise and trustworthy results in the subsequent analytical processes. Checking for duplicates is a fundamental practice that contributes to the integrity of the data and the overall robustness of the geospatial analysis.\n\nAspatial - Origin Destination BusGeospatial - Bus Stop\n\n\nthe following code is used to check duplicates and show how many duplicates exist in each odb.\n\n\nCode\n# Count the number of rows in each dataframe with duplicates\ncount_duplicate_rows &lt;- function(df, df_name) {\n  df %&gt;%\n    group_by_all() %&gt;%\n    filter(n() &gt; 1) %&gt;%\n    ungroup() %&gt;%\n    summarise(df_name = df_name, row_count = n())\n}\n\n# Apply the function to each dataframe\nduplicate1 &lt;- count_duplicate_rows(odb8, \"odb8\")\nduplicate2 &lt;- count_duplicate_rows(odb9, \"odb9\")\nduplicate3 &lt;- count_duplicate_rows(odb10, \"odb10\")\n\n# Combine the results\nall_duplicates &lt;- bind_rows(duplicate1, duplicate2, duplicate3)\n\n# Print the counts\nprint(all_duplicates)\n\n\n# A tibble: 3 × 2\n  df_name row_count\n  &lt;chr&gt;       &lt;int&gt;\n1 odb8            0\n2 odb9            0\n3 odb10           0\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\ngroup_by_all from dplyr package to group a data frame by all of its variables. Essentially, it creates groups based on every column present in the data frame.\nfilter from dplyr package to subset a data frame, retaining all rows that satisfy your conditions. To be retained, the row must produce a value of TRUE for all conditions.\nungroup from dplyr package to remove grouping information from a data frame. When you have a grouped data frame (created using functions like group_by), ungroup will return it to its original, ungrouped state. This is useful when you’ve finished performing grouped operations (like summarization) and want to perform operations that don’t require the data to be grouped, or to prevent accidental misinterpretation or errors in subsequent data manipulations that are not intended to be group-wise operations.\nfilter from dplyr package to subset a data frame, retaining all rows that satisfy your conditions. To be retained, the row must produce a value of TRUE for all conditions.\nsummarise from sf package used to compute summary statistics or aggregate values for groups of data. When used on spatial data frames (such as those handled by sf), summarise can perform operations like calculating the mean, maximum, or sum of a particular variable for each group. This function is often used in combination with group_by to define the groups for which the summary statistics will be calculated. The result is a simplified representation of the data, focusing on key aggregated metrics.\nbind_rows from dplyr package to to combine two or more data frames by rows. It stacks the data frames on top of each other, effectively appending the rows of the second data frame to the first, the third to the combined first and second, and so on. This function is particularly useful when you have multiple data frames with the same variables and you want to create a single, combined data frame. It’s important that the columns in the data frames are compatible, either having the same names and types, or being able to be coerced into the same type.\n\n\n\n\n\nThe result shows that there are no duplicated data in the origin destination bus dataset. Note that the checking was based on a very loose criteria of duplicate, in which duplicated rows need to have the same value across all columns.\n\n\n\nThe following codes\n\n\nCode\n# Subset rows where origin_pt_code has duplicates\nduplicates &lt;- busstop[duplicated(busstop$origin_pt_code) | duplicated(busstop$origin_pt_code, fromLast = TRUE), ]\n\n# Display the rows with duplicate origin_pt_code\nkable(head(duplicates, n=32))\n\n\n\n\n\n\norigin_pt_code\nloc_desc\ngeometry\n\n\n\n\n149\n58031\nOPP CANBERRA DR\nPOINT (27089.69 47570.9)\n\n\n166\n62251\nBef Blk 471B\nPOINT (35500.54 39943.41)\n\n\n278\n47201\nNA\nPOINT (22616.75 47793.68)\n\n\n338\n58031\nOPP CANBERRA DR\nPOINT (27111.07 47517.77)\n\n\n501\n22501\nBlk 662A\nPOINT (13489.09 35536.4)\n\n\n751\n82221\nBLK 3A\nPOINT (35323.6 33257.05)\n\n\n1321\n68091\nAFT BAKER ST\nPOINT (32164.11 42695.98)\n\n\n1609\n43709\nBLK 644\nPOINT (18963.42 36762.8)\n\n\n1937\n97079\nOPP ST. JOHN’S CRES\nPOINT (44144.57 38980.25)\n\n\n2035\n82221\nBlk 3A\nPOINT (35308.74 33335.17)\n\n\n2038\n97079\nOPP ST. JOHN’S CRES\nPOINT (44055.75 38908.5)\n\n\n2092\n22501\nBLK 662A\nPOINT (13488.02 35537.88)\n\n\n2237\n62251\nBEF BLK 471B\nPOINT (35500.36 39943.34)\n\n\n2656\n68099\nBEF BAKER ST\nPOINT (32154.9 42742.82)\n\n\n2773\n52059\nOPP BLK 65\nPOINT (30770.3 34460.06)\n\n\n2970\n67421\nCHENG LIM STN EXIT B\nPOINT (34548.54 42052.15)\n\n\n3126\n11009\nGhim Moh Ter\nPOINT (23101.34 32594.17)\n\n\n3156\n53041\nUpp Thomson Road\nPOINT (28105.8 37246.76)\n\n\n3158\n53041\nUpp Thomson Road\nPOINT (27956.34 37379.29)\n\n\n3255\n77329\nBEF PASIR RIS ST 53\nPOINT (40765.35 39452.18)\n\n\n3261\n77329\nPasir Ris Central\nPOINT (40728.15 39438.15)\n\n\n3264\n96319\nYusen Logistics\nPOINT (42187.23 34995.78)\n\n\n3265\n96319\nYUSEN LOGISTICS\nPOINT (42187.23 34995.78)\n\n\n3303\n52059\nBLK 219\nPOINT (30565.45 36133.15)\n\n\n3411\n43709\nBLK 644\nPOINT (18952.02 36751.83)\n\n\n3470\n51071\nMACRITCHIE RESERVOIR\nPOINT (28311.27 36036.92)\n\n\n3472\n51071\nMACRITCHIE RESERVOIR\nPOINT (28282.54 36033.93)\n\n\n3665\n11009\nGHIM MOH TER\nPOINT (23100.58 32604.36)\n\n\n3752\n68091\nAFT BAKER ST\nPOINT (32038.84 43298.68)\n\n\n3753\n68099\nBEF BAKER ST\nPOINT (32004.05 43320.34)\n\n\n4624\n47201\nW’LANDS NTH STN\nPOINT (22632.92 47934)\n\n\n5095\n67421\nCHENG LIM STN EXIT B\nPOINT (34741.77 42004.21)\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nduplicated from the base R package is used to identify duplicate elements in a vector or rows in a data frame. It returns a logical vector indicating which elements or rows are duplicates of elements or rows with smaller indices.\nkable from the knitr package creates simple tables from a data frame, matrix, or other table-like structures. The function provides a user-friendly way to display tables in a markdown format.\n\n\n\n\n\nThe result shows that there are some duplicated data in the geospatial bus stop dataset. This might interfere with the joining data process and generated double count on later on. Note that the checking was based on the origin_pt_code field only, because it will be the basis of reference for joining the dataset later on. At a glance, the table above also show that, the duplicated code are actually located near each other. Therefore, removing the duplicates can be considered safe as the remaining bus stop code can represent the deleted one.\n\nThe folowing code chunk will execute the duplicate removal and show the result where number of rows have reduced.\n\n\nCode\n# Keep one row of the duplicates in the original dataset\nbusstop &lt;- busstop[!duplicated(busstop$origin_pt_code) | duplicated(busstop$origin_pt_code, fromLast = TRUE), ]\n\n# Display the resulting dataset\nglimpse(busstop)\n\n\nRows: 5,145\nColumns: 3\n$ origin_pt_code &lt;fct&gt; 22069, 32071, 44331, 96081, 11561, 66191, 23389, 54411,…\n$ loc_desc       &lt;fct&gt; OPP CEVA LOGISTICS, AFT TRACK 13, BLK 239, GRACE INDEPE…\n$ geometry       &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.…"
  },
  {
    "objectID": "take-home/the1.html#categorical-peak-time-variable",
    "href": "take-home/the1.html#categorical-peak-time-variable",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "3.2 Categorical Peak Time Variable",
    "text": "3.2 Categorical Peak Time Variable\non the interest of analyzing the peak time, the following code will assign new column that categorize peak time, filter data that is not on peak time, and show a sample of the output.\n\n\nCode\n# Function to categorize and aggregate trips\ncategorize_and_aggregate &lt;- function(odb) {\n  odb &lt;- odb %&gt;%\n    # Categorize trips under periods based on day and timeframe\n    mutate(period = case_when(\n      DAY_TYPE == \"WEEKDAY\" & TIME_PER_HOUR &gt;= 6 & TIME_PER_HOUR &lt;= 9 ~ \"Weekday morning peak\",\n      DAY_TYPE == \"WEEKDAY\" & TIME_PER_HOUR &gt;= 17 & TIME_PER_HOUR &lt;= 20 ~ \"Weekday evening peak\",\n      DAY_TYPE == \"WEEKENDS/HOLIDAY\" & TIME_PER_HOUR &gt;= 11 & TIME_PER_HOUR &lt;= 14 ~ \"Weekend/holiday morning peak\",\n      DAY_TYPE == \"WEEKENDS/HOLIDAY\" & TIME_PER_HOUR &gt;= 16 & TIME_PER_HOUR &lt;= 19 ~ \"Weekend/holiday evening peak\",\n      TRUE ~ \"non-peak\"\n    )) %&gt;%\n    # Only retain needed periods for analysis\n    filter(period != \"non-peak\") %&gt;%\n    # Compute the number of trips per origin bus stop per month for each period\n    group_by(YEAR_MONTH, period, ORIGIN_PT_CODE) %&gt;%\n    summarise(num_trips = sum(TOTAL_TRIPS)) %&gt;%\n    # Change all column names to lowercase\n    rename_with(tolower, everything()) %&gt;%\n    ungroup()\n\n  return(odb)\n}\n\n# Apply the function to each dataset\nodb8 &lt;- categorize_and_aggregate(odb8)\nodb9 &lt;- categorize_and_aggregate(odb9)\nodb10 &lt;- categorize_and_aggregate(odb10)\n\n# sample the result\nglimpse(odb10)\n\n\nRows: 20,072\nColumns: 4\n$ year_month     &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", …\n$ period         &lt;chr&gt; \"Weekday evening peak\", \"Weekday evening peak\", \"Weekda…\n$ origin_pt_code &lt;fct&gt; 01012, 01013, 01019, 01029, 01039, 01059, 01109, 01112,…\n$ num_trips      &lt;dbl&gt; 8000, 7038, 3398, 9089, 12095, 2212, 276, 43513, 25769,…\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nmutate from dplyr package adds new variables or transforms existing ones. It’s often used in conjunction with functions like case_when for conditional transformation.\ncase_when from dplyr package is a vectorized form of multiple if_else statements, allowing for different computations or transformations based on specified conditions.\nfilter from dplyr package to subset rows based on specified conditions.\ngroup_by from dplyr package to group data by specified columns, useful for performing grouped operations like summarization.\nsummarise (or summarize) from dplyr package to calculate aggregate values for each group created by group_by.\nrename_with from dplyr package to rename columns based on a function, such as converting names to lowercase.\nungroup from dplyr package to remove the grouping structure from a data frame.\nglimpse from dplyr package provides a transposed summary of the data frame, offering a quick look at its contents."
  },
  {
    "objectID": "take-home/the1.html#choosing-the-month",
    "href": "take-home/the1.html#choosing-the-month",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "3.3 Choosing the Month",
    "text": "3.3 Choosing the Month\nIn order to decide which month is better to perform LISA or whether analyzing all month separately will yield interesting result, it is a good step to check the data distribution of each month. By comparing the data distribution for each month, we can make an educated guess whether the LISA result for each month would be starkly different or just similar.\n\n\nCode\n# Combine odb8, odb9, and odb10 into one dataframe\ncombined_data &lt;- bind_rows(\n  mutate(odb8, month = \"odb8\"),\n  mutate(odb9, month = \"odb9\"),\n  mutate(odb10, month = \"odb10\")\n)\n\n# Create a standard vertical box plot\nbus_boxplot &lt;- combined_data %&gt;%\n  ggplot(aes(x = period, y = num_trips, fill = period)) + # Assigning aesthetics for x and y axes, and fill color based on period\n  geom_boxplot() + # Adding the box plot layer\n  facet_wrap(~month, scales = 'free_x') + # Faceting by month, with free scales for x axis\n  labs(\n    title = \"Distribution of Trips across Peak Periods\",\n    subtitle = \"Comparison across different months\",\n    x = \"Period\",\n    y = \"Number of Trips\"\n  ) +\n  theme_minimal() + # Using a minimal theme for a cleaner look\n  theme(axis.text.x = element_blank(), axis.title.x = element_blank()) # Removing x-axis category labels and label  \nbus_boxplot\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nbind_rows from dplyr package combines data frames by rows, stacking them on top of each other.\nmutate from dplyr package adds new variables or modifies existing ones in a data frame.\nggplot from ggplot2 package creates a new ggplot graph, specifying its aesthetic mappings.\ngeom_boxplot from ggplot2 package adds a boxplot layer to the ggplot.\nfacet_wrap from ggplot2 package creates a facetted plot, splitting the data by one or more variables.\nlabs from ggplot2 package modifies plot labels, including title and axis labels.\ntheme_minimal from ggplot2 package applies a minimalistic theme to the plot.\ntheme and element_blank from ggplot2 package customize aspects of the plot’s theme, such as removing axis text and titles.\n\n\n\n\nThe box plot to show the data distribution was not too helpful as it shows that all peak time across months has extreme outliers. Therefore, the next code chunk modify the boxplot by log-transforming the number of trips.\n\n\nCode\n# Create a modified vertical box plot\nbus_boxplot &lt;- combined_data %&gt;%\n  ggplot(aes(x = period, y = log(num_trips), fill = period)) + # Modified aesthetics with log-transformed y-axis\n  geom_boxplot() + # Adding the box plot layer\n  facet_wrap(~month, scales = 'free_x') + # Faceting by month, with free scales for x axis\n  labs(\n    title = \"Distribution of Log-Transformed Trips\",\n    subtitle = \"Comparison across different months\",\n    y = \"Log(Number of Trips)\"\n  ) +\n  theme_minimal() + # Using a minimal theme for a cleaner look\n  theme(axis.text.x = element_blank(), axis.title.x = element_blank()) # Removing x-axis category labels and label\n\nbus_boxplot\n\n\n\n\n\n\nThe log-transformed box plot show that the distribution of each peak periods across months is quite similar. In general, number of trips in the weekday peaks are typically higher than weekend/holiday peak. The similarity also extend to extreme outliers. For example, the green box plot (Weekday morning peak) always have a single point extreme outlier on the top of the box plot. Based on this observation, it can be inferred that performing LISA on one of month is most likely enough to discover the pattern. The month October, as the latest data available, is chosen for the next processes."
  },
  {
    "objectID": "take-home/the1.html#extract-trip-numbers-into-wide-form-of-peak-period-categories",
    "href": "take-home/the1.html#extract-trip-numbers-into-wide-form-of-peak-period-categories",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "3.4 Extract Trip Numbers Into Wide Form of Peak Period Categories",
    "text": "3.4 Extract Trip Numbers Into Wide Form of Peak Period Categories\nPivoting data into a wide format before merging aspatial and geospatial datasets is beneficial for streamlined analysis. It helps organize information by transforming rows into columns, making it easier to align and combine trip count data across various peak periods. This wide format simplifies subsequent data integration steps, facilitating a more efficient join between datasets based on common identifiers or keys.\n\n\nCode\n# Extract data from odb10 and store as a separate dataframe\nodb10_wide &lt;- odb10 %&gt;%\n  # Pivot the data wider, treating each row as a bus stop code with peak period trips as columns\n  pivot_wider(\n    names_from = period,\n    values_from = num_trips\n  ) %&gt;%\n  select(2:6)\n\n\n# check the output\nDT::datatable(odb10_wide,\n              options = list(pageLength = 8),\n              rownames = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\npivot_wider from tidyr package reshapes data from a ‘long’ format to a ‘wider’ format, spreading key-value pairs across multiple columns.\nselect from dplyr package is used to subset specific columns from a data frame.\ndatatable from DT package creates an interactive table (data table) widget, offering functionalities like pagination. The options parameter allows customization of the table, such as setting the number of rows to display per page (pageLength)."
  },
  {
    "objectID": "take-home/the1.html#join-aspatial-and-geospatial-data",
    "href": "take-home/the1.html#join-aspatial-and-geospatial-data",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "3.5 Join Aspatial and Geospatial Data",
    "text": "3.5 Join Aspatial and Geospatial Data\nTo retain the geospatial property, use left_join by using busstop as the main dataframe and bus stop code as the reference.\n\n\nCode\nodb10_sf &lt;- left_join(busstop, odb10_wide, by = \"origin_pt_code\")\n\nglimpse(odb10_sf)\n\n\nRows: 5,145\nColumns: 7\n$ origin_pt_code                 &lt;fct&gt; 22069, 32071, 44331, 96081, 11561, 6619…\n$ loc_desc                       &lt;fct&gt; OPP CEVA LOGISTICS, AFT TRACK 13, BLK 2…\n$ `Weekday evening peak`         &lt;dbl&gt; 67, 5, 1740, 445, 199, 349, 432, 1285, …\n$ `Weekday morning peak`         &lt;dbl&gt; 50, NA, 2075, 411, 207, 405, 60, 3059, …\n$ `Weekend/holiday evening peak` &lt;dbl&gt; 10, NA, 589, 47, 77, 169, 82, 492, 2016…\n$ `Weekend/holiday morning peak` &lt;dbl&gt; 8, NA, 682, 110, 70, 177, 16, 1442, 204…\n$ geometry                       &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT …\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nleft_join from dplyr package merges two data frames together based on matching values in their columns. Specifically, left_join keeps all rows from the left data frame and adds matching rows from the right data frame. If there is no match, the right side will contain NA.\nglimpse from dplyr package provides a transposed summary of the data frame, giving a quick overview of its structure, including column types and the first few entries in each column."
  },
  {
    "objectID": "take-home/the1.html#creating-hexagon-spatial-grid",
    "href": "take-home/the1.html#creating-hexagon-spatial-grid",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "3.6 Creating Hexagon Spatial Grid",
    "text": "3.6 Creating Hexagon Spatial Grid\nodb10_sf represents a spatial point dataframe, which might not be optimal for spatial autocorrelation analysis where the definition of ‘areas’ requires the representation of spatial entities as polygons instead of individual points. To address this, the subsequent code sections transform these bus stops into a grid of hexagons.\n\n1. Generate Hexagon Grid2. Generate Attribute Dataframe using Hexagon Identifiers3. Join the grid and attribute dataframe\n\n\nThis code utilizes the st_make_grid function to create a hexagon grid based on the specified parameters. The resulting hexagon grid is then converted into a spatial dataframe (st_sf()) to maintain its geospatial properties. The rowid_to_column function is employed to assign a unique identifier (hex_id) to each hexagon, facilitating subsequent analyses or referencing.\nOutput: Spatial Polygons with Hexagonal Geometry and Hex_id Identification\n\n\nCode\nodb10_hex &lt;- st_make_grid(\n    odb10_sf,\n    cellsize = 500,\n    square = FALSE\n  ) %&gt;%\n  st_sf() %&gt;%\n  rowid_to_column(\"hex_id\")\n\n# check the output\nglimpse(odb10_hex)\n\n\nRows: 5,580\nColumns: 2\n$ hex_id   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ geometry &lt;POLYGON [m]&gt; POLYGON ((3720.122 26626.44..., POLYGON ((3720.122 27…\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nst_make_grid from sf package creates a grid over a spatial object. In this code, it is used to generate a hexagonal grid over the odb10_sf spatial data, with each cell having a size of 500 units.\nst_sf from sf package converts the grid into an sf (simple features) object, which is a standard format for handling spatial data in R.\nrowid_to_column from tibble package adds a new column to a data frame that contains a unique identifier for each row.\nglimpse from dplyr package provides a transposed summary of the data frame, offering a quick look at its structure and contents.\n\n\n\n\n\n\nGiven that each hexagonal area may encompass multiple bus stops, the hex_id serves as the primary key for aggregation. The subsequent procedures outline how to organize attributes based on hex_id:\n\nUtilize the st_join() function with join = st_within to associate bus stop points with hexagon areas.\nThe st_set_geometry(NULL) argument eliminates the geospatial layer, focusing on attribute aggregation.\nEmploy group_by() to obtain a unique hex_id for each row.\nUtilize summarise() to calculate the aggregate count of bus stops and trips per peak period within each hexagon area.\nReplace all NA values with 0 using replace(is.na(.), 0).\n\nOutput: Attribute Dataframe, with Hex_id as the Primary Key\n\n\nCode\nodb10_stops &lt;- st_join(\n  odb10_sf, \n  odb10_hex, \n  join = st_within\n) %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  group_by(hex_id) %&gt;%\n  summarise(\n    n_busstops = n(),\n    busstops_code = str_c(origin_pt_code, collapse = \",\"),\n    loc_desc = str_c(loc_desc, collapse = \",\"),\n    `Weekday morning peak` = sum(`Weekday morning peak`, na.rm = TRUE),\n    `Weekday evening peak` = sum(`Weekday evening peak`, na.rm = TRUE),\n    `Weekend/holiday morning peak` = sum(`Weekend/holiday morning peak`, na.rm = TRUE),\n    `Weekend/holiday evening peak` = sum(`Weekend/holiday evening peak`, na.rm = TRUE)\n  ) %&gt;%\n  ungroup() %&gt;%\n  mutate(across(where(is.numeric), ~ replace_na(., 0)),\n         across(where(is.character), ~ replace_na(., \"\")))\n\n# check the output\nglimpse(odb10_stops)\n\n\nRows: 1,524\nColumns: 8\n$ hex_id                         &lt;int&gt; 34, 65, 99, 127, 129, 130, 131, 159, 16…\n$ n_busstops                     &lt;int&gt; 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, …\n$ busstops_code                  &lt;chr&gt; \"25059\", \"25751\", \"26379\", \"25761\", \"25…\n$ loc_desc                       &lt;chr&gt; \"AFT TUAS STH BLVD\", \"BEF TUAS STH AVE …\n$ `Weekday morning peak`         &lt;dbl&gt; 103, 52, 78, 185, 1116, 53, 60, 64, 251…\n$ `Weekday evening peak`         &lt;dbl&gt; 390, 114, 291, 1905, 2899, 241, 368, 29…\n$ `Weekend/holiday morning peak` &lt;dbl&gt; 0, 26, 52, 187, 455, 76, 45, 21, 39, 69…\n$ `Weekend/holiday evening peak` &lt;dbl&gt; 56, 14, 100, 346, 634, 55, 49, 53, 132,…\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nst_join from sf package spatially joins two sf objects. st_within as the join method checks if geometries of the first object are within those of the second.\nst_set_geometry from sf package is used to remove or set the geometry column in an sf object.\ngroup_by from dplyr package to group the data by specified columns, allowing for grouped summaries.\nsummarise from dplyr package calculates summary statistics for each group.\nstr_c from stringr package concatenates character vectors.\nungroup from dplyr package removes grouping.\nmutate and across from dplyr package modify columns, applying functions across selected columns.\nreplace_na from tidyr package replaces NA values with specified values.\nglimpse from dplyr package provides a transposed summary of the data frame.\n\n\n\n\n\n\n\nUse left_join to combine the new odb10_stops attribute dataframe with the existing odb10_hex hexagon geospatial layer, linking them by hex_id to integrate attributes into the spatial polygon dataframe.\nEmploy filter to exclude hexagons without bus stops.\n\nOutput: Spatial Polygon Dataframe\n\n\nCode\nodb10_complete &lt;- odb10_hex %&gt;%\n  left_join(odb10_stops,\n            by = \"hex_id\"\n  ) %&gt;%\n  replace(is.na(.), 0)\n\nodb10_final &lt;- filter(odb10_complete,\n                       n_busstops &gt; 0)\n\n# check the output\nglimpse(odb10_final)\n\n\nRows: 1,524\nColumns: 9\n$ hex_id                         &lt;int&gt; 34, 65, 99, 127, 129, 130, 131, 159, 16…\n$ n_busstops                     &lt;dbl&gt; 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, …\n$ busstops_code                  &lt;chr&gt; \"25059\", \"25751\", \"26379\", \"25761\", \"25…\n$ loc_desc                       &lt;chr&gt; \"AFT TUAS STH BLVD\", \"BEF TUAS STH AVE …\n$ `Weekday morning peak`         &lt;dbl&gt; 103, 52, 78, 185, 1116, 53, 60, 64, 251…\n$ `Weekday evening peak`         &lt;dbl&gt; 390, 114, 291, 1905, 2899, 241, 368, 29…\n$ `Weekend/holiday morning peak` &lt;dbl&gt; 0, 26, 52, 187, 455, 76, 45, 21, 39, 69…\n$ `Weekend/holiday evening peak` &lt;dbl&gt; 56, 14, 100, 346, 634, 55, 49, 53, 132,…\n$ geometry                       &lt;POLYGON [m]&gt; POLYGON ((3970.122 27925.48...,…"
  },
  {
    "objectID": "take-home/the1.html#distribution-of-bus-stop",
    "href": "take-home/the1.html#distribution-of-bus-stop",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "4.1 Distribution of Bus Stop",
    "text": "4.1 Distribution of Bus Stop\nUnderstanding the spatial distribution of bus stops in Singapore is crucial for deciphering the accessibility and connectivity of public transportation. The “Distribution of Bus Stops” map provides a visual representation of the number of bus stops across different regions.\n\n\nCode\n# Plot the hexagon grid based on n_busstops\ntmap_mode(\"view\")\nbusstop_map = tm_shape(odb10_final)+\n  tm_fill(\n    col = \"n_busstops\",\n    palette = \"Blues\",\n    style = \"cont\",\n    title = \"Number of Bus Stops\",\n    id = \"loc_desc\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.format = list(\n      grid_id = list(format = \"f\", digits = 0)\n    )\n  )+\n  tm_borders(col = \"grey40\", lwd = 0.7)\nbusstop_map\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\ntmap_mode from tmap package sets the mode of tmap to either plot static maps (\"plot\") or create interactive maps (\"view\").\ntm_shape from tmap package prepares the spatial data for plotting.\ntm_fill from tmap package fills polygons (like the hexagons in the grid) with colors based on a specified variable.\ntm_borders from tmap package adds borders around the polygons.\nThe popup.format within tm_fill allows customization of the format of the values shown in the interactive popups.\n\n\n\n\n\nFrom the map, we can infer that the central region, likely encompassing the Central Business District (CBD) and surrounding residential areas, which are known to be highly populated and active, has a higher number of bus stops. This correlates with the need for robust public transportation in densely populated areas to support the daily commute of residents and workers. Lighter shades are observed towards the periphery of the island, suggesting fewer bus stops, which could correspond to less urbanized or industrial areas, like the Western and North-Eastern regions where the population density is lower. The map reflects Singapore’s urban planning and transportation strategy, which aims to provide accessibility and connectivity, particularly in high-density regions where demand for public transit is greatest."
  },
  {
    "objectID": "take-home/the1.html#distribution-of-trips-across-peak-hours",
    "href": "take-home/the1.html#distribution-of-trips-across-peak-hours",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "4.2 Distribution of Trips Across Peak Hours",
    "text": "4.2 Distribution of Trips Across Peak Hours\nfind the ideal breaks for plotting the trips using summary\n\n\nCode\nsummary(odb10_final)\n\n\n     hex_id       n_busstops     busstops_code        loc_desc        \n Min.   :  34   Min.   : 1.000   Length:1524        Length:1524       \n 1st Qu.:1941   1st Qu.: 2.000   Class :character   Class :character  \n Median :2950   Median : 3.000   Mode  :character   Mode  :character  \n Mean   :2813   Mean   : 3.376                                        \n 3rd Qu.:3734   3rd Qu.: 4.000                                        \n Max.   :5558   Max.   :11.000                                        \n Weekday morning peak Weekday evening peak Weekend/holiday morning peak\n Min.   :     0       Min.   :     0       Min.   :     0.0            \n 1st Qu.:   909       1st Qu.:  2139       1st Qu.:   384.8            \n Median :  7532       Median :  7246       Median :  2159.5            \n Mean   : 16838       Mean   : 16135       Mean   :  4986.7            \n 3rd Qu.: 23245       3rd Qu.: 16947       3rd Qu.:  6371.0            \n Max.   :386450       Max.   :542529       Max.   :109329.0            \n Weekend/holiday evening peak          geometry   \n Min.   :     0.0             POLYGON      :1524  \n 1st Qu.:   529.5             epsg:3414    :   0  \n Median :  2157.5             +proj=tmer...:   0  \n Mean   :  4999.7                                 \n 3rd Qu.:  5458.2                                 \n Max.   :150399.0                                 \n\n\n\nThe summary result confirmed that the trips data is right-skewed and contains extreme outliers. This knowledge is then used to customize the break in the comparison map.\n\nThe following code plot the comparison map. the map is set on “plot” mode for rendering, but was set on “view” mode for analysis.\n\n\nCode\n# Define the columns for which we want to find the global min and max\nvalue_columns &lt;- c(\"Weekday morning peak\", \"Weekday evening peak\", \"Weekend/holiday morning peak\", \"Weekend/holiday evening peak\")\n\n# Set tmap to interactive viewing mode for analysis and plot mode for rendering\ntmap_mode(\"view\")\n\n# Define a function to create each map with a customized legend\ncreate_map &lt;- function(value_column) {\n  tm_shape(odb10_final) +\n    tm_fill(\n      col = value_column,\n      palette = \"-RdBu\",\n      style = \"fixed\",\n      title = value_column,\n      id = \"loc_desc\",\n      showNA = FALSE,\n      alpha = 0.6,\n      breaks = c(0, 500, 1000, 2000, 3000, 5000, 10000, 50000, 100000, 300000, 550000)\n    ) +\n    tm_borders(col = \"grey40\", lwd = 0.7) +\n    tm_layout(\n      legend.position = c(\"right\", \"bottom\"), # Adjust legend position\n      legend.frame = TRUE,\n      legend.width = 0.15, # Adjust the width of the legend\n      legend.height = 0.5  # Adjust the height of the legend\n    )\n}\n\n# Apply the function to each value column and store the maps\nmap_list &lt;- lapply(value_columns, create_map)\n\n# Combine the maps into a 2x2 grid\ncombined_map &lt;- tmap_arrange(map_list[[1]], map_list[[2]], map_list[[3]], map_list[[4]], ncol = 2, nrow = 2)\n\n# Show the combined map\ncombined_map\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\ntmap_mode from tmap package sets the mode for creating maps. Here, \"plot\" mode is chosen for static map plotting.\ntm_shape from tmap package prepares spatial data for plotting.\ntm_fill from tmap package fills polygons with colors based on specified variables, with options for color palette, style, and legend customization.\ntm_borders from tmap package adds borders to the polygons.\ntm_layout from tmap package adjusts the layout of the map, including legend positioning and dimensions.\ntmap_arrange from tmap package arranges multiple tmap objects into a grid layout.\nlapply from base R applies a function over a list or vector.\n\n\n\n\n\nUsing the same classification scaling for all maps, it clearly shows that weekdays trips volume is higher in general than weekend/holiday. Nevertheless, at a glance, the crowded area are more or less the same across all days and time. This confirmed the previous finding on bus stops in which the area with most traffics are likely to encompassing the Central Business District (CBD) and surrounding residential areas, which are known to be highly populated and active the area of Singapore. At the same time, it also reflects Singapore’s urban planning and transportation strategy, in which the busiest area with potential high traffics are supported by more bus stops."
  },
  {
    "objectID": "take-home/the1.html#distribution-of-average-trips-per-bus-stop",
    "href": "take-home/the1.html#distribution-of-average-trips-per-bus-stop",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "4.3 Distribution of Average Trips per Bus Stop",
    "text": "4.3 Distribution of Average Trips per Bus Stop\nThe next distribution will see which bus stop is the busiest on average, in terms of number of trips per bus stop. To do that, firstly the following code will generate new columns of trip per bus stop for each hexagon.\n\n\nCode\n# Create a new dataframe with transformed columns\nodb10_final_avg &lt;- odb10_final %&gt;%\n  mutate(across(all_of(value_columns), ~ .x / n_busstops, .names = \"avg_{.col}\"))\n# check the summary for determining break points\nsummary(odb10_final_avg)\n\n\n     hex_id       n_busstops     busstops_code        loc_desc        \n Min.   :  34   Min.   : 1.000   Length:1524        Length:1524       \n 1st Qu.:1941   1st Qu.: 2.000   Class :character   Class :character  \n Median :2950   Median : 3.000   Mode  :character   Mode  :character  \n Mean   :2813   Mean   : 3.376                                        \n 3rd Qu.:3734   3rd Qu.: 4.000                                        \n Max.   :5558   Max.   :11.000                                        \n Weekday morning peak Weekday evening peak Weekend/holiday morning peak\n Min.   :     0       Min.   :     0       Min.   :     0.0            \n 1st Qu.:   909       1st Qu.:  2139       1st Qu.:   384.8            \n Median :  7532       Median :  7246       Median :  2159.5            \n Mean   : 16838       Mean   : 16135       Mean   :  4986.7            \n 3rd Qu.: 23245       3rd Qu.: 16947       3rd Qu.:  6371.0            \n Max.   :386450       Max.   :542529       Max.   :109329.0            \n Weekend/holiday evening peak          geometry    avg_Weekday morning peak\n Min.   :     0.0             POLYGON      :1524   Min.   :     0          \n 1st Qu.:   529.5             epsg:3414    :   0   1st Qu.:   391          \n Median :  2157.5             +proj=tmer...:   0   Median :  2598          \n Mean   :  4999.7                                  Mean   :  4513          \n 3rd Qu.:  5458.2                                  3rd Qu.:  6119          \n Max.   :150399.0                                  Max.   :119816          \n avg_Weekday evening peak avg_Weekend/holiday morning peak\n Min.   :     0.0         Min.   :    0.0                 \n 1st Qu.:   950.8         1st Qu.:  162.8                 \n Median :  2284.0         Median :  775.0                 \n Mean   :  4420.4         Mean   : 1349.9                 \n 3rd Qu.:  4575.0         3rd Qu.: 1659.1                 \n Max.   :136001.0         Max.   :43420.0                 \n avg_Weekend/holiday evening peak\n Min.   :    0.0                 \n 1st Qu.:  224.1                 \n Median :  711.1                 \n Mean   : 1380.3                 \n 3rd Qu.: 1468.9                 \n Max.   :39425.0                 \n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nmutate from dplyr package is used to add new columns to a data frame or modify existing ones.\nacross from dplyr package applies a function to a selection of columns, in this case, transforming specified columns by dividing each by n_busstops.\nall_of from dplyr package is used within across for selecting columns based on a character vector of column names.\nsummary from base R provides a summary of the object’s contents, typically giving minimum, maximum, mean, and other useful statistics.\n\n\n\n\nThe following code plot the comparison map. the map is set on “plot” mode for rendering, but was set on “view” mode for analysis.\n\n\nCode\n# Define the columns for which we want to find the global min and max\nvalue_columns &lt;- c(\"avg_Weekday morning peak\", \"avg_Weekday evening peak\", \"avg_Weekend/holiday morning peak\", \"avg_Weekend/holiday evening peak\")\n\n# Set tmap to interactive viewing mode\ntmap_mode(\"view\")\n\n# Define a function to create each map with a customized legend\ncreate_map &lt;- function(value_column) {\n  tm_shape(odb10_final_avg) +\n    tm_fill(\n      col = value_column,\n      palette = \"-RdBu\",\n      style = \"fixed\",\n      title = value_column,\n      id = \"loc_desc\",\n      showNA = FALSE,\n      alpha = 0.6,\n      breaks = c(0, 100, 200, 300, 400, 500, 750, 1000, 1500, 5000, 10000, 50000, 140000)\n    ) +\n    tm_borders(col = \"grey40\", lwd = 0.7) +\n    tm_layout(\n      legend.position = c(\"right\", \"bottom\"), # Adjust legend position\n      legend.frame = TRUE,\n      legend.width = 0.15, # Adjust the width of the legend\n      legend.height = 0.5  # Adjust the height of the legend\n    )\n}\n\n# Apply the function to each value column and store the maps\nmap_list &lt;- lapply(value_columns, create_map)\n\n# Combine the maps into a 2x2 grid\ncombined_map &lt;- tmap_arrange(map_list[[1]], map_list[[2]], map_list[[3]], map_list[[4]], ncol = 2, nrow = 2)\n\n# Show the combined map\ncombined_map\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\ntmap_mode from tmap package sets the mode for creating maps. \"plot\" mode is used for static map plotting.\ntm_shape from tmap package prepares spatial data for plotting.\ntm_fill from tmap package fills polygons with colors based on specified variables, allowing for customized legends and color palettes.\ntm_borders from tmap package adds borders to the polygons.\ntm_layout from tmap package adjusts the layout of the map, including legend position and dimensions.\nlapply from base R applies a function over a list or vector.\ntmap_arrange from tmap package arranges multiple tmap objects into a grid layout.\n\n\n\n\n\nat a glance, using the average trips per bus stop shows slightly different insight. Comparatively to the total trips, average number of trips shows that the area around Jurong, Woodlands, and bus stops in Johor (part of Malaysia) is actually busier than what total trips suggest. In the context of transport policy, this might be the first lead to expand the number of bus stops in the particular area to cater for more commuters."
  },
  {
    "objectID": "take-home/the1.html#creating-a-spatial-matrix-based-on-distance",
    "href": "take-home/the1.html#creating-a-spatial-matrix-based-on-distance",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "5.1 Creating a Spatial Matrix Based on Distance",
    "text": "5.1 Creating a Spatial Matrix Based on Distance\nBefore we delve into the intricacies of global and local spatial autocorrelation statistics, a crucial preliminary step involves the creation of a spatial weights matrix tailored to our study area. This matrix essentially delineates the relationships between hexagonal spatial units based on their respective distances. In establishing this matrix, it’s imperative to bear in mind a few considerations.\nFirstly, it is essential to ensure that each feature has at least one neighbor, and conversely, no feature is designated as a neighbor to all other features. This ensures a meaningful and diverse representation of spatial relationships.\nFurthermore, for datasets exhibiting skewed distribution, a recommended guideline is to assign each feature a minimum of eight neighbors, a criterion we’ve slightly exceeded by opting for 12 neighbors in this context. This ensures a more robust and comprehensive understanding of spatial connectivity within the data.\nGiven the peculiarities of our study area, characterized by regions with a sparse distribution of bus stops, particularly in zones lacking significant residential or business presence, the preference leans towards employing distance-based methods over contiguity methods. This strategic choice aligns with the spatial reality of the data, allowing for a more nuanced exploration of spatial relationships while considering the unique characteristics of the geographical context.\nWe opt for the Adaptive Distance-Based (Fixed Number of Neighbors) approach instead of the Fixed-Distance Threshold method, a decision prompted by the right-skewed distribution inherent in our dataset. In this chosen method, each hexagon is assured of having a minimum of n neighbors, a critical prerequisite for subsequent statistical significance testing.\nTo implement this, we set each hexagon to be associated with precisely 12 neighbors, a configuration achieved through the application of provided R code. The process involves utilizing the st_knn function to acquire a comprehensive list of neighbors for each hexagon and subsequently employing st_weights to generate spatial weights that are row-standardized. This meticulous procedure ensures a standardized and well-defined spatial relationship framework, laying the groundwork for robust statistical analyses.\n\n\nCode\nwm_all &lt;- odb10_final %&gt;% \n  mutate(\n    nb = st_knn(geometry, k = 12),\n    wt = st_weights(nb, style = 'W'),\n    .before = 1\n  )\n\n# check the output\nkable(head(wm_all))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnb\nwt\nhex_id\nn_busstops\nbusstops_code\nloc_desc\nWeekday morning peak\nWeekday evening peak\nWeekend/holiday morning peak\nWeekend/holiday evening peak\ngeometry\n\n\n\n\n2, 4, 5, 8, 9, 12, 13, 16, 22, 23, 38, 39\n0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333\n34\n1\n25059\nAFT TUAS STH BLVD\n103\n390\n0\n56\nPOLYGON ((3970.122 27925.48…\n\n\n1, 3, 4, 5, 8, 9, 12, 13, 16, 22, 23, 38\n0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333\n65\n1\n25751\nBEF TUAS STH AVE 14\n52\n114\n26\n14\nPOLYGON ((4220.122 28358.49…\n\n\n5, 6, 7, 9, 10, 13, 14, 16, 17, 18, 24, 25\n0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333\n99\n1\n26379\nYONG NAM\n78\n291\n52\n100\nPOLYGON ((4470.122 30523.55…\n\n\n1, 2, 5, 8, 9, 12, 13, 16, 22, 23, 38, 39\n0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333\n127\n1\n25761\nOPP REC S’PORE\n185\n1905\n187\n346\nPOLYGON ((4720.122 28358.49…\n\n\n3, 6, 9, 10, 12, 13, 14, 16, 17, 24, 30, 31\n0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333\n129\n2\n25719,26389\nTHE INDEX,BEF TUAS STH AVE 5\n1116\n2899\n455\n634\nPOLYGON ((4720.122 30090.54…\n\n\n3, 5, 7, 9, 10, 11, 13, 14, 17, 18, 24, 25\n0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333, 0.08333333\n130\n1\n26369\nSEE HUP SENG\n53\n241\n76\n55\nPOLYGON ((4720.122 30956.57…\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nmutate from dplyr package is used to add new columns to a data frame or modify existing ones.\nst_knn from sfdep package computes k-nearest neighbors for spatial data. Here, it is used to find the nearest 12 neighbors for each geometry in odb10_final.\nst_weights from sfdep computes spatial weights. The style = 'W' argument specifies the type of weights to be calculated.\nThe .before = 1 argument in mutate specifies that the new columns should be added at the beginning of the data frame.\nkable from the knitr package creates simple tables from a data frame for markdown format output."
  },
  {
    "objectID": "take-home/the1.html#examining-global-spatial-association-globally-with-global-morans-i",
    "href": "take-home/the1.html#examining-global-spatial-association-globally-with-global-morans-i",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "5.2 Examining Global Spatial Association Globally with Global Moran’s I",
    "text": "5.2 Examining Global Spatial Association Globally with Global Moran’s I\nAssessing global spatial correlation involves scrutinizing the comprehensive spatial arrangement of a specific variable, such as the aggregated count of trips throughout the entire study region. This analysis furnishes a solitary metric that encapsulates how closely akin values aggregate or scatter across the geographic expanse.\nCalculate the Global Moran’s I statistic for peak time trip counts at the hexagonal level, employing simulated data to sidestep assumptions of normal distribution and randomness. The simulation count is established at 99+1, totaling 100 simulations, ensuring a robust evaluation of spatial relationships without reliance on normality or random distribution assumptions.\n\n\nCode\n# Set the seed to ensure reproducibility\nset.seed(1234)\n\n# define the value_columns\nvalue_columns &lt;- c(\"Weekday morning peak\", \"Weekday evening peak\", \"Weekend/holiday morning peak\", \"Weekend/holiday evening peak\")\n\n# Create a function to perform global Moran's I test\nperform_global_moran &lt;- function(data, value_column, k) {\n  # Compute spatial weights\n  nb &lt;- st_knn(data$geometry, k = k)\n  wt &lt;- st_weights(nb, style = 'W')\n\n  # Perform global Moran's I test\n  moran_result &lt;- global_moran_perm(data[[value_column]], nb, wt, nsim = 99)\n  \n  # Include the value_column in the result\n  result &lt;- list(\n    value_column = value_column,\n    moran_result = moran_result\n  )\n  \n  return(result)\n}\n\n# Apply the function for each time interval\nresults &lt;- lapply(value_columns, function(vc) perform_global_moran(wm_all, vc, k = 12))\n\n# Print the results\nprint(results)\n\n\n[[1]]\n[[1]]$value_column\n[1] \"Weekday morning peak\"\n\n[[1]]$moran_result\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.18614, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\n[[2]]\n[[2]]$value_column\n[1] \"Weekday evening peak\"\n\n[[2]]$moran_result\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.044306, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\n[[3]]\n[[3]]$value_column\n[1] \"Weekend/holiday morning peak\"\n\n[[3]]$moran_result\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.13804, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\n[[4]]\n[[4]]$value_column\n[1] \"Weekend/holiday evening peak\"\n\n[[4]]$moran_result\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.084188, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nset.seed from base R package is used to set the seed of R’s random number generator, ensuring reproducibility of results.\nst_knn from sfdep package computes k-nearest neighbors for spatial data, used here to create spatial weights.\nst_weights from sfdep package calculates spatial weights. The style = 'W' argument specifies the type of weights.\nglobal_moran_perm from fpdep package performs a permutation test for global Moran’s I, a measure of spatial autocorrelation.\nlapply from base R applies a function over a list or vector.\n\n\n\n\n\nFor all four time intervals, since the p-value for global Moran’s I is smaller than 0.05, we can reject the null hypothesis that the spatial patterns are random. Moreover, as the Moran’s I statistics are greater than 0, we can infer that the spatial distribution exhibits signs of clustering for all four time intervals, consistent with the choropleth maps plotted earlier."
  },
  {
    "objectID": "take-home/the1.html#assessing-local-autocorrelation-spatial-association",
    "href": "take-home/the1.html#assessing-local-autocorrelation-spatial-association",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "5.3 Assessing Local Autocorrelation Spatial Association",
    "text": "5.3 Assessing Local Autocorrelation Spatial Association\nDelving into local spatial relationships offers a nuanced exploration of spatial configurations at a granular level, pinpointing particular zones with pronounced or diminished spatial connections. The Local Moran’s I method classifies areas into distinct categories such as high-high, low-low, high-low, or low-high, delineating patterns of clustering or outlier behavior within specific regions.\nTo analyze passenger trip patterns originating at the hex level, we employ the Local Indicators of Spatial Association (LISA) through the local_moran function sourced from the sfdep package. This function automatically computes neighbor lists and weights, leveraging simulated data to enhance accuracy. The outcomes are then deconstructed for in-depth analysis and presented in an interactive datatable format, allowing for a comprehensive examination of the intricacies within the spatial relationships of passenger trips.\n\n\nCode\n# Create a function to perform local Moran's I analysis\nget_lisa &lt;- function(wm, value_column, k) {\n  # Compute spatial weights\n  nb &lt;- st_knn(wm$geometry, k = k)\n  wt &lt;- st_weights(nb, style = 'W')\n\n  # Perform local Moran's I analysis and create a new data frame\n  result &lt;- wm %&gt;% \n    mutate(\n      local_moran = local_moran(.data[[value_column]], nb, wt, nsim = 99),\n      .before = 1\n    ) %&gt;%\n    unnest(local_moran)\n  \n  return(result)\n}\n\n# Initialize a list to store results for each value_column\nlisa_results &lt;- list()\n\n# Apply the function for each time interval and store results in the list\nfor (vc in value_columns) {\n  lisa_results[[vc]] &lt;- get_lisa(wm_all, vc, k = 12)\n  \n  # Remove columns that don't belong to the specific time interval\n  unwanted_columns &lt;- setdiff(value_columns, vc)\n  lisa_results[[vc]] &lt;- lisa_results[[vc]][, !(names(lisa_results[[vc]]) %in% unwanted_columns)]\n}\n\n# show sample output in an interactive table\ndatatable(lisa_results[[\"Weekday morning peak\"]], \n          class = 'cell-border stripe', \n          options = list(pageLength = 5))\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nst_knn from sfdep package computes k-nearest neighbors for spatial data, used here for spatial weights calculation.\nst_weights from sfdep package creates spatial weights with the specified style ('W').\nlocal_moran from sfdep package performs local Moran’s I analysis, a measure of local spatial autocorrelation.\nmutate and unnest from dplyr and tidyr respectively, are used to modify and expand nested data within a data frame.\ndatatable from DT package creates an interactive table widget.\nThe for loop in base R iteratively applies the get_lisa function to each value column."
  },
  {
    "objectID": "take-home/the1.html#significant-local-morans-i-results-at-α-5",
    "href": "take-home/the1.html#significant-local-morans-i-results-at-α-5",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "5.4 Significant Local Moran’s I Results at α 5%",
    "text": "5.4 Significant Local Moran’s I Results at α 5%\nLeverage the fundamental functionalities of the tmap package to create choropleth maps illustrating the Local Moran’s I field and p-value field across all four time intervals. Only noteworthy values of Local Moran’s I at a significance level of α 5% are visualized. The provided code retrieves the pertinent Local Moran’s I values for the explicit purpose of generating maps.\n\n\nCode\nget_sig_lmi_map &lt;- function(lisa_table, title) {\n  \n  sig_lisa_table &lt;- lisa_table %&gt;%\n    filter(p_ii_sim &lt; 0.05)\n  \n  result &lt;- tm_shape(lisa_table) +\n    tm_polygons() +\n    tm_borders(alpha = 0.5) +\n    tm_shape(sig_lisa_table) +\n    tm_fill(\"ii\") + \n    tm_borders(alpha = 0.4) +\n    tm_layout(\n      main.title = title,\n      main.title.size = 1.3\n    )\n  \n  return(result)\n  \n}\n\nsig_lmi_1 &lt;- get_sig_lmi_map(lisa_results[[\"Weekday morning peak\"]], \"Weekday Morning\" )\nsig_lmi_2 &lt;- get_sig_lmi_map(lisa_results[[\"Weekday evening peak\"]], \"Weekday Afternoon\" )\nsig_lmi_3 &lt;- get_sig_lmi_map(lisa_results[[\"Weekend/holiday morning peak\"]], \"Weekend Morning\" )\nsig_lmi_4 &lt;- get_sig_lmi_map(lisa_results[[\"Weekend/holiday morning peak\"]], \"Weekend Afternoon\" )\n\ntmap_mode('view')\n\ntmap_arrange(\n  sig_lmi_1,\n  sig_lmi_2,\n  sig_lmi_3,\n  sig_lmi_4,\n  asp = 2,\n  nrow = 2,\n  ncol = 2\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nfilter from dplyr package to subset rows based on a condition, here filtering for statistically significant local Moran’s I results.\ntm_shape, tm_polygons, tm_borders, tm_fill, and tm_layout from tmap package are used to create and customize thematic maps.\ntmap_mode sets the tmap mode, here 'plot' is for static maps.\ntmap_arrange arranges multiple tmap objects in a grid layout.\n\n\n\n\n\nThe choropleth maps displaying Local Moran’s I reveal that darker orange and darker green areas signify outlier regions. To classify it into low-high or high-low cluster, further analysis is required using LISA. Similarly, the light green are indicates either high-high or low-low regions. Notably, the the area around Tuas and Jurong is most likely a low-low area based on the previous geovisualization."
  },
  {
    "objectID": "take-home/the1.html#lisa-map-at-α-5",
    "href": "take-home/the1.html#lisa-map-at-α-5",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "5.5 LISA Map at α 5%",
    "text": "5.5 LISA Map at α 5%\nFor a more in-depth analysis, the subsequent code retrieves the meaningful Local Indicators of Spatial Association (LISA) for the specific purpose of creating maps.\n\n\nCode\nget_sig_lisa_map &lt;- function(lisatable, title) {\n  \n  sig_lisatable &lt;- lisatable  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n  \n  result &lt;- tm_shape(lisatable) +\n    tm_polygons(alpha = 0.5) +\n    tm_borders(alpha = 0.5) +\n    \n    tm_shape(sig_lisatable) +\n    tm_fill(\"median\",\n            id = \"loc_desc\",\n            palette = c(\"blue\", \"lightcoral\", \"lightblue\", \"red\"),\n            alpha= 0.7) + \n    tm_borders(alpha = 0.4) +\n    tm_layout(main.title = title,\n              main.title.size = 1.5,\n              legend.position = c(\"left\", \"top\"))\n    \n  return(result)\n  \n}\n\nsig_lisa_1 &lt;- get_sig_lisa_map(lisa_results[[\"Weekday morning peak\"]],\"LISA categories generated on Weekday Morning at 95% CL\" )\nsig_lisa_2 &lt;- get_sig_lisa_map(lisa_results[[\"Weekday evening peak\"]], \"LISA categories generated on Weekday Afternoon at 95% CL\" )\nsig_lisa_3 &lt;- get_sig_lisa_map(lisa_results[[\"Weekend/holiday morning peak\"]], \"LISA categories generated on Weekend Morning at 95% CL\" )\nsig_lisa_4 &lt;- get_sig_lisa_map(lisa_results[[\"Weekend/holiday morning peak\"]], \"LISA categories generated on Weekend Afternoon at 95% CL\" )\n\n\nIn the ensuing panel, you’ll find a display featuring the noteworthy Local Indicators of Spatial Association (LISA) map corresponding to each peak time.\n\nWeekday morning peakWeekday evening peakWeekend/holiday morning peakWeekend/holiday evening peak\n\n\n\n\nCode\ntmap_mode('plot')\nsig_lisa_1\n\n\n\n\n\n\n\n\n\nCode\ntmap_mode('plot')\nsig_lisa_2\n\n\n\n\n\n\n\n\n\nCode\ntmap_mode('plot')\nsig_lisa_3\n\n\n\n\n\n\n\n\n\nCode\ntmap_mode('plot')\nsig_lisa_1\n\n\n\n\n\n\n\n\nThe preceding choropleth maps illustrate notable groupings and exceptional instances regarding passenger trips originating from each hexagon, applying a significance level of α 5%.\nCluster Interpretation:\nBlue regions (Low-Low Clusters): These areas signify locations where the number of total trips at bus stops is relatively low and is surrounded by other locations with similarly low trip counts. This indicates spatial clustering of lower activity.\nLight Blue regions (Low-High outliers): In these regions, bus stops experience a lower number of total trips compared to their neighbors, suggesting an outlier pattern where specific locations have lower activity amidst areas with higher trip counts.\nLight Coral regions (High-Low outliers): High-Low regions denote areas where bus stops have a higher number of total trips compared to their neighbors, standing out as outliers with higher activity within regions of lower overall trip counts.\nRed regions (High-High clusters): These regions represent clusters of higher activity, where bus stops experience a higher number of total trips and are surrounded by other locations with similarly high trip counts. This implies spatial clustering of higher activity zones."
  },
  {
    "objectID": "take-home/the1.html#findings-and-future-improvements",
    "href": "take-home/the1.html#findings-and-future-improvements",
    "title": "Take-home 1 - Geospatial Analytics for Public Goods",
    "section": "5.6 Findings and Future Improvements",
    "text": "5.6 Findings and Future Improvements\n\nGeneral ConcentrationWeekends vs. WeekdaysHigh and Low ClustersBordersMode of Transport InfluencePopulation Density CorrelationEconomic Activities and Employment HubsDemographic VariationsUrban Planning and Infrastructure DevelopmentSeasonal and Event-Based VariationsTechnological Advancements and Ride-Sharing Trends\n\n\nThe geographical arrangement unveils elevated concentrations of overall bus trips in the residential sectors situated in the East, North, and West, juxtaposed with diminished concentrations in the Southern sector of Singapore. Prominent clusters of heightened activity align with significant transportation hubs like Ang Mo Kio, Bedok, Clementi, Hougang, Toa Payoh, Woodlands, and more.\n\n\nSpecific hexagonal zones, notably in the vicinity of Bukit Timah and Woodlands Checkpoint, display unique trends on weekends. These areas fluctuate between instances of high-low outliers and elevated clusters, indicating dynamic shifts in bus trip patterns across varying days of the week.\n\n\nHigh Clusters: Within the North, East, and West regions, particularly in residential zones, there is a discernible prevalence of elevated concentrations of bus trips. These areas are indicative of heightened commuting activities and increased local engagements, reflecting a probable dependence on public transportation for daily travel.\nLow Clusters: Conversely, the western sectors of Singapore, predominantly consisting of industrial areas, demonstrate diminished concentrations of bus trips. This pattern hints at a lower reliance on public transportation within these industrial zones, potentially influenced by factors such as lower population density or the prevalence of alternative modes of transport. The observed lower bus trip concentrations in these regions align with a distinctive transportation landscape characterized by different travel patterns and demands.\n\n\nClusters of Low Passenger Trips: Examining the Western and Southern perimeters of Singapore, we discern notable concentrations of low passenger trips. Specifically, areas along these borders exhibit a distinct pattern of reduced public transportation usage. This phenomenon suggests a potential lower demand for bus services in these regions, indicating varying transportation preferences or alternative modes of commuting among residents.\nNoteworthy Outliers and Unique Transportation Needs: Within this context, noteworthy outliers such as Jurong Port, Pioneer Sector, and Tuas stand out, marking key gateways that play a crucial role in accommodating nearby migrant workers and tourists. These specific regions may harbor unique transportation requirements, contributing significantly to the distinctive spatial patterns observed. The presence of outliers indicates a deviation from the general trend, emphasizing the importance of understanding the specific dynamics influencing transportation demand in these particular locales.\n\n\nThe spatial distribution of bus trips may be influenced by the availability and efficiency of alternative modes of transportation, such as the MRT (Mass Rapid Transit) system or private vehicles. Areas with robust alternative public transportation networks might exhibit different bus trip patterns compared to regions heavily reliant on private vehicles. Analyzing the interplay between different modes of transport can offer insights into the dynamics of bus trip concentrations and outliers.\n\n\nExploring the correlation between bus trip patterns and population density can unveil insights into how transportation needs align with residential density. High-density residential areas may show increased reliance on public transportation, leading to concentrated bus trip clusters. On the other hand, lower-density regions might exhibit more scattered trip patterns.\n\n\nInvestigating the correlation between bus trip concentrations and major economic activities or employment hubs can shed light on commuter patterns. Areas with prominent business districts or industrial zones may experience higher bus trip concentrations during peak commuting hours, contributing to spatial clusters.\n\n\nAnalyzing demographic factors such as age groups, income levels, and cultural preferences may provide nuanced insights into bus trip patterns. Different demographic segments may exhibit varying transportation behaviors, influencing the distribution of bus trips across different regions.\n\n\nExamining the influence of urban planning and infrastructure development on bus trip patterns can highlight the impact of transportation policies and initiatives. Regions with well-planned transportation infrastructure may demonstrate more organized and efficient bus trip distributions.\n\n\nConsidering the impact of seasons and major events on bus trip patterns can uncover dynamic changes in spatial distributions. Certain regions may experience fluctuations in bus trip concentrations during holidays, festivals, or major events, reflecting shifts in travel behavior.\n\n\nAssessing the role of technological advancements and ride-sharing trends on bus trip patterns can provide insights into the evolving landscape of transportation preferences. The integration of technology-driven solutions may influence how people choose and utilize bus services."
  }
]